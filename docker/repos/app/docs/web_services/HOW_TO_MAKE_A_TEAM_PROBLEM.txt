This document describes the procedure a problem writer and admin must use to 
make a team problem, including writing and deploying a web service.

1.  Problem Writer Proposes Problem

   Goto "Problems" -> "Main Team Problem Room"
   Click "Create Problem"
   In the "Statement Editor" tab, enter the "Problem Name".  The Problem Name 
      is not the name of any class, just a general name for the entire problem.
   In the "Statement Editor" tab, enter the "Introduction".  This is pure HTML, 
      not our XML version of HTML.  So use <br>, not <br/>, etc...
   In the "Components" tab, First enter the class and method of the primary 
      component.  Then add the classes and methods for the secondary components.
   In the "Components" tab, Add the name of the web services the problem will 
      use.  If C++ is allowed in the contest, only one web service can be used 
      in a problem.
   Click "Submit".  This will set the problem as "Proposal Pending".  However, 
      the writer should probably fill out more information on each of the 
      components so the admin has a better idea what is going on when decided 
      whether to approve the problem or not.  
   To edit a component, select the component from the "Components" table and 
      click "View".
   This brings the user to a screen just like the screen for a regular problem. 
      Here the writer can enter the problem statement and, when the proposal 
      has been approved, the solution and test data.  If C++ is allowed in the 
      contest, not two components can have the same parameter type list 
      (limitation of the C++ wrapper that is written by the C++ compiler).  

2.  Admin Approves Problem Proposal

   Goto "Admin" -> "Pending Team Problems".
   Select the problem from the "Pending Proposals" table.  
   The Admin can view the problem statement for the entire problem (including 
      all components) and can approve the problem through the "Pending Reply" tab.

3.  Writer Writes and Deploys the Web Service(s)

   Goto "Problems" -> "Main Team Problem Room".
   Select the problem from the list and click "View"
   In the "Components" tab, select the Web Service and click "View".
   This brings up the web service screen.
   The web service must be written in Java and must have at least an interface 
      and implementation file.  There can also an arbitrary number of helper 
      classes.  Enter the name of the interface class and implementation class 
      and any helper classes in the "Classes" tab.  (Leave off the ".java").  
      As the classes are specified, tabs to enter the code for the class will 
      become visible.  (If the web service name is Hello, it is common for the 
      interface to be HelloIF and the implementation to be HelloImpl).
    Enter the code for the web services.  All classes should be in the 
       com.topcoder.webserivce.<web_service_name> package.  The interface file 
       must extend java.rmi.Remote and the implementation file must implement 
       the interface file.  All methods must be declared to throw 
       java.rmi.RemoteException.  Only simple (int, String ..., not ArrayList 
       classes can be used in the public method signatures).  The interface 
       file should have it's methods and classes javadoced so the competitor 
       knows how to use them. Here is an example of a web service with name 
       "Hello": 

   Interface Class: HelloIF.java:

      package com.topcoder.webservice.Hello;

      import java.rmi.*;

      /**
       * This class contains the the methods that will be helpful in the 
       * HelloWSTest problem.
       */
      public interface HelloIF extends Remote {
      
          /**
           * This method takes a <code>String</code> name and prepends
           * "Hello, " to it.
           *
           * @param name The name to say hi to
           */
          public String sayHello(String name) throws RemoteException;
      
          /**
           * This method returns the sum of two numbers.
           *
           * @param a The first number
           * @param b The second number
           */
          public int add(int a, int b) throws RemoteException;
      }
      
   Implementation Class: HelloImpl.java

      package com.topcoder.webservice.Hello;
      
      import java.rmi.*;
      
      public class HelloImpl implements HelloIF {
      
          public String sayHello(String name) {
              return "Hello, " + name;
          }
      
          public int add(int a, int b) {
              return a+b;
          }
      }

   When the web service is written click "Build & Deploy".  This will build and 
      deploy the web service.  It takes a couple minutes.  If there are no errors, 
      the web service is deployed.  In the "Java Docs" tab click "Generate 
      JavaDocs", this will generate the java docs, store them in the database, 
      and give you a preview.

4.  Writer Completes Component Classes

   For each class in the problem, the writer must write a solution and give 
      test cases, like a regular srm problem.  The write should write the 
      secondary components first, and save them.  When those have been saved 
      the main component can be written.  If a component must reference the 
      web service, include "com.topcoder.webservice.<web_service_name>".  The 
      method must then get an instance of the interface file.  If the interface 
      file is WebServiceNameIF, this can be done with:

    WebServiceNameIF webServiceName = 
       (WebServiceNameIF)new WebServiceName_Impl().getWebServiceNameIFPort();

   Methods can then be called on that object.  Declare the solution method to 
      throw java.rmi.RemoteException if needed.

   If the main component needs to reference another component, nothing needs to 
      be included, just create a new instance of the other component with 
      something like OtherComponent oc = new OtherComponent();

   Once all components have been saved saved successfully, go to the main 
      problem and submit it.  This will recheck all components and advance the 
      status to "Submission Pending".

5. Admin Approves Submission

   Goto "Admin" -> "Pending Team Problems".
   Select the problem from the "Pending Submission" table.  
   The Admin can view the problem statement for the entire problem (including 
      all components) and can approve the problem through the "Pending Reply" 
      tab.
   By expanding the problem in the "Pending Submission" table, the admin can 
      also view the details (solutions, test cases, etc...) for each 
      component.

6.  Problem Testers

   Through the "Admin" tab of the whole problem or of the individual components,
      the admin can assign testers to the problem.  Assigning a tester at the 
      problem level will assign them as tester of each component.  Assigning a 
      tester at the component level will assign them as tester of just that 
      component.  Testers can go to the problem screen and view (Read only) 
      information on the whole problem, including moving to read only versions 
      of the web service screens.  They can view the components screens and 
      enter their solutions to the components, similarly to testing regular 
      problems.

7.  Other Admin stuff

   Also through the "Admin" table of the whole problem, the admin can change the
      status of the problem.

   Also through the "Admin" tabla of the components problem, the admin can 
      change the primary solution of the component.

   When deploying a web service, make sure the web service generator stuff is 
      running on the windows machine.  In QA, this is done by logging in to 
      172.16.20.154 as apps / apps123, moving to the c:\topcoder\coresys 
      directory, typing "setEnv", then "start /B rmiregistry 5018", then 
      "start /B java com.topcoder.server.webservice.remoteserver.CSServer".  
      Ending the telnet session will kill the web service generator stuff 
      (is there a nohup for windows?).
