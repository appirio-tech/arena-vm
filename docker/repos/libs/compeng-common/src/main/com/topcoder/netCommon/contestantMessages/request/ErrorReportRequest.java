package com.topcoder.netCommon.contestantMessages.request;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import com.topcoder.netCommon.contest.ContestConstants;
import com.topcoder.shared.netCommon.CSReader;
import com.topcoder.shared.netCommon.CSWriter;

/**
 * Defines a request to notify the server that there is a client-side error occurred.<br>
 * Use: When the arena client generates an unexpected exception, this request is sent.<br>
 * Note: It does not have any business logic in this request. It is purely for error reporting and debugging purposes.
 * This request can be sent before login.
 * 
 * @author Qi Liu
 * @version $Id: ErrorReportRequest.java 72292 2008-08-12 09:10:29Z qliu $
 */
public class ErrorReportRequest extends BaseRequest {
    /** Represents the error message of the exception, including stack trace. */
    protected String error;

    /** Represents the Java virtual machine vendor. */
    protected String jvmVendor;

    /** Represents the Java version. */
    protected String jvmVersion;

    /**
     * Creates a new instance of <code>ErrorReportRequest</code>. It is required by custom serialization.
     */
    public ErrorReportRequest() {
    }

    /**
     * Creates a new instance of <code>ErrorReportRequest</code>. The JVM information is gathered automatically.
     * 
     * @param error the exception generated by the arena client.
     */
    public ErrorReportRequest(Throwable error) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        error.printStackTrace(pw);
        pw.flush();
        pw.close();

        this.error = sw.toString();
        jvmVendor = System.getProperty("java.vendor");
        jvmVersion = System.getProperty("java.version");
    }

    public void customReadObject(CSReader reader) throws IOException {
        super.customReadObject(reader);
        error = reader.readString();
        jvmVendor = reader.readString();
        jvmVersion = reader.readString();
    }

    public void customWriteObject(CSWriter writer) throws IOException {
        super.customWriteObject(writer);
        writer.writeString(error);
        writer.writeString(jvmVendor);
        writer.writeString(jvmVersion);
    }

    public int getRequestType() {
        return ContestConstants.ERROR_REPORT;
    }

    /**
     * Gets the Java virtual machine vendor of the client generating the error.
     * 
     * @return the Java virtual machine vendor.
     */
    public String getJVMVendor() {
        return jvmVendor;
    }

    /**
     * Gets the Java version of the client generating the error.
     * 
     * @return the Java version.
     */
    public String getJVMVersion() {
        return jvmVersion;
    }

    /**
     * Gets the error message including stack trace of the client.
     * 
     * @return the error message.
     */
    public String getError() {
        return error;
    }

    public String toString() {
        StringBuffer ret = new StringBuffer(1000);
        ret.append("(com.topcoder.netCommon.contestantMessages.request.ErrorReportRequest) [");
        ret.append("jvmVendor = ");
        ret.append(jvmVendor);
        ret.append(", ");
        ret.append("jvmVersion = ");
        ret.append(jvmVersion);
        ret.append(", ");
        ret.append("error = ");
        ret.append(error);
        ret.append(", ");
        ret.append("]");
        return ret.toString();
    }
}
