<project name="glue-base" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">
	<!--
        This is a preliminary version of the build
        We need to integrate web builds and split this huge file 
        depending on the kind of target we want to generate
     -->


	<!--  Common directories for projects -->

	<property name="src.dir" location="${basedir}/src" />
	<property name="src.main.dir" location="${src.dir}/main" />
	<property name="src.test.dir" location="${src.dir}/test" />
	<property name="src.resources.dir" location="${basedir}/resources" />
	<property name="src.images.dir" location="${basedir}/images" />

	<property name="dist.dir" location="${basedir}/dist" />
	<property name="dist.artifacts.dir" location="${dist.dir}/artifacts" />
	<property name="dist.doc.dir" location="${dist.dir}/doc" />
	<property name="dist.lib.dir" value="${dist.dir}/libs" />

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="build.test-classes.dir" value="${build.dir}/test-classes" />
	<property name="build.test-results.dir" value="${build.dir}/test-results" />
	<property name="build.lib.dir" value="${build.dir}/libs" />
	<property name="build.artifacts.dir" location="${build.dir}/artifacts" />

	<property name="ide.lib.destdir" value="${root.dir}/artifacts" />

	<property environment="env" />

	<dirname file="${ant.file.glue-base}" property="glue.dir" />
	<property file="${glue.dir}/ivy.properties" />
	<property file="${glue.dir}/glue-versions.properties" />

	<import file="${glue.dir}/glue-macros.xml" />

	<path id="classpath.lib">
		<fileset dir="${ivy.lib.dir}" includes="*.jar" />
	</path>

	<path id="classpath.artifacts">
		<fileset dir="${build.artifacts.dir}" includes="*.jar" />
	</path>

	<path id="glue.lib.path">
		<fileset dir="${glue.dir}/libs" includes="*.jar" />
		<dirset dir="${glue.dir}/resources" />
	</path>

	<target name="load-ivy" unless="ivy-loaded">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss" />
		</tstamp>

		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="glue.lib.path" />
		<property file="${glue.dir}/repository.properties" prefix="repository.credential" />
		<ivy:settings file="${ivy.settings.file}">
			<credentials host="coder.topcoder.com" realm="TopCoder Internal Subversion Repository" username="${repository.credential.user}" passwd="${repository.credential.password}"/>
			<credentials host="coder.topcoder.com:443" realm="TopCoder Internal Subversion Repository" username="${repository.credential.user}" passwd="${repository.credential.password}"/>
		</ivy:settings>
		
		<property name="ivy-loaded" value="true" />
	</target>

	<target name="init" depends="load-ivy">
	        <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="glue.lib.path"/>
		<available property="images-exist" file="${src.images.dir}/." />
		<available property="resources-exist" file="${src.resources.dir}/." />
	</target>

	<!-- ================================= 
        target: resolve              
        ================================= -->
	<target name="resolve" description="--> retrieve dependencies with ivy" depends="init">
		<ivy:retrieve sync="true" type="jar" />
		<mkdir dir="${ivy.lib.dir}" />
		<ivy:artifactproperty name="filename.[artifact]" value="[artifact]-[revision].[ext]" />
	</target>

	<!-- ================================= 
        target: report              
        ================================= -->
	<target name="report" depends="resolve" description="--> generates a report of dependencies">
		<ivy:report todir="${build.dir}" />
	</target>

	<!-- ================================= 
        target: recurse
        ================================= -->

	<macrodef name="recurse">
		<attribute name="target" default="" />
		<attribute name="inheritall" default="false" />
		<attribute name="inheritrefs" default="false" />
		<element name="inner-subant" optional="true" implicit="true" />
		<sequential>
			<ivy:buildlist reference="build-path" ivyfilepath="ivy.xml" skipbuildwithoutivy="true" root="${ant.project.name}">
				<fileset dir="${root.dir}" includes="**/build.xml" excludes="web/**,gd/**" />
				<fileset dir="${root.dir}" includes="**/build-ivy.xml" excludes="web/**,gd/**" />
			</ivy:buildlist>
			<subant target="@{target}" buildpathref="build-path" inheritall="@{inheritall}" inheritrefs="@{inheritrefs}">
				<inner-subant />
			</subant>
		</sequential>
	</macrodef>

	<target name="recurse" depends="init" description="--> run the target (sysprop:target) in this projects and in all dependee subprojects">
		<property name="target" value="" />
		<recurse target="${target}" />
	</target>

	<!-- ================================= 
        target: compile
        ================================= -->
	<target name="compile.properties">
		<condition property="compile.optimize" value="${env.BUILD_COMPILE_OPTIMIZE}" else="on">
			<isset property="env.BUILD_COMPILE_OPTIMIZE"/>
		</condition>
		<condition property="compile.source" value="${env.BUILD_COMPILE_SOURCE}" else="1.5">
			<isset property="env.BUILD_COMPILE_SOURCE"/>
		</condition>
		<condition property="compile.debug" value="${env.BUILD_COMPILE_DEBUG}" else="on">
			<isset property="env.BUILD_COMPILE_DEBUG"/>
		</condition>
<!--
		<property name="compile.optimize" value="on" />
		<property name="compile.source" value="1.5" />
		<property name="compile.debug" value="on" />
-->
	</target>

	<target name="images" depends="init" if="images-exist" unless="skip.images">
		<echo level="debug">Copying images</echo>
		<copy todir="${build.classes.dir}" filtering="false">
			<fileset dir="${src.images.dir}" />
		</copy>
	</target>

	<target name="resources" depends="init" if="resources-exist" unless="skip.resources">
		<echo level="debug">Copying resources</echo>
		<copy todir="${build.classes.dir}" filtering="true">
			<fileset dir="${src.resources.dir}" />
		</copy>
	</target>

	<target name="prepare-compile" depends="compile.properties, resolve" />



	<target name="compile" depends="prepare-compile" description="--> compiles source main" unless="glue_base.compile_set">
		<echo level="info">COMPILING ${ant.project.name} with source ${compile.source}  ------------------------------------------</echo>
		<compile>
			<includes>
				<include name="**/*.java" />
			</includes>
		</compile>
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.main.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

<!--
                <antcall target="compile-tests"/>
-->
		<antcall target="resources" />
		<antcall target="images" />
		<property name="glue_base.compile_set" value="true" />
	</target>

	<target name="compile-tests" depends="prepare-compile" if="has-tests">
		<condition property="compile.test-source" value="${env.BUILD_COMPILE_TEST_SOURCE}" else="${compile.source}">
			<isset property="env.BUILD_COMPILE_TEST_SOURCE"/>
		</condition>
		
                <path id="test-classpath">
                	<pathelement path="${classpath.lib}"/>
                	<pathelement location="${build.classes.dir}"/>
	                <fileset dir="${build.lib.dir}" includes="**/*.jar"/>
			<!-- these are used in other modules -->
                        <pathelement location="${root.dir}/farm-shared/build/test-classes"/>
                        <pathelement location="${root.dir}/libs/custom-serialization/build/test-classes"/>
                        <pathelement location="${root.dir}/libs/compeng-common/build/test-classes"/>
                </path>

		<echo message="test class compile with version ${compile.test-source}"/>
		
		<compile srcdir="${src.test.dir}" destdir="${build.test-classes.dir}" target="${compile.test-source}" classpathref="test-classpath">
			<includes>
				<include name="**/*.java" />
			</includes>
		</compile>

	</target>

	<target name="unit-test">
		<!-- need a wrapper target due to old version of ant in vm setup -->
		<pathconvert property="has-tests" setonempty="false" pathsep=" ">
			<path>
				<fileset dir="${src.test.dir}" includes="**/*.java" erroronmissingdir="false"/>
			</path>
		</pathconvert>
		<antcall target="unit-test-exec"/>

	</target>
	
	<target name="unit-test-exec" depends="compile-tests" description="run junit tests" if="has-tests">
		<mkdir dir="${build.test-results.dir}"/>
		<junit printsummary="yes" includeantruntime="no" showoutput="no" haltonerror="no">
			<classpath>
				<pathelement location="${build.test-classes.dir}"/>
				<pathelement path="${classpath.lib}"/>
               	         	<pathelement location="${build.classes.dir}"/>
               	         	<fileset dir="${build.lib.dir}" includes="**/*.jar"/>
				<!-- hard code common test classes -->
               	         	<pathelement location="${root.dir}/farm-shared/build/test-classes"/>
                        	<pathelement location="${root.dir}/libs/custom-serialization/build/test-classes"/>
                        	<pathelement location="${root.dir}/libs/compeng-common/build/test-classes"/>
			</classpath>
			<formatter type="xml"/>
			<batchtest fork="no" todir="${build.test-results.dir}">
				<fileset dir="${src.test.dir}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

    <!-- - - - - - - - - - -  - - - - - - - - - 
        target: version
     - - - - - - - - - -  - - - - - - - - -  -->
    <target name="version" depends="init" unless="ivy.new.revision">
        <copyproperty dest="sub.project.app.version" src="${ant.project.name}.app.version" />
	<if>
            <and>
               <isset property="sub.project.app.version" />
               <not>
                  <contains string="${sub.project.app.version}" substring="app.version" />
               </not>
            </and>
            <then>
                <property name="app.version" value="${sub.project.app.version}" />
            </then>
            <else>
                <property name="app.version" value="SNAPSHOT" />
            </else>
        </if>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
        target: jar
        - - - - - - - - - - - - - - - - - -->
    <target name="jar" depends="compile, jar-only, update_jar_security" description="--> compiles and then generates jar" />

    <target name="update_jar_security" if="is.need.update.jar.security">
       <property name="jar.name" value="${build.artifacts.dir}/${ant.project.name}-${app.version}.jar" />
       <jar destfile="${jar.name}" update="true">
           <manifest>
              <attribute name="Permissions" value="${permission_type}"/>
              <attribute name="Codebase" value="${code_base}"/>
           </manifest>
      </jar>
    </target>
	<target name="jar-only" depends="version" description="--> generates jar" unless="jar_set">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.artifacts.dir}" />
		<property name="jar.name" value="${build.artifacts.dir}/${ant.project.name}-${app.version}.jar" />
		<property name="filename.${ant.project.name}" value="${ant.project.name}-${app.version}.jar" />
		<jar destfile="${jar.name}" update="false">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Version" value="${app.version}" />
			</manifest>
			<fileset dir="${build.classes.dir}" />
		</jar>
		<property name="jar_set" value="true" />
	</target>

	<!-- ================================= 
        target: publish              
        ================================= -->
	<target name="publish" depends="publish-local" description="--> publish this project in the ivy repository">
		<ivy:publish artifactspattern="${build.artifacts.dir}/[artifact]-[revision].[ext]" resolver="internal-artifacts" pubrevision="${app.version}" status="release" update="true" />
		<echo message="project ${ant.project.name} released with version ${app.version}" />
	</target>

	<!-- ================================= 
        target: publish-local              
        ================================= -->
	<target name="publish-local" depends="publish-workspace" description="--> publish this project in the user local ivy repository">
		<ivy:publish artifactspattern="${build.artifacts.dir}/[artifact]-[revision].[ext]" resolver="local-user" pubrevision="${app.version}" pubdate="${now}" status="integration" forcedeliver="true" overwrite="true" />
		<echo message="project ${ant.project.name} published locally with version ${app.version}" />
	</target>

	<!-- ================================= 
        target: publish-workspace              
        ================================= -->
	<target name="publish-workspace" depends="jar" description="--> publish this project in the workspace ivy repository">
		<ivy:publish artifactspattern="${build.artifacts.dir}/[artifact]-[revision].[ext]" resolver="local-workspace" pubrevision="${app.version}" pubdate="${now}" status="integration" forcedeliver="true" overwrite="true" />
		<echo message="project ${ant.project.name} published locally with version ${app.version}" />
	</target>

	<!-- ================================= 
        target: publish-shared              
        ================================= -->
	<target name="publish-shared" depends="publish-local" description="--> publish this project in the shared local ivy repository">
		<ivy:publish artifactspattern="${build.artifacts.dir}/[artifact]-[revision].[ext]" resolver="local-shared" pubrevision="${app.version}" pubdate="${now}" status="integration" forcedeliver="true" overwrite="true" />
		<echo message="project ${ant.project.name} published locally with version ${app.version}" />
	</target>


	<!-- =================================
        target: zip
        ================================= -->
	<target name="zip-doc" depends="generate-javadocs" unless="nodoc" description="--> generates JavaDoc for the main source folder">
	    <mkdir dir="${dist.artifacts.dir}" />
		<property name="zip.doc.file" location="${dist.artifacts.dir}/${ant.project.name}-doc-${app.version}.zip" />
		<zip destfile="${zip.doc.file}">
			<zipfileset dir="${dist.doc.dir}" />
		</zip>
		<property name="nodoc" value="true" />
	</target>

	<target name="zip" depends="jar,zip-doc" description="Generates the jar, doc and the deployment properties. The generates a zip with all required files">
		<property name="dist.zip.file" location="${dist.dir}/${ant.project.name}-${app.version}.zip" />
		<propertyfile file="${dist.dir}/deployment.properties">
			<entry key="version" value="${app.version}" />
			<entry key="jars" value="${ant.project.name}-${app.version}.jar,${project.jars.deploy},${external.jars.deploy}" />
		</propertyfile>
		<zip destfile="${dist.zip.file}" duplicate="preserve">
			<zipfileset file="${zip.doc.file}" />
			<zipfileset prefix="jars" file="${jar.name}" />
			<zipfileset prefix="jars" dir="${build.lib.dir}" fullpath="false" />
			<zipfileset prefix="deployment" file="${dist}/deployment.properties" />
		</zip>
	</target>


	<!-- =================================
        target: javadoc
        ================================= -->
	<target name="generate-javadocs" depends="jar" description="--> generates JavaDoc" unless="nodoc">
		<mkdir dir="${dist.doc.dir}" />
		<javadoc access="public" author="true" classpathref="classpath.lib" destdir="${dist.doc.dir}" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="com.topcoder.*" source="${compile.source}" sourcepath="${src.main.dir}" splitindex="true" use="true" version="true">
			<doctitle>
				<![CDATA[<h1>Project Name</h1>]]>
			</doctitle>
		    <bottom>
				<![CDATA[<i>Copyright TopCoder Inc. 2008. All Rights Reserved.</i>]]>
			</bottom>
		</javadoc>
		<property name="nodoc" value="true" />
	</target>


<!-- ================================= 
        target: clean-build              
        ================================= -->
<target name="clean-build" depends="init" description="--> clean the project (build)">
<delete includeemptydirs="true" dir="${build.dir}" />
</target>

<!-- ================================= 
        target: clean-dist            
        ================================= -->
<target name="clean-dist" depends="init" description="--> clean the project (dist)">
<delete includeemptydirs="true" dir="${dist.dir}" />
</target>

<!-- ================================= 
        target: clean              
        ================================= -->
<target name="clean" depends="clean-build, clean-dist" description="--> clean the project (dist, build)" />

<!-- ================================= 
        target: clean-cache              
        ================================= -->
<target name="clean-cache" depends="init" description="--> clean the ivy cache">
<ivy:cleancache />
</target>



<!-- ================================= 
        More common recursive targets              
        ================================= -->
<target name="clean-all" depends="init" description="--> clean this and all dependents projects">
<recurse target="clean" />
</target>

<target name="publish-workspace-all" depends="init" description="--> publish this and all dependents projects">
<recurse target="publish-workspace" />
</target>

<target name="artifacts-all" depends="init" description="--> publish this and all dependents projects">
<recurse target="artifacts" />
</target>

<target name="unit-test-all" depends="init" description="--> unit test this and all dependents projects">
<recurse target="unit-test" />
</target>

<target name="generate-javadocs-all" depends="init" description="--> generate javadoc of this and all dependents projects">
<recurse target="generate-javadocs" />
</target>

<!-- ================================= 
        IDE Targets         
        ================================= -->
<target name="artifacts" depends="resolve" description="--> retrieve all artifacts and copies them to a root for IDE usage">
<mkdir dir="${ide.lib.destdir}" />
<copy todir="${ide.lib.destdir}">
	<fileset dir="${ivy.lib.dir}" />
</copy>
</target>

</project>
