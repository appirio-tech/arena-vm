/*
* Copyright (C) 2006-2013 TopCoder Inc., All Rights Reserved.
*/

/*
 * DataServicesImpl
 * 
 * Created 08/03/2006
 */
package com.topcoder.farm.controller.services;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.topcoder.farm.controller.api.ProcessorNotFoundException;
import com.topcoder.farm.controller.dao.ClientDAO;
import com.topcoder.farm.controller.dao.DAOFactory;
import com.topcoder.farm.controller.dao.ProcessorDAO;
import com.topcoder.farm.controller.dao.TransactionManager;
import com.topcoder.farm.controller.model.ClientData;
import com.topcoder.farm.controller.model.ProcessorData;
import com.topcoder.farm.controller.model.ProcessorProperties;
import com.topcoder.farm.processor.api.ProcessorIdHelper;

/**
 * <p>
 * Changes in version 1.0 (TC Competition Engine - Processor and Controller Handshake Change v1.0):
 * <ol>
 *      <li>Update {@link #findProcessorByName(String name)} method.</li>
 *      <li>Update {@link #existProcessorWithName(String processorName)} method.</li>
 *      <li>Update {@link #updateProcessorActiveState(String name, boolean active)} method.</li>
 *      <li>Update {@link #existProcessorWithName(String processorName)} method.</li>
 * </ol>
 * </p>
 * @author Diego Belfer (mural), TCSASSEMBLER
 * @version 1.0
 */
public class DataServicesImpl implements DataServices {
    private Log log = LogFactory.getLog(DataServicesImpl.class);
    private ProcessorDAO processorDao;
    private ClientDAO clientDao;
    private TransactionManager txMng;
    
    public DataServicesImpl() {
        processorDao = DAOFactory.getInstance().createProcessorDAO();
        clientDao = DAOFactory.getInstance().createClientDAO();
        txMng = DAOFactory.getInstance().getTransactionManager();
    }
    /**
     * Finds the ProcessorData with the given name
     *  
     * @param name The name of the processor.
     * @return The processorData or null if not found
     */
    public ProcessorProperties findProcessorByName(String name) {
        if (ProcessorIdHelper.isIdForTemplatedProcessor(name)) {
            //This is an composed id, @template-randomId, so we need to look for the template name only
            name = ProcessorIdHelper.extractTemplateName(name);
        }
        ProcessorProperties result = null;
        txMng.beginTransaction();
        try {
            result = processorDao.findByName(name);
            txMng.commit();
            return result;
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }
    
    /**
     * Finds the reservation processor data with the given name and ip
     *  
     * @param name The name of the processor.
     * @param ip the ip address of processor.
     * @return The processorData or null if not found
     */
    public ProcessorData findReservationProcessor(String name, String ip) {
        ProcessorData result = null;
        txMng.beginTransaction();
        try {
            result = processorDao.findByNameAndIP(name, ip);
            txMng.commit();
            return result;
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }
    public ClientData findClientByName(String name) {
        ClientData result = null;
        txMng.beginTransaction();
        try {
            result = clientDao.findByName(name);
            txMng.commit();
            return result;
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }
    /**
     * Updates processor active state.
     * 
     * @param name The name of the processor
     * @param active The new active states
     * 
     * @throws ProcessorNotFoundException if no processor exists with the given name
     */
    public void updateProcessorActiveState(String name, boolean active) throws ProcessorNotFoundException {
        if (ProcessorIdHelper.isIdForTemplatedProcessor(name)) {
            name = ProcessorIdHelper.extractTemplateName(name);
            log.warn("The id corresponds to an autogenerated id for a template, the template '" + name + "' will be activated/deactivated" );
        }
        ProcessorProperties result = null;
        ProcessorData reservedProcessor = null;
        txMng.beginTransaction();
        try {
            reservedProcessor = processorDao.findByNameAndIP(name, "NONE");
            if (reservedProcessor != null) {
                reservedProcessor.setActive(active);
            } else {
                String groupId = ProcessorIdHelper.getGroupIdByProcessorId(name);
                result = processorDao.findByName(groupId);
                if (result == null) {
                    txMng.rollback();
                    throw new ProcessorNotFoundException("Processor name="+name+" not found");
                } else {
                    log.warn("The id " + name + " register with group id "+ groupId +" dynamically, so it can't be activated/deactivated");
                }
            }
            txMng.commit();
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }
    
    public boolean existClientWithName(String clientName) {
        ClientData result = null;
        txMng.beginTransaction();
        try {
            result = clientDao.findByName(clientName);
            txMng.commit();
            return result != null;
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }

    /**
     * Verifies if a processor with the given name exists in the farm
     * 
     * @param processorName The name to check
     * 
     * @return true if the given processor exists in the farm
     */
    public boolean existProcessorWithName(String processorName) {
        if (ProcessorIdHelper.isIdForTemplatedProcessor(processorName)) {
            processorName = ProcessorIdHelper.extractTemplateName(processorName);
        }
        processorName = ProcessorIdHelper.getGroupIdByProcessorId(processorName);
        ProcessorProperties result = null;
        txMng.beginTransaction();
        try {
            result = processorDao.findByName(processorName);
            txMng.commit();
            return result != null;
        } catch (RuntimeException e) {
            txMng.rollback();
            throw e;
        }
    }
}
