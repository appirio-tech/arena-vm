/* Generated By:JJTree&JavaCC: Do not edit this line. MSILParserTokenManager.java */
package com.topcoder.services.compiler.util.MSILParser;

public class MSILParserTokenManager implements MSILParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe180000020000000L) != 0L || (active1 & 0xf041818068003c3eL) != 0L || (active2 & 0xc3e000007039L) != 0L || (active3 & 0xfffffe180c003980L) != 0L || (active4 & 0xffffffffff800007L) != 0L || (active5 & 0xffL) != 0L)
         {
            jjmatchedKind = 431;
            return 105;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x800040L) != 0L || (active5 & 0x700L) != 0L)
         {
            jjmatchedKind = 431;
            return 8;
         }
         if ((active0 & 0x1c00000000000000L) != 0L || (active1 & 0xfbe7e7f931fc381L) != 0L || (active2 & 0x13c1fffff8fc6L) != 0L || (active3 & 0x1e7f3ffc640L) != 0L || (active4 & 0x7ffff8L) != 0L || (active5 & 0xfffffffffffff800L) != 0L || (active6 & 0x7ffffffffL) != 0L)
         {
            jjmatchedKind = 431;
            return 106;
         }
         if ((active3 & 0x8L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x3f80000020000000L) != 0L || (active1 & 0x8efdffb7939fc25dL) != 0L || (active2 & 0x1fffffd87ff85L) != 0L || (active3 & 0x1ffff9e7ffffaf40L) != 0L || (active4 & 0xffffffffcc7ffff8L) != 0L || (active5 & 0xdffffffffffff7ffL) != 0L || (active6 & 0x7ffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 1;
            }
            return 106;
         }
         if ((active1 & 0x7000000068003822L) != 0L || (active2 & 0x30L) != 0L || (active3 & 0x61800001080L) != 0L || (active4 & 0x23800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 419;
               jjmatchedPos = 1;
            }
            return 106;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x102004800000580L) != 0L || (active2 & 0x278004aL) != 0L || (active3 & 0xe000000000004000L) != 0L || (active4 & 0x10000007L) != 0L || (active5 & 0x2000000000000800L) != 0L)
            return 106;
         return -1;
      case 2:
         if ((active3 & 0x4000000000000000L) != 0L)
            return 34;
         if ((active0 & 0x3f80000020000000L) != 0L || (active1 & 0xfbfd7fc7fb9ffeffL) != 0L || (active2 & 0x1bfdffd87fffdL) != 0L || (active3 & 0x980001dffbfff7c0L) != 0L || (active4 & 0xfffffff9187fffffL) != 0L || (active5 & 0x807fffffffffff1fL) != 0L || (active6 & 0x38fffff01L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 2;
            }
            return 106;
         }
         if ((active1 & 0x402803000000100L) != 0L || (active2 & 0x402002780000L) != 0L || (active3 & 0x7fffe2004000800L) != 0L || (active4 & 0x6e7800000L) != 0L || (active5 & 0x5f800000000000e0L) != 0L || (active6 & 0x4700000feL) != 0L)
            return 106;
         return -1;
      case 3:
         if ((active3 & 0x777740004000000L) != 0L || (active4 & 0x483000000L) != 0L || (active5 & 0x300000000000040L) != 0L || (active6 & 0x60000084L) != 0L)
            return 34;
         if ((active3 & 0x4000000000000000L) != 0L)
            return 107;
         if ((active0 & 0x3f80000020000000L) != 0L || (active1 & 0xf6ff7f87f89fffe3L) != 0L || (active2 & 0x1ffdd7df7cfddL) != 0L || (active3 & 0x800001c7fbffb740L) != 0L || (active4 & 0xfffffff9187ffc1fL) != 0L || (active5 & 0x807ffffffc00f71fL) != 0L || (active6 & 0x38fffff11L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 3;
            }
            return 106;
         }
         if ((active1 & 0x90000400300001cL) != 0L || (active2 & 0x280083020L) != 0L || (active3 & 0x1800004080L) != 0L || (active5 & 0x800L) != 0L)
            return 106;
         if ((active3 & 0x1800000000000000L) != 0L || (active4 & 0x3e0L) != 0L || (active5 & 0x3ff0000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 2;
            }
            return 34;
         }
         return -1;
      case 4:
         if ((active0 & 0x3f80000020000000L) != 0L || (active1 & 0x7ff7e87d89ffff3L) != 0L || (active2 & 0x1b4d5fd870fddL) != 0L || (active3 & 0x80000195987bd600L) != 0L || (active4 & 0x108000407L) != 0L || (active5 & 0x8060fffffc000f00L) != 0L || (active6 & 0x200ffff11L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 4;
            }
            return 106;
         }
         if ((active6 & 0x80000000L) != 0L)
            return 34;
         if ((active3 & 0x111140000000000L) != 0L)
            return 107;
         if ((active3 & 0x1e66600000000000L) != 0L || (active4 & 0x4830003e0L) != 0L || (active5 & 0x300000003ff0040L) != 0L || (active6 & 0x60000084L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 4;
            }
            return 107;
         }
         if ((active3 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 4;
            }
            return 57;
         }
         if ((active4 & 0xfffffff800000000L) != 0L || (active5 & 0xfL) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 3;
            }
            return 34;
         }
         if ((active1 & 0xf000010020000000L) != 0L || (active2 & 0x4b080070c000L) != 0L || (active3 & 0x42638421c0L) != 0L || (active4 & 0x107ff818L) != 0L || (active5 & 0x1f00000000f010L) != 0L || (active6 & 0x10f000000L) != 0L)
            return 106;
         return -1;
      case 5:
         if ((active3 & 0x4000000L) != 0L || (active4 & 0x7fffff0003000000L) != 0L || (active5 & 0x300000000000000L) != 0L || (active6 & 0x60000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 5;
            }
            return 107;
         }
         if ((active3 & 0x2000000L) != 0L || (active4 & 0x511010L) != 0L || (active5 & 0x1e00000000f000L) != 0L || (active6 & 0xf000000L) != 0L)
            return 34;
         if ((active3 & 0x1e66600000000000L) != 0L || (active4 & 0x800000fc800003e0L) != 0L || (active5 & 0x3ff004fL) != 0L || (active6 & 0x84L) != 0L)
            return 107;
         if ((active0 & 0x3580000020000000L) != 0L || (active1 & 0x87ff2e85d88f6df3L) != 0L || (active2 & 0x18c4181000dc4L) != 0L || (active3 & 0x8000009008285400L) != 0L || (active4 & 0x108000401L) != 0L || (active5 & 0x8040000000000f00L) != 0L || (active6 & 0x200000011L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 5;
            }
            return 106;
         }
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x500200109200L) != 0L || (active2 & 0x30947c870219L) != 0L || (active3 & 0x105d0538200L) != 0L || (active4 & 0x66006L) != 0L || (active5 & 0x20001ffc000000L) != 0L || (active6 & 0xff00L) != 0L)
            return 106;
         if ((active5 & 0xffe000000000L) != 0L || (active6 & 0xff0000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 4;
            }
            return 34;
         }
         return -1;
      case 6:
         if ((active3 & 0x1444400000000000L) != 0L || (active4 & 0x44204L) != 0L || (active5 & 0x1fffff0000L) != 0L || (active6 & 0xff00L) != 0L)
            return 34;
         if ((active3 & 0x4000000L) != 0L || (active4 & 0x600000f003511010L) != 0L || (active5 & 0x30003e00000000fL) != 0L || (active6 & 0x601f0000L) != 0L)
            return 107;
         if ((active0 & 0x2400000020000000L) != 0L || (active1 & 0x5eb0c8150076df3L) != 0L || (active2 & 0x8c41810005c0L) != 0L || (active3 & 0x9008281000L) != 0L || (active4 & 0x100000400L) != 0L || (active5 & 0x8040000000000700L) != 0L || (active6 & 0x200000001L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 6;
            }
            return 106;
         }
         if ((active3 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 6;
            }
            return 57;
         }
         if ((active4 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 5;
            }
            return 34;
         }
         if ((active4 & 0xfffff0000000000L) != 0L || (active5 & 0xfc0000000000L) != 0L || (active6 & 0xe00000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 6;
            }
            return 107;
         }
         if ((active0 & 0x1180000000000000L) != 0L || (active1 & 0x8214220488880000L) != 0L || (active2 & 0x1000000000804L) != 0L || (active3 & 0x8000000100024400L) != 0L || (active4 & 0x8000001L) != 0L || (active5 & 0x800L) != 0L || (active6 & 0x10L) != 0L)
            return 106;
         return -1;
      case 7:
         if ((active4 & 0x2000001L) != 0L || (active5 & 0x200000000000000L) != 0L || (active6 & 0x40000000L) != 0L)
            return 34;
         if ((active3 & 0x1444400000000000L) != 0L || (active4 & 0x44204L) != 0L || (active5 & 0xefc07c000000L) != 0L || (active6 & 0x7e1f00L) != 0L)
            return 107;
         if ((active3 & 0x2000000L) != 0L || (active4 & 0x1fffff0000000000L) != 0L || (active5 & 0x101f82000000L) != 0L || (active6 & 0x80e000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 7;
            }
            return 107;
         }
         if ((active1 & 0x1000001400004d2L) != 0L || (active2 & 0x84081000000L) != 0L || (active3 & 0x1000080000L) != 0L || (active4 & 0x100000000L) != 0L || (active5 & 0x40000000000100L) != 0L)
            return 106;
         if ((active0 & 0x2400000020000000L) != 0L || (active1 & 0x4eb0c8010076921L) != 0L || (active2 & 0x8401000005c0L) != 0L || (active3 & 0x8008201000L) != 0L || (active4 & 0x400L) != 0L || (active5 & 0x8000000000000600L) != 0L || (active6 & 0x200000001L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 7;
            }
            return 106;
         }
         return -1;
      case 8:
         if ((active5 & 0x8000000000000000L) != 0L || (active6 & 0x200000000L) != 0L)
            return 34;
         if ((active4 & 0x2000000L) != 0L || (active5 & 0x200000200000000L) != 0L || (active6 & 0x40008000L) != 0L)
         {
            jjmatchedKind = 430;
            jjmatchedPos = 8;
            return 107;
         }
         if ((active3 & 0x2000000L) != 0L || (active4 & 0x1000000000000001L) != 0L || (active5 & 0x101dfa000000L) != 0L || (active6 & 0x807e00L) != 0L)
            return 107;
         if ((active4 & 0xfffff0000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 430;
               jjmatchedPos = 7;
            }
            return 34;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x4eb048000076821L) != 0L || (active2 & 0x140L) != 0L || (active3 & 0x8000000L) != 0L || (active4 & 0x400L) != 0L || (active5 & 0x400L) != 0L || (active6 & 0x1L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 8;
            return 106;
         }
         if ((active0 & 0x2000000020000000L) != 0L || (active1 & 0x80010000100L) != 0L || (active2 & 0x840100000480L) != 0L || (active3 & 0x8000201000L) != 0L || (active5 & 0x200L) != 0L)
            return 106;
         return -1;
      case 9:
         if ((active4 & 0x400L) != 0L)
            return 34;
         if ((active4 & 0xfffff0002000000L) != 0L || (active5 & 0x200000200000000L) != 0L || (active6 & 0x40008000L) != 0L)
            return 107;
         if ((active1 & 0x4e2048000064820L) != 0L || (active2 & 0x40L) != 0L || (active3 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 9;
            }
            return 106;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x9000000012001L) != 0L || (active2 & 0x100L) != 0L || (active5 & 0x400L) != 0L || (active6 & 0x1L) != 0L)
            return 106;
         return -1;
      case 10:
         if ((active4 & 0x8020000000000L) != 0L)
            return 34;
         if ((active4 & 0xff3fc0000000000L) != 0L)
            return 107;
         if ((active1 & 0x462008000024020L) != 0L || (active2 & 0x40L) != 0L || (active3 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 431;
               jjmatchedPos = 10;
            }
            return 106;
         }
         if ((active1 & 0x80040000040800L) != 0L)
            return 106;
         return -1;
      case 11:
         if ((active3 & 0x8000000L) != 0L || (active4 & 0xaa2a80000000000L) != 0L)
            return 34;
         if ((active1 & 0x440008000004020L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 11;
            return 106;
         }
         if ((active1 & 0x22000000020000L) != 0L || (active2 & 0x40L) != 0L)
            return 106;
         if ((active4 & 0x8020000000000L) != 0L)
         {
            jjmatchedKind = 430;
            jjmatchedPos = 11;
            return 107;
         }
         return -1;
      case 12:
         if ((active4 & 0x8020000000000L) != 0L)
            return 107;
         if ((active4 & 0xaa2a80000000000L) != 0L)
         {
            jjmatchedKind = 430;
            jjmatchedPos = 12;
            return 107;
         }
         if ((active1 & 0x440000000004000L) != 0L)
            return 106;
         if ((active1 & 0x8000000020L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 12;
            return 106;
         }
         return -1;
      case 13:
         if ((active4 & 0xaa2a80000000000L) != 0L)
            return 107;
         if ((active1 & 0x8000000020L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 13;
            return 106;
         }
         return -1;
      case 14:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 14;
            return 106;
         }
         if ((active1 & 0x20L) != 0L)
            return 106;
         return -1;
      case 15:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 15;
            return 106;
         }
         return -1;
      case 16:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 431;
            jjmatchedPos = 16;
            return 106;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 6);
      case 13:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 26:
         return jjStopAtPos(0, 4);
      case 33:
         jjmatchedKind = 185;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 38:
         return jjStopAtPos(0, 191);
      case 40:
         return jjStopAtPos(0, 180);
      case 41:
         return jjStopAtPos(0, 181);
      case 42:
         return jjStopAtPos(0, 192);
      case 43:
         return jjStopAtPos(0, 194);
      case 44:
         return jjStopAtPos(0, 178);
      case 45:
         return jjStartNfaWithStates_0(0, 195, 3);
      case 46:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_0(0x7fffffdfffc000L, 0x4600000L, 0x0L, 0x20L, 0x0L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 193;
         return jjMoveStringLiteralDfa1_0(0x600L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10L, 0x0L, 0x0L, 0x0L);
      case 60:
         return jjStopAtPos(0, 189);
      case 61:
         return jjStopAtPos(0, 184);
      case 62:
         return jjStopAtPos(0, 190);
      case 91:
         return jjStopAtPos(0, 187);
      case 93:
         return jjStopAtPos(0, 188);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe000000020000000L, 0x41eL, 0x22000000008L, 0x0L, 0xf800000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0xc04000001000L, 0xfffffe0004000800L, 0x10000007L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000808020000000L, 0x8000006000L, 0x1808003080L, 0xffffffffe0000000L, 0x1fL, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x30L, 0x0L, 0x0L, 0xe0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x800040L, 0x0L, 0x0L, 0x0L, 0x700L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0xd041010040003800L, 0x10000000001L, 0x100L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x4L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102004800100181L, 0x2780040L, 0xc000L, 0x0L, 0x800L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x181800000080L, 0xc1e0070440L, 0x7fbf8L, 0x7ffffffffff000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000400000000L, 0x430000000L, 0x80000L, 0x0L, 0x380000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x408020000000200L, 0x1000000800000L, 0x10000100000L, 0x0L, 0x1c00000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000000L, 0x4000000L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x80040000000000L, 0x40000100L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000004000L, 0xe00L, 0x200000L, 0x0L, 0x8000000000000000L, 0x1fL);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20500080078000L, 0x240008000000L, 0x610c00200L, 0x780000L, 0x0L, 0x7fffffe0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000102000000L, 0x80000002L, 0x0L, 0x0L, 0x0L, 0x180000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10080000L, 0x1078000L, 0x3000000L, 0x400L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200200000000L, 0x300000000L, 0x0L, 0x0L, 0x0L, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400000000L);
      case 123:
         return jjStopAtPos(0, 182);
      case 125:
         return jjStopAtPos(0, 183);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 33:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 186);
         break;
      case 42:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 58:
         if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(1, 196);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000008000L, active1, 0x7004000640003800L, active2, 0x100800004L, active3, 0x1800001080L, active4, 0L, active5, 0L, active6, 0x80000000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L, active2, 0x4000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200070000L, active1, 0x600000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x20000000L, active2, 0L, active3, 0xc1e0070440L, active4, 0x387fbe0L, active5, 0x3ffffffffff000L, active6, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000800000L, active1, 0x20008038220L, active2, 0x400000f30L, active3, 0x70000300000L, active4, 0x20000018L, active5, 0x8400000000000000L, active6, 0x1fL);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000300000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0x7f80000000000L, active4, 0xc0000000L, active5, 0L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x100000000L, active2, 0x2000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000e0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x8200ad0001000000L, active2, 0x10040078081L, active3, 0x400100L, active4, 0L, active5, 0x60L, active6, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x21801000a0004000L, active1, 0x80000000000000L, active2, 0x4000L, active3, 0x7f8000000000000L, active4, 0x600000000L, active5, 0L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200007000000L, active1, 0x100001L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x102004010080184L, active2, 0x2003780040L, active3, 0x1800000003004000L, active4, 0x4000400L, active5, 0xf00L, active6, 0L);
      case 111:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 129, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0x401004000000000L, active1, 0x409008000000000L, active2, 0x400230001000L, active3, 0xc000800L, active4, 0xfffffff800000000L, active5, 0x584000000000000fL, active6, 0x600000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x60039400000000L, active1, 0x1000040000L, active2, 0x181800000000L, active3, 0x2000L, active4, 0L, active5, 0x10L, active6, 0L);
      case 114:
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 381, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0x1008000000000000L, active1, 0x840000000000000L, active2, 0x20000000000L, active3, 0xc000000000000000L, active4, 0x18000007L, active5, 0L, active6, 0L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x840008000000L, active1, 0x400L, active2, 0x8L, active3, 0x8020L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x500080004000L, active2, 0x200008000000L, active3, 0x610800000L, active4, 0x780000L, active5, 0L, active6, 0xfffff00L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x10002000000018L, active2, 0x1008000000000L, active3, 0L, active4, 0L, active5, 0x380000000000080L, active6, 0x70000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x800040L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000002000000L, active2, 0x844080000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x218180480000L, active1, 0x80100000008000L, active2, 0x6000L, active3, 0L, active4, 0x187c18L, active5, 0x800000000000f000L, active6, 0L);
      case 98:
         if ((active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 412;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x3000000L, active4, 0L, active5, 0x10L, active6, 0x60000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0x3e0L, active5, 0x40000003ff0000L, active6, 0L);
      case 100:
         if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 282, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x80080000000L, active2, 0x30000000L, active3, 0L, active4, 0x3000000L, active5, 0x700L, active6, 0L);
      case 101:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x68c00801000000L, active1, 0x20040000L, active2, 0L, active3, 0x1870700010030100L, active4, 0x10000000L, active5, 0x1ffc000000L, active6, 0xff00L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000020L, active2, 0L, active3, 0x8000004260200000L, active4, 0x100000001L, active5, 0L, active6, 0x1L);
      case 103:
         if ((active5 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 378, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004040020304000L, active1, 0x108004100080000L, active2, 0x200000000L, active3, 0xc200L, active4, 0L, active5, 0xffe000000800L, active6, 0x80ff0000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 106);
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 389, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x1000000000000000L, active2, 0x1000100000001L, active3, 0x1800000080L, active4, 0x678000L, active5, 0x31f000000000000L, active6, 0x20f000000L);
      case 109:
         if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400080040000000L, active1, 0x8010003800L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x8034050000000000L, active2, 0x400780a4L, active3, 0x8000000L, active4, 0xfffffff800000000L, active5, 0x2000000000000fL, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180100002020000L, active1, 0x40000000000000L, active2, 0x1000L, active3, 0x842000L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 229, 106);
         else if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 327, 106);
         else if ((active5 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 379, 106);
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 382, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2100041L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 113:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 285, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0xe00L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 390;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 418, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x10020004000000L, active1, 0x1600600020000L, active2, 0x220008000100L, active3, 0x80000L, active4, 0L, active5, 0L, active6, 0x100000080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x40004686L, active2, 0xc8801000008L, active3, 0x580001040L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 106);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 106);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 380;
            jjmatchedPos = 2;
         }
         else if ((active6 & 0x8L) != 0L)
         {
            jjmatchedKind = 387;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x201000010000000L, active1, 0x2602000001a00118L, active2, 0x900400f80000L, active3, 0x707000000000420L, active4, 0x480000006L, active5, 0L, active6, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1608040000L, active1, 0x4800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 118:
         if ((active5 & 0x20L) != 0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000L, active1, 0L, active2, 0x4000000000L, active3, 0x8000000000L, active4, 0L, active5, 0x40L, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L, active2, 0x1000000000L, active3, 0x10000100000L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x410000000000L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 165, 106);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1f77740004000000L, active4, 0x4830003e0L, active5, 0x300000003ff0040L, active6, 0x60000084L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 56:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 106);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000040010000L, active1, 0x8004010218000800L, active2, 0x24000000010L, active3, 0x8000000000300020L, active4, 0x10000001L, active5, 0x40000000000000L, active6, 0x200000001L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1408000000L, active1, 0L, active2, 0L, active3, 0x842000L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000000000L, active1, 0x20200000a00c0000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 161, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002000000L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0x8000000000000000L, active6, 0L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x600006004100000L, active1, 0x202080000800500L, active2, 0xc10084000048L, active3, 0x480000L, active4, 0L, active5, 0x1000000000000L, active6, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0x580000000L, active4, 0L, active5, 0x700L, active6, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 104:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10L);
      case 105:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x400000021000L, active2, 0x9800000L, active3, 0x8000000000L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 106);
         else if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000200200000L, active1, 0x4000000000008041L, active2, 0x1000000000000L, active3, 0x1270030180L, active4, 0x8000400L, active5, 0x1ffc000010L, active6, 0x8000ff00L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100000000L, active1, 0x40000000000000L, active2, 0x100L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80004000L, active1, 0x8000000000000L, active2, 0x40000000L, active3, 0x8000L, active4, 0L, active5, 0xffe000000000L, active6, 0xff0000L);
      case 111:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000020000000000L, active1, 0x302030L, active2, 0x10000200L, active3, 0x10003000400L, active4, 0x678000L, active5, 0x1e000000000000L, active6, 0x10f000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000004000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 141, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x64010000020000L, active1, 0L, active2, 0x20000400L, active3, 0L, active4, 0x187806L, active5, 0xf000L, active6, 0L);
      case 115:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 107);
         return jjMoveStringLiteralDfa4_0(active0, 0x448000L, active1, 0x1400020500000000L, active2, 0x141000004000L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 47);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1880000L, active1, 0x190300040400282L, active2, 0x88800078001L, active3, 0x4000005240L, active4, 0L, active5, 0x800L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L, active2, 0x200100000800L, active3, 0L, active4, 0L, active5, 0x20000000000000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0xfffffff800000018L, active5, 0xfL, active6, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 106);
         break;
      case 122:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         if ((active6 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 415, 34);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xfffffff800000000L, active5, 0xfL, active6, 0L);
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 50:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 106);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 52:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 106);
         break;
      case 54:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 56:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 106);
         break;
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000110000000000L, active1, 0x1000080020080L, active2, 0x800000000000L, active3, 0x4000000L, active4, 0L, active5, 0x100L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0x10000000000L, active4, 0L, active5, 0x800L, active6, 0L);
      case 99:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400140000010L, active2, 0x200004000080L, active3, 0x1220L, active4, 0x470000L, active5, 0x1e000000000000L, active6, 0xf000000L);
      case 100:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 168, 106);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 174, 106);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 106);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 225, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0x40000000L, active4, 0L, active5, 0xffe000000000L, active6, 0xff0000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(4, 50);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 106);
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000100008000L, active1, 0x40000000001c201L, active2, 0x160000c01L, active3, 0x10030000L, active4, 0x10L, active5, 0x1ffc000000L, active6, 0xff00L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x80000000000000L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L, active6, 0L);
      case 103:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L, active1, 0x4000000000000L, active2, 0x1000000L, active3, 0L, active4, 0x107000L, active5, 0xf000L, active6, 0L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(4, 22);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x20000400000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000010000000L, active1, 0x10108000040040L, active2, 0x100L, active3, 0L, active4, 0x8000780L, active5, 0x3ff0600L, active6, 0L);
      case 106:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 205, 106);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 210, 106);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 215, 106);
         break;
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 284, 106);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 324, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 106);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1400100000L, active1, 0x8008020000001000L, active2, 0x4000000004L, active3, 0x8000000580000000L, active4, 0x1L, active5, 0x60000000000000L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000000L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 230, 106);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 368, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x2020000000L, active1, 0x10800800L, active2, 0x8000010L, active3, 0x200000L, active4, 0x100000000L, active5, 0L, active6, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000000000L, active1, 0x100040000480000L, active2, 0x8400000000L, active3, 0x404000L, active4, 0x3000000L, active5, 0x8300000000000000L, active6, 0x60000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0x10000200L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(4, 85);
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 198, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x2200004000800000L, active1, 0x202000200102122L, active2, 0x1080000000048L, active3, 0x8000100000L, active4, 0x60L, active5, 0L, active6, 0x10L);
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 142, 106);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 107);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 236, 107);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 240, 107);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 244, 107);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 248, 107);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000c010000L, active1, 0L, active2, 0L, active3, 0x8000L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x580080200040000L, active1, 0L, active2, 0x141000000000L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x40200008000000L, active2, 0L, active3, 0x1e66600000000000L, active4, 0x480000006L, active5, 0x40L, active6, 0x84L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0x1000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 119:
         if ((active6 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 416, 106);
         break;
      case 120:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 169, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6);
      return 5;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0x511010L, active5, 0x1effe00000f000L, active6, 0xfff0000L);
      case 50:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 106);
         break;
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 52:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 146, 106);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 261, 107);
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0x3ff0000L, active6, 0L);
      case 54:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 144, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 56:
         if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 262, 107);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 264, 107);
         break;
      case 97:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 222, 106);
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x200200550042002L, active2, 0L, active3, 0x80000L, active4, 0x44000L, active5, 0L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x400L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 106);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4040L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 106);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 106);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 106);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 106);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 106);
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 226, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x880800L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 151, 106);
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20040000000L, active1, 0x4000000000020L, active2, 0x1000000000004L, active3, 0x400L, active4, 0x4L, active5, 0L, active6, 0L);
      case 102:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 103:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 106);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 104:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L, active2, 0x80L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2060001400000000L, active1, 0x8000000000000L, active2, 0x40L, active3, 0x1000000000L, active4, 0xf100000000L, active5, 0L, active6, 0x200000000L);
      case 106:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 232, 106);
         break;
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0x20L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 373, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x100002020000L, active1, 0x8000008088020000L, active2, 0L, active3, 0x1000L, active4, 0L, active5, 0x40000000000a00L, active6, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 106);
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20008000L, active1, 0x10000000000001L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0x1ffc000000L, active6, 0xff00L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 106);
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 287, 107);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 290, 107);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 326, 107);
         else if ((active6 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 386, 107);
         else if ((active6 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 391, 107);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x142000000010080L, active2, 0x1000000L, active3, 0x1444400004000000L, active4, 0L, active5, 0x8000000000000400L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x5040000L, active1, 0x80020000000000L, active2, 0L, active3, 0L, active4, 0xfffff0000000000L, active5, 0L, active6, 0x10L);
      case 113:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 106);
         break;
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(5, 48);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(5, 86);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 106);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 164, 106);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 106);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 212, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x421000000000000L, active2, 0x840080000000L, active3, 0x8000000L, active4, 0x7000000000000000L, active5, 0L, active6, 0L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0x4000000800L, active3, 0x8000000000000000L, active4, 0x8000001L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 106);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 106);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 106);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 106);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 106);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 106);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 173, 106);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 207, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000000000L, active1, 0L, active2, 0x100000100L, active3, 0x8000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 117:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0x10fL, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000L, active5, 0x300000000000000L, active6, 0x60000000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 121:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000L, active1, 0x80000000000L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0L, active6, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1444400000000000L, active4, 0x1000000000044204L, active5, 0x1fffff0000L, active6, 0xff00L);
      case 48:
         if ((active5 & 0x1000L) != 0L)
            return jjStopAtPos(6, 332);
         else if ((active5 & 0x2000000000000L) != 0L)
            return jjStopAtPos(6, 369);
         else if ((active6 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 408);
         break;
      case 49:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 292, 107);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 320, 107);
         else if ((active5 & 0x2000L) != 0L)
            return jjStopAtPos(6, 333);
         else if ((active5 & 0x4000000000000L) != 0L)
            return jjStopAtPos(6, 370);
         else if ((active6 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 409);
         break;
      case 50:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 106);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 107);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 321, 107);
         else if ((active5 & 0x4000L) != 0L)
            return jjStopAtPos(6, 334);
         else if ((active5 & 0x8000000000000L) != 0L)
            return jjStopAtPos(6, 371);
         else if ((active6 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 410);
         break;
      case 51:
         if ((active5 & 0x8000L) != 0L)
            return jjStopAtPos(6, 335);
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 372);
         else if ((active6 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 411);
         break;
      case 52:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 106);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 294, 107);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 317, 107);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 322, 107);
         break;
      case 56:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 107);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 318, 107);
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 323, 107);
         break;
      case 97:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 209, 106);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 224, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x200080020000L, active1, 0x2000000000910L, active2, 0L, active3, 0xa001000L, active4, 0L, active5, 0x400L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40008000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000000L, active1, 0x82L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 106);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 106);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 106);
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000020000000L, active1, 0x48000000001L, active2, 0x81000080L, active3, 0L, active4, 0x1L, active5, 0L, active6, 0L);
      case 102:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 176, 106);
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 376;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 413;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0x8000000000L, active4, 0x2000000L, active5, 0x200000000000000L, active6, 0x40000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 6;
         }
         else if ((active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 400;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x400000000024040L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0x3c000000000L, active6, 0x1e0000L);
      case 106:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 106);
         break;
      case 107:
         if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 331, 106);
         break;
      case 108:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 106);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 106);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 106);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 121, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000140040400L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000100L, active6, 0x200000000L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 202, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0x80000L, active4, 0x400L, active5, 0L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0x100L, active3, 0L, active4, 0L, active5, 0x40000000000000L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x20200000000L, active1, 0x80000000000000L, active2, 0x800000000000L, active3, 0x1000000020L, active4, 0L, active5, 0x1c0000000000L, active6, 0xe00000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(6, 44);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 106);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 107);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 268, 107);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 272, 107);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 276, 107);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 278, 107);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000008000000L, active1, 0x80000002000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 106);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 106);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 106);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 283, 106);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x10000L, active2, 0x4000000040L, active3, 0L, active4, 0x100000000L, active5, 0x200L, active6, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x14000000L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0xe00000000000L, active6, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0xfffff0000000000L, active5, 0L, active6, 0L);
      case 119:
         if ((active6 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 388, 106);
         break;
      case 121:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 127, 106);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 218, 107);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000001L, active5, 0x200000000000000L, active6, 0x40000000L);
      case 48:
         if ((active5 & 0x10000L) != 0L)
            return jjStopAtPos(7, 336);
         break;
      case 49:
         if ((active5 & 0x20000L) != 0L)
            return jjStopAtPos(7, 337);
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 358, 107);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 365, 107);
         else if ((active6 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 401, 107);
         break;
      case 50:
         if ((active5 & 0x40000L) != 0L)
            return jjStopAtPos(7, 338);
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 359, 107);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 366, 107);
         else if ((active6 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 402, 107);
         break;
      case 51:
         if ((active5 & 0x80000L) != 0L)
            return jjStopAtPos(7, 339);
         break;
      case 52:
         if ((active5 & 0x100000L) != 0L)
            return jjStopAtPos(7, 340);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 360, 107);
         else if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 362, 107);
         else if ((active5 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 367, 107);
         else if ((active6 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 403, 107);
         else if ((active6 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 405, 107);
         break;
      case 53:
         if ((active5 & 0x200000L) != 0L)
            return jjStopAtPos(7, 341);
         break;
      case 54:
         if ((active5 & 0x400000L) != 0L)
            return jjStopAtPos(7, 342);
         break;
      case 55:
         if ((active5 & 0x800000L) != 0L)
            return jjStopAtPos(7, 343);
         break;
      case 56:
         if ((active5 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 344);
         else if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 361, 107);
         else if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 363, 107);
         else if ((active6 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 404, 107);
         else if ((active6 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 406, 107);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000140000000L, active1, 0x440000000004000L, active2, 0x800000000000L, active3, 0x200000L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         if ((active5 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 374, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x100L, active2, 0xc0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 152, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 106);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 288, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0x20L, active4, 0x400L, active5, 0x100000000200L, active6, 0x200800000L);
      case 102:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 159, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xfffff0000000000L, active5, 0L, active6, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x80020000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 7;
         }
         else if ((active6 & 0x100L) != 0L)
         {
            jjmatchedKind = 392;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80c0000010020L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0x78000000L, active6, 0x1e00L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 106);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L, active6, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x20000000040001L, active2, 0x40000000100L, active3, 0x2000000L, active4, 0L, active5, 0L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 106);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x1008000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x380000000L, active6, 0xe000L);
      case 115:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 238, 107);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 242, 107);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 246, 107);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 250, 107);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 252, 107);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 258, 107);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 265, 107);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 270, 107);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 274, 107);
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000000L, active1, 0x2800L, active2, 0x400L, active3, 0x1000L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 106);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 106);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 171, 106);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 228, 106);
         else if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 328, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0xa0008000000L, active1, 0L, active2, 0L, active3, 0x8000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000000L, active5, 0x1c00000000L, active6, 0L);
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 106);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 106);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 211, 106);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x8000000000000000L, active6, 0x1L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6);
      return 8;
   }
   switch(curChar)
   {
      case 46:
         if ((active5 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 383, 34);
         else if ((active6 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 417, 34);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xfffff0000000000L, active5, 0L, active6, 0L);
      case 49:
         if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 345, 107);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 347, 107);
         else if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 354, 107);
         else if ((active6 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 393, 107);
         break;
      case 50:
         if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 348, 107);
         else if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 355, 107);
         else if ((active6 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 394, 107);
         break;
      case 52:
         if ((active5 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 349, 107);
         else if ((active5 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 351, 107);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 356, 107);
         else if ((active6 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 395, 107);
         else if ((active6 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 397, 107);
         break;
      case 56:
         if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 350, 107);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 352, 107);
         else if ((active6 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 396, 107);
         else if ((active6 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 398, 107);
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000070000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x104000000L, active1, 0x2008000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 100:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 92, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 38);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 106);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 138, 106);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 160, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0x1408000000L, active1, 0x1000000002020L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000000L, active6, 0x8000L);
      case 102:
         if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 364, 107);
         else if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 407, 107);
         break;
      case 103:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 106);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 106);
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000000800000L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 106);
         break;
      case 108:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 213, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000004000L, active2, 0x100L, active3, 0L, active4, 0L, active5, 0x400L, active6, 0L);
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(8, 51);
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 231, 106);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 316, 107);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x48000000000000L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1L);
      case 114:
         if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 329, 106);
         break;
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 204, 106);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 256, 107);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x800L, active2, 0L, active3, 0x20L, active4, 0L, active5, 0L, active6, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 106);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0x200000000000000L, active6, 0x40000000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(8, 41);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 175, 106);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 217, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6);
      return 9;
   }
   switch(curChar)
   {
      case 46:
         if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 266, 34);
         break;
      case 97:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 106);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x42000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(9, 32);
         else if ((active6 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 384, 106);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L, active2, 0x40L, active3, 0x8000020L, active4, 0L, active5, 0L, active6, 0L);
      case 102:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 112, 106);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 353, 107);
         else if ((active6 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 399, 107);
         break;
      case 103:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 115, 106);
         break;
      case 105:
         if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0x3fe0000000000L, active5, 0L, active6, 0L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 106);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(9, 27);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 77, 106);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 110:
         if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 281, 107);
         else if ((active5 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 377, 107);
         else if ((active6 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 414, 107);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000000000000L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80040000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 64, 106);
         break;
      case 117:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xff8000000000000L, active5, 0L, active6, 0L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 136, 106);
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 330, 106);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8020000000000L);
      case 49:
         if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20080000000000L);
      case 50:
         if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80200000000000L);
      case 52:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200800000000000L);
      case 56:
         if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x802000000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 82, 106);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 119, 106);
         break;
      case 108:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 106, 106);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000020000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 75, 106);
         break;
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(10, 23);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, 0L, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 46:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 219, 34);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xaa2a80000000000L);
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 117, 106);
         break;
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 106);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x440000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 107:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 134, 106);
         break;
      case 108:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 113, 106);
         break;
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8020000000000L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 118, 106);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 122, 106);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 78, 106);
         else if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(12, 197);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0L, active3, 0L, active4, 0L);
      case 110:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 297, 107);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 307, 107);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0xaa2a80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, 0L, active4, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20L, active4, 0L);
      case 110:
         if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 299, 107);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 301, 107);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 303, 107);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 305, 107);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 309, 107);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 311, 107);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 313, 107);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 315, 107);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000000000L, active4, 0L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(13, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, 0L, active4, 0L, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, 0L, old4, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, 0L, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8000000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(14, 36);
         break;
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(14, 69, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L, 0L, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L, 0L, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 103, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L, 0L, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 105;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 107:
                  if ((0x83ff001000000000L & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAddTwoStates(33, 35);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  break;
               case 106:
                  if ((0x83ff001000000000L & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x83ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  break;
               case 8:
                  if ((0x83ff001000000000L & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x83ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 425)
                        kind = 425;
                     jjCheckNAdd(9);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 419)
                        kind = 419;
                  }
                  break;
               case 57:
                  if ((0x83ff001000000000L & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAddTwoStates(33, 35);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAdd(33);
                  }
                  break;
               case 34:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  else if ((0x8000001000000000L & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAddTwoStates(33, 35);
                  }
                  break;
               case 105:
                  if ((0x83ff001000000000L & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x83ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 419)
                        kind = 419;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 422)
                        kind = 422;
                     jjCheckNAddStates(6, 9);
                  }
                  else if ((0x8000001000000000L & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAddStates(10, 12);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(13, 18);
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 45)
                     jjCheckNAdd(3);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L && kind > 421)
                     kind = 421;
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 422)
                     kind = 422;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 425)
                     kind = 425;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 11:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 13:
                  if ((0xff00ffffffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 14:
                  if (curChar != 34)
                     break;
                  if (kind > 426)
                     kind = 426;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if ((0xff00ffffffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L && kind > 419)
                     kind = 419;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if (curChar == 46)
                     jjAddStates(0, 2);
                  break;
               case 35:
                  if ((0x83ff001000000000L & l) == 0L)
                     break;
                  if (kind > 430)
                     kind = 430;
                  jjCheckNAddTwoStates(33, 35);
                  break;
               case 36:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 37:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 39:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 40:
                  if (curChar != 39)
                     break;
                  if (kind > 430)
                     kind = 430;
                  jjCheckNAddStates(33, 35);
                  break;
               case 41:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 39)
                     jjCheckNAddStates(36, 38);
                  break;
               case 45:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 47:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 50:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 53:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 54:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 422)
                     kind = 422;
                  jjCheckNAddStates(6, 9);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L && kind > 420)
                     kind = 420;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 424)
                     kind = 424;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 18);
                  break;
               case 64:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 66:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 67:
                  if (curChar != 39)
                     break;
                  if (kind > 427)
                     kind = 427;
                  jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 70:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar == 39)
                     jjCheckNAddStates(50, 52);
                  break;
               case 72:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 74:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 75:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 76:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 77:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 79:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(57, 60);
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 81:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 83:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 85:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 86:
                  if (curChar == 39)
                     jjCheckNAddStates(64, 66);
                  break;
               case 87:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 89:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar == 39)
                     jjCheckNAddStates(67, 69);
                  break;
               case 91:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 93:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 94:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(70, 73);
                  break;
               case 95:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 96:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 98:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 77);
                  break;
               case 99:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 100:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 102:
                  if ((0x8000001000000000L & l) == 0L)
                     break;
                  if (kind > 431)
                     kind = 431;
                  jjCheckNAddStates(10, 12);
                  break;
               case 103:
                  if ((0x83ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  break;
               case 104:
                  if ((0x83ff001000000000L & l) == 0L)
                     break;
                  if (kind > 431)
                     kind = 431;
                  jjCheckNAdd(104);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 107:
               case 35:
                  if ((0x7ffffff87ffffffL & l) == 0L)
                     break;
                  if (kind > 430)
                     kind = 430;
                  jjCheckNAddTwoStates(33, 35);
                  break;
               case 106:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  if ((0x7ffffff87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  break;
               case 8:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  if ((0x7ffffff87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(33);
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 419)
                        kind = 419;
                  }
                  break;
               case 57:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAddTwoStates(33, 35);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAdd(33);
                  }
                  break;
               case 34:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 430)
                        kind = 430;
                     jjCheckNAddTwoStates(33, 35);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 105:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAdd(104);
                  }
                  if ((0x7ffffff87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(33);
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 421)
                        kind = 421;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 419)
                        kind = 419;
                  }
                  break;
               case 0:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                  {
                     if (kind > 431)
                        kind = 431;
                     jjCheckNAddStates(10, 12);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(78, 79);
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L && kind > 421)
                     kind = 421;
                  break;
               case 4:
                  if (curChar == 120)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 423)
                     kind = 423;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(82, 84);
                  break;
               case 13:
                  jjCheckNAddStates(19, 21);
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(85, 87);
                  break;
               case 21:
                  jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L && kind > 419)
                     kind = 419;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(88, 90);
                  break;
               case 39:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 45:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 46:
                  if (curChar == 92)
                     jjAddStates(91, 93);
                  break;
               case 47:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 64:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 65:
                  if (curChar == 92)
                     jjAddStates(94, 96);
                  break;
               case 66:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 72:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 73:
                  if (curChar == 92)
                     jjAddStates(97, 99);
                  break;
               case 74:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 83:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 84:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 85:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 91:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 92:
                  if (curChar == 92)
                     jjAddStates(103, 105);
                  break;
               case 93:
                  if ((0x10400010000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 102:
                  if ((0x7ffffff87ffffffL & l) == 0L)
                     break;
                  if (kind > 431)
                     kind = 431;
                  jjCheckNAddStates(10, 12);
                  break;
               case 103:
                  if ((0x7ffffff87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(103, 33);
                  break;
               case 104:
                  if ((0x7ffffff87ffffffL & l) == 0L)
                     break;
                  if (kind > 431)
                     kind = 431;
                  jjCheckNAdd(104);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 19:
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 83:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 105 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(4, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xfffffffffbffdbffL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddStates(106, 108);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xfffffffffbffdbffL & l) == 0L)
                     break;
                  kind = 11;
                  jjCheckNAddStates(106, 108);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 11;
                  jjCheckNAddStates(106, 108);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddStates(106, 108);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   34, 36, 56, 37, 38, 40, 59, 3, 60, 61, 103, 33, 104, 64, 65, 67, 
   83, 84, 86, 11, 12, 14, 19, 20, 14, 19, 20, 23, 14, 11, 12, 27, 
   14, 33, 41, 42, 45, 46, 40, 45, 46, 49, 40, 37, 38, 53, 40, 64, 
   65, 67, 72, 73, 67, 72, 73, 76, 67, 64, 65, 80, 67, 83, 84, 86, 
   87, 88, 33, 91, 92, 86, 91, 92, 95, 86, 83, 84, 99, 86, 31, 32, 
   8, 9, 13, 26, 28, 21, 22, 24, 39, 52, 54, 47, 48, 50, 66, 79, 
   81, 74, 75, 77, 85, 98, 100, 93, 94, 96, 0, 1, 3, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\56\154\151\156\145", "\56\141\163\163\145\155\142\154\171", 
"\56\143\154\141\163\163", "\56\143\157\162\146\154\141\147\163", "\56\143\165\163\164\157\155", 
"\56\144\141\164\141", "\56\146\151\145\154\144", "\56\146\151\154\145", "\56\150\141\163\150", 
"\56\145\156\164\162\171\160\157\151\156\164", "\56\155\145\164\150\157\144", "\56\155\157\144\165\154\145", 
"\56\155\162\145\163\157\165\162\143\145", "\56\163\165\142\163\171\163\164\145\155", "\56\166\164\146\151\170\165\160", 
"\141\154\151\147\156\155\145\156\164", "\56\151\155\141\147\145\142\141\163\145", 
"\56\154\141\156\147\165\141\147\145", "\56\156\141\155\145\163\160\141\143\145", "\56\143\165\154\164\165\162\145", 
"\56\160\165\142\154\151\143\153\145\171", "\56\166\145\162", 
"\56\160\165\142\154\151\143\153\145\171\164\157\153\145\156", "\56\145\166\145\156\164", "\56\157\166\145\162\162\151\144\145", 
"\56\160\141\143\153", "\56\160\141\162\141\155", "\56\160\162\157\160\145\162\164\171", 
"\56\163\151\172\145", "\56\145\155\151\164\142\171\164\145", "\56\154\157\143\141\154\163", 
"\56\155\141\170\163\164\141\143\153", "\56\147\145\164", "\56\163\145\164", "\56\157\164\150\145\162", 
"\56\141\144\144\157\156", "\56\146\151\162\145", "\56\162\145\155\157\166\145\157\156", 
"\56\164\162\171", "\56\160\145\162\155\151\163\163\151\157\156\163\145\164", 
"\56\160\145\162\155\151\163\163\151\157\156", "\146\154\157\141\164\63\62", "\146\154\157\141\164\66\64", 
"\145\170\164\145\162\156", "\156\157\155\145\164\141\144\141\164\141", "\160\165\142\154\151\143", 
"\160\162\151\166\141\164\145", "\141\154\147\157\162\151\164\150\155", "\141\164", "\141\163", 
"\151\155\160\154\145\155\145\156\164\163", "\141\142\163\164\162\141\143\164", "\141\156\163\151", "\141\165\164\157", 
"\141\165\164\157\143\150\141\162", "\142\145\146\157\162\145\146\151\145\154\144\151\156\151\164", 
"\145\170\160\154\151\143\151\164", "\151\156\163\164\141\156\143\145", "\151\156\164\145\162\146\141\143\145", 
"\156\145\163\164\145\144", "\141\163\163\145\155\142\154\171", 
"\146\141\155\141\156\144\141\163\163\145\155", "\146\141\155\151\154\171", "\146\141\155\157\162\141\163\163\145\155", 
"\162\164\163\160\145\143\151\141\154\156\141\155\145", "\163\145\141\154\145\144", "\163\145\161\165\145\156\164\151\141\154", 
"\163\145\162\151\141\154\151\172\141\142\154\145", "\163\160\145\143\151\141\154\156\141\155\145", 
"\165\156\151\143\157\144\145", "\151\155\160\157\162\164", "\56\143\164\157\162", "\56\143\143\164\157\162", 
"\145\170\164\145\156\144\163", "\167\151\164\150", "\164\171\160\145", "\56\56\56", 
"\144\145\146\141\165\154\164", "\165\156\155\141\156\141\147\145\144", "\143\144\145\143\154", 
"\146\141\163\164\143\141\154\154", "\163\164\144\143\141\154\154", "\164\150\151\163\143\141\154\154", 
"\166\141\162\141\162\147", "\155\141\162\163\150\141\154", "\151\156", "\157\160\164", "\157\165\164", 
"\151\156\151\164", "\143\157\155\160\151\154\145\162\143\157\156\164\162\157\154\154\145\144", 
"\146\151\156\141\154", "\156\145\167\163\154\157\164", 
"\160\151\156\166\157\153\145\151\155\160\154", "\150\151\144\145\142\171\163\151\147", "\163\164\141\164\151\143", 
"\166\151\162\164\165\141\154", "\163\164\162\151\143\164", "\143\151\154", 
"\146\157\162\167\141\162\144\162\145\146", "\151\156\164\145\162\156\141\154\143\141\154\154", 
"\155\141\156\141\147\145\144", "\156\157\151\156\154\151\156\151\156\147", "\162\165\156\164\151\155\145", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\146\162\157\155\165\156\155\141\156\141\147\145\144", 
"\160\154\141\164\146\157\162\155\141\160\151", "\151\156\151\164\157\156\154\171", "\154\151\164\145\162\141\154", 
"\156\157\164\163\145\162\151\141\154\151\172\145\144", "\164\162\165\145", "\146\141\154\163\145", "\143\141\164\143\150", 
"\146\141\165\154\164", "\146\151\156\141\154\154\171", "\146\151\154\164\145\162", "\164\157", 
"\150\141\156\144\154\145\162", "\141\163\163\145\162\164", "\144\145\155\141\156\144", "\144\145\156\171", 
"\151\156\150\145\162\151\164\143\150\145\143\153", "\154\151\156\153\143\150\145\143\153", 
"\160\145\162\155\151\164\157\156\154\171", "\162\145\161\157\160\164", "\162\145\161\162\145\146\165\163\145", 
"\162\145\161\165\145\163\164", "\142\157\157\154", "\143\150\141\162", "\143\154\141\163\163", 
"\165\151\156\164\70", "\165\151\156\164\61\66", "\165\151\156\164\63\62", "\165\151\156\164\66\64", 
"\151\156\164\70", "\151\156\164\61\66", "\151\156\164\63\62", "\151\156\164\66\64", 
"\156\141\164\151\166\145", "\165\156\163\151\147\156\145\144", "\151\156\164", 
"\157\142\152\145\143\164", "\163\164\162\151\156\147", "\155\157\144\157\160\164", 
"\155\157\144\162\145\161", "\160\151\156\156\145\144", "\164\171\160\145\144\162\145\146", 
"\166\141\154\165\145\164\171\160\145", "\166\157\151\144", "\155\145\164\150\157\144", "\154\160\163\164\162", 
"\154\160\167\163\164\162", "\141\156\171", "\142\171\166\141\154\163\164\162", 
"\143\165\163\164\157\155", "\146\151\170\145\144", "\141\162\162\141\171", 
"\163\171\163\163\164\162\151\156\147", "\154\160\163\164\162\165\143\164", "\154\160\164\163\164\162", 
"\163\164\162\165\143\164", "\142\157\170\145\144", "\142\171\164\145\141\162\162\141\171", 
"\156\165\154\154\162\145\146", "\56", "\54", "\72", "\50", "\51", "\173", "\175", "\75", "\41", "\41\41", 
"\133", "\135", "\74", "\76", "\46", "\52", "\57", "\53", "\55", "\72\72", 
"\56\163\164\141\143\153\162\145\163\145\162\166\145", "\154\144\163\164\162", "\143\141\154\154\151", "\146\151\145\154\144", 
"\163\167\151\164\143\150", "\154\144\164\157\153\145\156", "\142\157\170", 
"\143\141\163\164\143\154\141\163\163", "\143\160\157\142\152", "\151\156\151\164\157\142\152", 
"\151\163\151\156\163\164", "\154\144\145\154\145\155", "\154\144\145\154\145\155\141", 
"\154\144\157\142\152", "\155\153\162\145\146\141\156\171", "\156\145\167\141\162\162", 
"\162\145\146\141\156\171\166\141\154", "\163\151\172\145\157\146", "\163\164\157\142\152", "\165\156\142\157\170", 
"\165\156\142\157\170\56\141\156\171", "\142\157\170\56\141\156\171", 
"\143\157\156\163\164\162\141\151\156\145\144\56", "\163\164\145\154\145\155", "\154\144\146\154\144", 
"\154\144\146\154\144\141", "\154\144\163\146\154\144", "\154\144\163\146\154\144\141", 
"\163\164\146\154\144", "\163\164\163\146\154\144", "\143\141\154\154", 
"\143\141\154\154\166\151\162\164", "\152\155\160", "\154\144\146\164\156", 
"\154\144\166\151\162\164\146\164\156", "\156\145\167\157\142\152", "\142\145\161", "\142\145\161\56\163", 
"\142\147\145", "\142\147\145\56\163", "\142\147\145\56\165\156", 
"\142\147\145\56\165\156\56\163", "\142\147\164", "\142\147\164\56\163", "\142\147\164\56\165\156", 
"\142\147\164\56\165\156\56\163", "\142\154\145", "\142\154\145\56\163", "\142\154\145\56\165\156", 
"\142\154\145\56\165\156\56\163", "\142\154\164", "\142\154\164\56\163", "\142\154\164\56\165\156", 
"\142\154\164\56\165\156\56\163", "\142\156\145\56\165\156", "\142\156\145\56\165\156\56\163", "\142\162", 
"\142\162\56\163", "\142\162\146\141\154\163\145", "\142\162\146\141\154\163\145\56\163", 
"\142\162\164\162\165\145", "\142\162\164\162\165\145\56\163", "\154\145\141\166\145", 
"\154\145\141\166\145\56\163", "\154\144\143\56\162\64", "\154\144\143\56\162\70", "\154\144\143\56\151\64", 
"\154\144\143\56\151\70", "\154\144\143\56\151\64\56\163", "\165\156\141\154\151\147\156\145\144\56", 
"\154\144\141\162\147", "\154\144\141\162\147\56\163", "\154\144\141\162\147\141", 
"\154\144\141\162\147\141\56\163", "\154\144\154\157\143", "\154\144\154\157\143\56\163", 
"\154\144\154\157\143\141", "\154\144\154\157\143\141\56\163", "\163\164\141\162\147", 
"\163\164\141\162\147\56\163", "\163\164\154\157\143", "\163\164\154\157\143\56\163", "\141\144\144", 
"\141\144\144\56\157\166\146", "\141\144\144\56\157\166\146\56\165\156", "\141\156\144", 
"\141\162\147\154\151\163\164", "\142\162\145\141\153", "\143\145\161", "\143\147\164", 
"\143\147\164\56\165\156", "\143\153\146\151\156\151\164\145", "\143\154\164", "\143\154\164\56\165\156", 
"\143\157\156\166\56\151", "\143\157\156\166\56\151\61", "\143\157\156\166\56\151\62", 
"\143\157\156\166\56\151\64", "\143\157\156\166\56\151\70", "\143\157\156\166\56\157\166\146\56\151", 
"\143\157\156\166\56\157\166\146\56\151\56\165\156", "\143\157\156\166\56\157\166\146\56\151\61", 
"\143\157\156\166\56\157\166\146\56\151\61\56\165\156", "\143\157\156\166\56\157\166\146\56\151\62", 
"\143\157\156\166\56\157\166\146\56\151\62\56\165\156", "\143\157\156\166\56\157\166\146\56\151\64", 
"\143\157\156\166\56\157\166\146\56\151\64\56\165\156", "\143\157\156\166\56\157\166\146\56\151\70", 
"\143\157\156\166\56\157\166\146\56\151\70\56\165\156", "\143\157\156\166\56\157\166\146\56\165", 
"\143\157\156\166\56\157\166\146\56\165\56\165\156", "\143\157\156\166\56\157\166\146\56\165\61", 
"\143\157\156\166\56\157\166\146\56\165\61\56\165\156", "\143\157\156\166\56\157\166\146\56\165\62", 
"\143\157\156\166\56\157\166\146\56\165\62\56\165\156", "\143\157\156\166\56\157\166\146\56\165\64", 
"\143\157\156\166\56\157\166\146\56\165\64\56\165\156", "\143\157\156\166\56\157\166\146\56\165\70", 
"\143\157\156\166\56\157\166\146\56\165\70\56\165\156", "\143\157\156\166\56\162\56\165\156", "\143\157\156\166\56\162\64", 
"\143\157\156\166\56\162\70", "\143\157\156\166\56\165", "\143\157\156\166\56\165\61", 
"\143\157\156\166\56\165\62", "\143\157\156\166\56\165\64", "\143\157\156\166\56\165\70", 
"\143\160\142\154\153", "\144\151\166", "\144\151\166\56\165\156", "\144\165\160", 
"\145\156\144\146\141\165\154\164", "\145\156\144\146\151\154\164\145\162", 
"\145\156\144\146\151\156\141\154\154\171", "\151\156\151\164\142\154\153", "\154\144\141\162\147\56\60", 
"\154\144\141\162\147\56\61", "\154\144\141\162\147\56\62", "\154\144\141\162\147\56\63", 
"\154\144\143\56\151\64\56\60", "\154\144\143\56\151\64\56\61", "\154\144\143\56\151\64\56\62", 
"\154\144\143\56\151\64\56\63", "\154\144\143\56\151\64\56\64", "\154\144\143\56\151\64\56\65", 
"\154\144\143\56\151\64\56\66", "\154\144\143\56\151\64\56\67", "\154\144\143\56\151\64\56\70", 
"\154\144\143\56\151\64\56\155\61", "\154\144\145\154\145\155\56\151", "\154\144\145\154\145\155\56\151\61", 
"\154\144\145\154\145\155\56\151\62", "\154\144\145\154\145\155\56\151\64", "\154\144\145\154\145\155\56\151\70", 
"\154\144\145\154\145\155\56\162\64", "\154\144\145\154\145\155\56\162\70", 
"\154\144\145\154\145\155\56\162\145\146", "\154\144\145\154\145\155\56\165\61", "\154\144\145\154\145\155\56\165\62", 
"\154\144\145\154\145\155\56\165\64", "\154\144\151\156\144\56\151", "\154\144\151\156\144\56\151\61", 
"\154\144\151\156\144\56\151\62", "\154\144\151\156\144\56\151\64", "\154\144\151\156\144\56\151\70", 
"\154\144\151\156\144\56\162\64", "\154\144\151\156\144\56\162\70", "\154\144\151\156\144\56\162\145\146", 
"\154\144\151\156\144\56\165\61", "\154\144\151\156\144\56\165\62", "\154\144\151\156\144\56\165\64", 
"\154\144\154\145\156", "\154\144\154\157\143\56\60", "\154\144\154\157\143\56\61", 
"\154\144\154\157\143\56\62", "\154\144\154\157\143\56\63", "\154\144\156\165\154\154", 
"\154\157\143\141\154\154\157\143", "\155\165\154", "\155\165\154\56\157\166\146", 
"\155\165\154\56\157\166\146\56\165\156", "\156\145\147", "\156\157\160", "\156\157\164", "\157\162", "\160\157\160", 
"\162\145\141\144\157\156\154\171\56", "\162\145\146\141\156\171\164\171\160\145", "\162\145\155", 
"\162\145\155\56\165\156", "\162\145\164", "\162\145\164\150\162\157\167", "\163\150\154", 
"\163\150\162", "\163\150\162\56\165\156", "\163\164\145\154\145\155\56\151", 
"\163\164\145\154\145\155\56\151\61", "\163\164\145\154\145\155\56\151\62", "\163\164\145\154\145\155\56\151\64", 
"\163\164\145\154\145\155\56\151\70", "\163\164\145\154\145\155\56\162\64", "\163\164\145\154\145\155\56\162\70", 
"\163\164\145\154\145\155\56\162\145\146", "\163\164\151\156\144\56\151", "\163\164\151\156\144\56\151\61", 
"\163\164\151\156\144\56\151\62", "\163\164\151\156\144\56\151\64", "\163\164\151\156\144\56\151\70", 
"\163\164\151\156\144\56\162\64", "\163\164\151\156\144\56\162\70", "\163\164\151\156\144\56\162\145\146", 
"\163\164\154\157\143\56\60", "\163\164\154\157\143\56\61", "\163\164\154\157\143\56\62", 
"\163\164\154\157\143\56\63", "\163\165\142", "\163\165\142\56\157\166\146", 
"\163\165\142\56\157\166\146\56\165\156", "\164\141\151\154\56", "\164\150\162\157\167", 
"\166\157\154\141\164\151\154\145\56", "\170\157\162", null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_ONLY_EOF", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, -1, -1, -1, 2, 3, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffc001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xcfffffffffffL, 
};
static final long[] jjtoSkip = {
   0x19deL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x19c0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x2620L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[105];
private final int[] jjstateSet = new int[210];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public MSILParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public MSILParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 105; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 5)
         {
            jjmatchedKind = 5;
         }
         break;
       case 2:
         jjmatchedKind = 11;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 13))
         {
            jjmatchedKind = 13;
            jjmatchedPos = 0;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              System.out.println("Warning: cntl-z found at end of file");
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 5 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
               System.out.println("Error: no characters should follow cntl-z at end of file");
         break;
      default : 
         break;
   }
}
}
