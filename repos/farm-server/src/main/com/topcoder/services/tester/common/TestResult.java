/*
 * Copyright (C) 2006 - 2014 TopCoder Inc., All Rights Reserved.
 */

package com.topcoder.services.tester.common;

/**
 * TestResult return by a BaseTester. It contains all information related to
 * the test execution.
 *
 * <p>
 * Changes in version 1.1 (PoC Assembly - Return Peak Memory Usage for Executing SRM Solution):
 * <ol>
 *      <li>Add {@link #maxMemoryUsed} field and getter/setter.</li>
 *      <li>Update {@link #toString()} method.</li>
 * </ol>
 * </p>
 *
 * @version 1.1
 * @author Diego Belfer (mural), dexy
 */
public class TestResult {
    /**
     * OK, Test was executed successfully and the return value was obtained
     */
    public static final int STATUS_OK = 0;
    /**
     * Test was executed but execution time exceeded the maximum time allowed
     */
    public static final int STATUS_TIMEOUT = 1;
    /**
     * Args specified are not valid
     */
    public static final int STATUS_INVALID_ARGS = 2;
    /**
     * Test was executed and it failed. Any kind of problem could happen.
     * Indicates that the problem is related to the submission
     */
    public static final int STATUS_FAIL = -1;
    /**
     * Test could not be executed. Any kind of problem could happen.
     * Indicates that the problem is to the tester
     */
    public static final int STATUS_TESTER_FAILURE = -99;

    /**
     * Indicates the status of the TestResult
     */
    private int status;
    /**
     * A message containing additional information about the non OK status
     */
    private String message;

    /**
     * The value return by the submission
     */
    private Object returnValue;
    /**
     * The stdout generated by the submission
     */
    private String stdOut;
    /**
     * The stderr generated by the submission
     */
    private String stdErr;
    /**
     * The time in ms for the submission
     */
    private long executionTime;
    /**
     * The maximum memory used in KB.
     * @since 1.1
     */
    private long maxMemoryUsed = -1;
    /**
     * The stackTrace information string
     */
    private String stackTrace;


    /**
     * Contains arguments already validated. <p>
     * This field is never serialized.
     */
    private transient Object[] validatedArgs;

    public boolean isSuccess() {
        return status == STATUS_OK;
    }

    public boolean isTimeout() {
        return status == STATUS_TIMEOUT;
    }

    public boolean isSystemFailure() {
        return status == STATUS_TESTER_FAILURE;
    }

    public boolean isFailure() {
        return status == STATUS_FAIL;
    }

    public boolean isInvalidArgs() {
        return status == STATUS_INVALID_ARGS;
    }

    public long getExecutionTime() {
        return executionTime;
    }
    public void setExecutionTime(long executionTime) {
        this.executionTime = executionTime;
    }

    /**
     * Gets the max memory used (in KB).
     *
     * @return the max memory used
     * @since 1.1
     */
    public long getMaxMemoryUsed() {
        return maxMemoryUsed;
    }

    /**
     * Sets the max memory used (in KB).
     *
     * @param maxMemoryUsed the new max memory used
     * @since 1.1
     */
    public void setMaxMemoryUsed(long maxMemoryUsed) {
        this.maxMemoryUsed = maxMemoryUsed;
    }

    public String getMessage() {
        return message;
    }
    public void setMessage(String message) {
        this.message = message;
    }
    public Object getReturnValue() {
        return returnValue;
    }
    public void setReturnValue(Object returnValue) {
        this.returnValue = returnValue;
    }
    public int getStatus() {
        return status;
    }
    public void setStatus(int status) {
        this.status = status;
    }
    public String getStdErr() {
        return stdErr;
    }
    public void setStdErr(String stdErr) {
        this.stdErr = stdErr;
    }
    public String getStdOut() {
        return stdOut;
    }
    public void setStdOut(String stdOut) {
        this.stdOut = stdOut;
    }

    public String toString() {
        return "[status="+status+", message="+message+", returnValue="+returnValue+", time="+executionTime+", memory="+maxMemoryUsed+", stdout="+stdOut+", stderr="+stdErr+"]";
    }

    public String getStackTrace() {
        return stackTrace;
    }

    public void setStackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
    }

    public Object[] getValidatedArgs() {
        return validatedArgs;
    }

    public void setValidatedArgs(Object[] validatedArgs) {
        this.validatedArgs = validatedArgs;
    }
}
