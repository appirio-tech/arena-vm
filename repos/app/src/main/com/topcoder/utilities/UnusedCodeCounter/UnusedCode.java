/*
 * UnusedCode.java
 *
 * Created on December 1, 2004, 2:27 PM
 */

package com.topcoder.utilities.UnusedCodeCounter;

import javax.swing.text.*;
import javax.swing.event.*;

import javax.swing.undo.*;


import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
/**
 *
 * @author  rfairfax
 */
public class UnusedCode extends javax.swing.JFrame {
    
    /** Creates new form UnusedCode */
    public UnusedCode() {
        initComponents();
        
        codeEditor.getDocument().addDocumentListener(new MyDocumentListener());
        
        undo = new UndoManager();
        
        codeEditor.getDocument().addUndoableEditListener(new StandardUndoableEditListener());
        
        undoAction = new UndoAction(this);
        redoAction = new RedoAction(this);
        findAction = new FindAction(this);
        findAgainAction = new FindAgainAction(this);
        gotoAction = new GotoAction(this);
        
        codeEditor.addKeyListener(new KeyHandler());

        findDialog = new FindDialog(this, codeEditor); 
        
        lineNumbers = new LineNumbers(codeEditor);
        
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.0;
        gridBagConstraints.weighty = 0.0;
        jPanel1.add(lineNumbers, gridBagConstraints);
        
        repaint();
    }
    
    protected class StandardUndoableEditListener implements UndoableEditListener
    {
        public void undoableEditHappened(UndoableEditEvent e) {
            undo.addEdit(e.getEdit());
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
    }  
    
    public void doUndo() {
        if(undo.canUndo())
            undo.undo();
    }
    
    public void doRedo() {
        if(undo.canRedo())
            undo.redo();
    }
    
    
    public FindDialog getFindDialog() {
        return findDialog;
    }

    public JTextArea getTextArea() {
        return codeEditor; 
    }

    
    private UndoAction undoAction;
    private RedoAction redoAction; 
    private GotoAction gotoAction;
    private FindDialog findDialog;
    private FindAction findAction;
    private FindAgainAction findAgainAction;
    
    private class KeyHandler extends KeyAdapter {

        public void keyPressed(KeyEvent evt) {
            switch (evt.getKeyCode()) {

            
            case KeyEvent.VK_Z:
                {
                    if(evt.isControlDown())
                    {
                        evt.consume();
                        undoAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                        break;
                    }
                }
            
            case KeyEvent.VK_R:
                {
                    if(evt.isControlDown())
                    {
                        evt.consume();
                        redoAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                        break;
                    }
                }
            
            case KeyEvent.VK_Y:
                {
                    if(evt.isControlDown())
                    {
                        evt.consume();
                        redoAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                        break;
                    }
                }
            
            
             case KeyEvent.VK_F: 
                {
                    if (evt.isControlDown()) {
                        evt.consume();
                        findAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                        return;
                    }
                    break;
                }

            case KeyEvent.VK_F3:
                {
                    evt.consume();
                    findAgainAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                    return;
                }
            
              case KeyEvent.VK_G:
                {
                    if (evt.isControlDown()) {
                        evt.consume();
                        gotoAction.actionPerformed(new ActionEvent(this, evt.getID(), ""));
                        return;
                    }
                    break;
                }
            }
            
        }
    }
    
    protected UndoManager undo;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        countPanel = new javax.swing.JPanel();
        charCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        codeEditor = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        countPanel.setLayout(new java.awt.GridBagLayout());

        countPanel.setMinimumSize(new java.awt.Dimension(10, 20));
        countPanel.setPreferredSize(new java.awt.Dimension(20, 20));
        charCount.setText("Non-Whitespace Characters:");
        countPanel.add(charCount, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(countPanel, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(800, 600));
        jScrollPane1.setViewport(null);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(codeEditor, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

 public class MyDocumentListener implements DocumentListener {
    String newline = "\n";
 
    public void insertUpdate(DocumentEvent e) {
        update(e);
    }
    public void removeUpdate(DocumentEvent e) {
        update(e);
    }
    public void changedUpdate(DocumentEvent e) {
        //Plain text components don't fire these events
        update(e);
    }

    public void update(DocumentEvent e) {
        try {
            Document doc = (Document)e.getDocument();
            long c = 0;
            String txt = doc.getText(0, doc.getLength());
            c = txt.replaceAll("\\s", "").length();
            charCount.setText("Non-Whitespace Count: " + c + "/" + doc.getLength());
        } catch (Exception er) {
            er.printStackTrace();
        }
    }
}
    
    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnusedCode().setVisible(true);
            }
        });
    }
    
    private LineNumbers lineNumbers;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel charCount;
    private javax.swing.JTextArea codeEditor;
    private javax.swing.JPanel countPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables
    
}
