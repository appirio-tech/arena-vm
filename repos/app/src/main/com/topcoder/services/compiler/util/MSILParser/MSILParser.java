/* Generated By:JJTree&JavaCC: Do not edit this line. MSILParser.java */
package com.topcoder.services.compiler.util.MSILParser;

public class MSILParser/*@bgen(jjtree)*/implements MSILParserTreeConstants, MSILParserConstants {/*@bgen(jjtree)*/
  protected JJTMSILParserState jjtree = new JJTMSILParserState();public static void main(String args[]) throws ParseException {
                MSILParser parser = new MSILParser(System.in);
                long start = System.currentTimeMillis();
                SimpleNode node = parser.ILFile();
                long end = System.currentTimeMillis();
                node.dump("");
                System.out.println("\nParsed file in " + (end - start) + "ms");
        }

/* Grammar follows */
  final public SimpleNode ILFile() throws ParseException {
 /*@bgen(jjtree) ILFile */
  ASTILFile jjtn000 = new ASTILFile(JJTILFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINE:
        case ASSEMBLY:
        case CLASS:
        case CORFLAGS:
        case CUSTOM:
        case DATA:
        case FIELD:
        case FILE:
        case METHOD:
        case MODULE:
        case MRESOURCE:
        case SUBSYSTEM:
        case VTFIXUP:
        case IMAGEBASE:
        case LANGUAGE:
        case NAMESPACE:
        case PERMISSIONSET:
        case PERMISSION:
        case 197:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Decl();
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Id() throws ParseException {
 /*@bgen(jjtree) Id */
    ASTId jjtn000 = new ASTId(JJTID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case SQSTRING:
        t = jj_consume_token(SQSTRING);
        break;
      case HEX_VALID_ID:
        t = jj_consume_token(HEX_VALID_ID);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setName(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DottedName() throws ParseException {
 /*@bgen(jjtree) DottedName */
    ASTDottedName jjtn000 = new ASTDottedName(JJTDOTTEDNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOTTED_NAME:
        t = jj_consume_token(DOTTED_NAME);
        break;
      case HEX_VALID_ID:
      case SQSTRING:
      case ID:
        Id();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if(t != null) jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LabelOrOffset() throws ParseException {
 /*@bgen(jjtree) LabelOrOffset */
  ASTLabelOrOffset jjtn000 = new ASTLabelOrOffset(JJTLABELOROFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Labels() throws ParseException {
 /*@bgen(jjtree) Labels */
  ASTLabels jjtn000 = new ASTLabels(JJTLABELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LabelOrOffset();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        LabelOrOffset();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CodeLabel() throws ParseException {
 /*@bgen(jjtree) CodeLabel */
  ASTCodeLabel jjtn000 = new ASTCodeLabel(JJTCODELABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
      jj_consume_token(COLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DataLabel() throws ParseException {
 /*@bgen(jjtree) DataLabel */
  ASTDataLabel jjtn000 = new ASTDataLabel(JJTDATALABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Bytes() throws ParseException {
 /*@bgen(jjtree) Bytes */
  ASTBytes jjtn000 = new ASTBytes(JJTBYTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      HexByte();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEX_VALID_ID:
        case DECIMAL_BYTE:
        case HEX_BYTE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        HexByte();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Float32() throws ParseException {
 /*@bgen(jjtree) Float32 */
  ASTFloat32 jjtn000 = new ASTFloat32(JJTFLOAT32);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case DECIMAL_BYTE:
      case DECIMAL_LITERAL:
      case REAL_PIECE:
        RealNumber();
        break;
      case FLOAT32:
        jj_consume_token(FLOAT32);
        jj_consume_token(LEFT_PAREN);
        Int32();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Float64() throws ParseException {
 /*@bgen(jjtree) Float64 */
  ASTFloat64 jjtn000 = new ASTFloat64(JJTFLOAT64);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case DECIMAL_BYTE:
      case DECIMAL_LITERAL:
      case REAL_PIECE:
        RealNumber();
        break;
      case FLOAT32:
        jj_consume_token(FLOAT32);
        jj_consume_token(LEFT_PAREN);
        Int32();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExternSourceDecl() throws ParseException {
 /*@bgen(jjtree) ExternSourceDecl */
  ASTExternSourceDecl jjtn000 = new ASTExternSourceDecl(JJTEXTERNSOURCEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(4)) {
        jj_consume_token(LINE);
        Int32();
        if (jj_2_1(2)) {
          jj_consume_token(COLON);
          Int32();
        } else {
          ;
        }
        if (jj_2_2(2)) {
          jj_consume_token(SQSTRING);
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINE:
          jj_consume_token(LINE);
          Int32();
          jj_consume_token(QSTRING);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Filename() throws ParseException {
 /*@bgen(jjtree) Filename */
  ASTFilename jjtn000 = new ASTFilename(JJTFILENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DottedName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//basic tree item
  final public void Decl() throws ParseException {
 /*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        jj_consume_token(ASSEMBLY);
        DottedName();
        jj_consume_token(LEFT_BRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CUSTOM:
          case HASH:
          case CULTURE:
          case PUBLICKEY:
          case VER:
          case PERMISSIONSET:
          case PERMISSION:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
          AsmDecl();
        }
        jj_consume_token(RIGHT_BRACE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSEMBLY:
          jj_consume_token(ASSEMBLY);
          jj_consume_token(EXTERN);
          DottedName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            DottedName();
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          jj_consume_token(LEFT_BRACE);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASSEMBLY:
            case CUSTOM:
            case HASH:
            case CULTURE:
            case PUBLICKEY:
            case VER:
            case PUBLICKEYTOKEN:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_5;
            }
            AsmRefDecl();
          }
          jj_consume_token(RIGHT_BRACE);
          break;
        default:
          jj_la1[20] = jj_gen;
          if (jj_2_5(2)) {
      ASTClass jjtn001 = new ASTClass(JJTCLASS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
            try {
              jj_consume_token(CLASS);
              ClassHeader();
              jj_consume_token(LEFT_BRACE);
              label_6:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LINE:
                case CLASS:
                case CUSTOM:
                case DATA:
                case FIELD:
                case METHOD:
                case EVENT:
                case OVERRIDE:
                case PACK:
                case PARAM:
                case PROPERTY:
                case SIZE:
                case PERMISSIONSET:
                case PERMISSION:
                  ;
                  break;
                default:
                  jj_la1[11] = jj_gen;
                  break label_6;
                }
                ClassMember();
              }
              jj_consume_token(RIGHT_BRACE);
            } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
            } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLASS:
              jj_consume_token(CLASS);
              jj_consume_token(EXTERN);
              ExportAttr();
              DottedName();
              jj_consume_token(LEFT_BRACE);
              label_7:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case CLASS:
                case CUSTOM:
                case FILE:
                  ;
                  break;
                default:
                  jj_la1[12] = jj_gen;
                  break label_7;
                }
                ExternClassDecl();
              }
              jj_consume_token(RIGHT_BRACE);
              break;
            case CORFLAGS:
              jj_consume_token(CORFLAGS);
              Int32();
              break;
            case CUSTOM:
              jj_consume_token(CUSTOM);
              CustomDecl();
              break;
            case DATA:
              jj_consume_token(DATA);
              DataDecl();
              break;
            case FIELD:
              jj_consume_token(FIELD);
              FieldDecl();
              break;
            default:
              jj_la1[21] = jj_gen;
              if (jj_2_6(2)) {
                jj_consume_token(FILE);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NOMETADATA:
                  jj_consume_token(NOMETADATA);
                  break;
                default:
                  jj_la1[13] = jj_gen;
                  ;
                }
                Filename();
                jj_consume_token(HASH);
                jj_consume_token(EQUALS);
                jj_consume_token(LEFT_PAREN);
                Bytes();
                jj_consume_token(RIGHT_PAREN);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ENTRYPOINT:
                  jj_consume_token(ENTRYPOINT);
                  break;
                default:
                  jj_la1[14] = jj_gen;
                  ;
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case METHOD:
                  jj_consume_token(METHOD);
                  MethodHeader();
                  jj_consume_token(LEFT_BRACE);
                  label_8:
                  while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case LINE:
                    case CUSTOM:
                    case DATA:
                    case ENTRYPOINT:
                    case OVERRIDE:
                    case PARAM:
                    case EMITBYTE:
                    case LOCALS:
                    case MAXSTACK:
                    case TRY:
                    case PERMISSIONSET:
                    case PERMISSION:
                    case LEFT_BRACE:
                    case 198:
                    case 199:
                    case 201:
                    case 202:
                    case OP_BOX:
                    case OP_CASTCLASS:
                    case OP_CPOBJ:
                    case OP_INITOBJ:
                    case OP_ISINST:
                    case OP_LDELEM:
                    case OP_LDELEMA:
                    case OP_LDOBJ:
                    case OP_MKREFANY:
                    case OP_NEWARR:
                    case OP_REFANYVAL:
                    case OP_SIZEOF:
                    case OP_STOBJ:
                    case OP_UNBOX:
                    case OP_UNBOXANY:
                    case OP_BOXANY:
                    case OP_CONSTRAINED:
                    case OP_STELEM:
                    case OP_LDFLD:
                    case OP_LDFLDA:
                    case OP_LDSFLD:
                    case OP_LDSFLDA:
                    case OP_STFLD:
                    case OP_STSFLD:
                    case OP_CALL:
                    case OP_CALLVIRT:
                    case OP_JMP:
                    case OP_LDFTN:
                    case OP_LDVIRTFTN:
                    case OP_NEWOBJ:
                    case OP_BEQ:
                    case OP_BEQDOTS:
                    case OP_BGE:
                    case OP_BGEDOTS:
                    case OP_BGEDOTUN:
                    case OP_BGEDOTUNDOTS:
                    case OP_BGT:
                    case OP_BGTDOTS:
                    case OP_BGTDOTUN:
                    case OP_BGTDOTUNDOTS:
                    case OP_BLE:
                    case OP_BLEDOTS:
                    case OP_BLEDOTUN:
                    case OP_BLEDOTUNDOTS:
                    case OP_BLT:
                    case OP_BLTDOTS:
                    case OP_BLTDOTUN:
                    case OP_BLTDOTUNDOTS:
                    case OP_BNEDOTUN:
                    case OP_BNEDOTUNDOTS:
                    case OP_BR:
                    case OP_BRDOTS:
                    case OP_BRFALSE:
                    case OP_BRFALSEDOTS:
                    case OP_BRTRUE:
                    case OP_BRTRUEDOTS:
                    case OP_LEAVE:
                    case OP_LEAVEDOTS:
                    case OP_LDCDOTR4:
                    case OP_LDCDOTR8:
                    case OP_LDCDOTI4:
                    case OP_LDCDOTI8:
                    case OP_LDCDOTI4DOTS:
                    case OP_UNALIGNEDDOT:
                    case OP_LDARG:
                    case OP_LDARGDOTS:
                    case OP_LDARGA:
                    case OP_LDARGADOTS:
                    case OP_LDLOC:
                    case OP_LDLOCDOTS:
                    case OP_LDLOCA:
                    case OP_LDLOCADOTS:
                    case OP_STARG:
                    case OP_STARGDOTS:
                    case OP_STLOC:
                    case OP_STLOCDOTS:
                    case OP_ADD:
                    case OP_ADDDOTOVF:
                    case OP_ADDDOTOVFDOTUN:
                    case OP_AND:
                    case OP_ARGLIST:
                    case OP_BREAK:
                    case OP_CEQ:
                    case OP_CGT:
                    case OP_CGTDOTUN:
                    case OP_CKFINITE:
                    case OP_CLT:
                    case OP_CLTDOTUN:
                    case OP_CONVDOTI:
                    case OP_CONVDOTI1:
                    case OP_CONVDOTI2:
                    case OP_CONVDOTI4:
                    case OP_CONVDOTI8:
                    case OP_CONVDOTOVFDOTI:
                    case OP_CONVDOTOVFDOTIDOTUN:
                    case OP_CONVDOTOVFDOTI1:
                    case OP_CONVDOTOVFDOTI1DOTUN:
                    case OP_CONVDOTOVFDOTI2:
                    case OP_CONVDOTOVFDOTI2DOTUN:
                    case OP_CONVDOTOVFDOTI4:
                    case OP_CONVDOTOVFDOTI4DOTUN:
                    case OP_CONVDOTOVFDOTI8:
                    case OP_CONVDOTOVFDOTI8DOTUN:
                    case OP_CONVDOTOVFDOTU:
                    case OP_CONVDOTOVFDOTUDOTUN:
                    case OP_CONVDOTOVFDOTU1:
                    case OP_CONVDOTOVFDOTU1DOTUN:
                    case OP_CONVDOTOVFDOTU2:
                    case OP_CONVDOTOVFDOTU2DOTUN:
                    case OP_CONVDOTOVFDOTU4:
                    case OP_CONVDOTOVFDOTU4DOTUN:
                    case OP_CONVDOTOVFDOTU8:
                    case OP_CONVDOTOVFDOTU8DOTUN:
                    case OP_CONVDOTRDOTUN:
                    case OP_CONVDOTR4:
                    case OP_CONVDOTR8:
                    case OP_CONVDOTU:
                    case OP_CONVDOTU1:
                    case OP_CONVDOTU2:
                    case OP_CONVDOTU4:
                    case OP_CONVDOTU8:
                    case OP_CPBLK:
                    case OP_DIV:
                    case OP_DIVDOTUN:
                    case OP_DUP:
                    case OP_ENDFAULT:
                    case OP_ENDFILTER:
                    case OP_ENDFINALLY:
                    case OP_INITBLK:
                    case OP_LDARGDOT0:
                    case OP_LDARGDOT1:
                    case OP_LDARGDOT2:
                    case OP_LDARGDOT3:
                    case OP_LDCDOTI4DOT0:
                    case OP_LDCDOTI4DOT1:
                    case OP_LDCDOTI4DOT2:
                    case OP_LDCDOTI4DOT3:
                    case OP_LDCDOTI4DOT4:
                    case OP_LDCDOTI4DOT5:
                    case OP_LDCDOTI4DOT6:
                    case OP_LDCDOTI4DOT7:
                    case OP_LDCDOTI4DOT8:
                    case OP_LDCDOTI4DOTM1:
                    case OP_LDELEMDOTI:
                    case OP_LDELEMDOTI1:
                    case OP_LDELEMDOTI2:
                    case OP_LDELEMDOTI4:
                    case OP_LDELEMDOTI8:
                    case OP_LDELEMDOTR4:
                    case OP_LDELEMDOTR8:
                    case OP_LDELEMDOTREF:
                    case OP_LDELEMDOTU1:
                    case OP_LDELEMDOTU2:
                    case OP_LDELEMDOTU4:
                    case OP_LDINDDOTI:
                    case OP_LDINDDOTI1:
                    case OP_LDINDDOTI2:
                    case OP_LDINDDOTI4:
                    case OP_LDINDDOTI8:
                    case OP_LDINDDOTR4:
                    case OP_LDINDDOTR8:
                    case OP_LDINDDOTREF:
                    case OP_LDINDDOTU1:
                    case OP_LDINDDOTU2:
                    case OP_LDINDDOTU4:
                    case OP_LDLEN:
                    case OP_LDLOCDOT0:
                    case OP_LDLOCDOT1:
                    case OP_LDLOCDOT2:
                    case OP_LDLOCDOT3:
                    case OP_LDNULL:
                    case OP_LOCALLOC:
                    case OP_MUL:
                    case OP_MULDOTOVF:
                    case OP_MULDOTOVFDOTUN:
                    case OP_NEG:
                    case OP_NOP:
                    case OP_NOT:
                    case OP_OR:
                    case OP_POP:
                    case OP_READONLY:
                    case OP_REFANYTYPE:
                    case OP_REM:
                    case OP_REMDOTUN:
                    case OP_RET:
                    case OP_RETHROW:
                    case OP_SHL:
                    case OP_SHR:
                    case OP_SHRDOTUN:
                    case OP_STELEMDOTI:
                    case OP_STELEMDOTI1:
                    case OP_STELEMDOTI2:
                    case OP_STELEMDOTI4:
                    case OP_STELEMDOTI8:
                    case OP_STELEMDOTR4:
                    case OP_STELEMDOTR8:
                    case OP_STELEMDOTREF:
                    case OP_STINDDOTI:
                    case OP_STINDDOTI1:
                    case OP_STINDDOTI2:
                    case OP_STINDDOTI4:
                    case OP_STINDDOTI8:
                    case OP_STINDDOTR4:
                    case OP_STINDDOTR8:
                    case OP_STINDDOTREF:
                    case OP_STLOCDOT0:
                    case OP_STLOCDOT1:
                    case OP_STLOCDOT2:
                    case OP_STLOCDOT3:
                    case OP_SUB:
                    case OP_SUBDOTOVF:
                    case OP_SUBDOTOVFDOTUN:
                    case OP_TAILDOT:
                    case OP_THROW:
                    case OP_VOLATILEDOT:
                    case OP_XOR:
                    case HEX_VALID_ID:
                    case SQSTRING:
                    case ID:
                      ;
                      break;
                    default:
                      jj_la1[15] = jj_gen;
                      break label_8;
                    }
                    MethodBodyItem();
                  }
                  jj_consume_token(RIGHT_BRACE);
                  break;
                default:
                  jj_la1[22] = jj_gen;
                  if (jj_2_7(2)) {
                    jj_consume_token(MODULE);
                    jj_consume_token(EXTERN);
                    Filename();
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MODULE:
                      jj_consume_token(MODULE);
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case HEX_VALID_ID:
                      case SQSTRING:
                      case DOTTED_NAME:
                      case ID:
                        Filename();
                        break;
                      default:
                        jj_la1[16] = jj_gen;
                        ;
                      }
                      break;
                    case MRESOURCE:
                      jj_consume_token(MRESOURCE);
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case PUBLIC:
                      case PRIVATE:
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case PUBLIC:
                          jj_consume_token(PUBLIC);
                          break;
                        case PRIVATE:
                          jj_consume_token(PRIVATE);
                          break;
                        default:
                          jj_la1[17] = jj_gen;
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                        break;
                      default:
                        jj_la1[18] = jj_gen;
                        ;
                      }
                      DottedName();
                      jj_consume_token(LEFT_BRACE);
                      label_9:
                      while (true) {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case ASSEMBLY:
                        case CUSTOM:
                        case FILE:
                          ;
                          break;
                        default:
                          jj_la1[19] = jj_gen;
                          break label_9;
                        }
                        ManResDecl();
                      }
                      jj_consume_token(RIGHT_BRACE);
                      break;
                    case SUBSYSTEM:
                      jj_consume_token(SUBSYSTEM);
                      Int32();
                      break;
                    case VTFIXUP:
                      jj_consume_token(VTFIXUP);
                      VTFixupDecl();
                      break;
                    case LINE:
                      ExternSourceDecl();
                      break;
                    case PERMISSIONSET:
                    case PERMISSION:
                      SecurityDecl();
                      break;
                    case FILE:
                      jj_consume_token(FILE);
                      jj_consume_token(ALIGNMENT);
                      Int32();
                      break;
                    case IMAGEBASE:
                      jj_consume_token(IMAGEBASE);
                      Int32();
                      break;
                    case LANGUAGE:
                      jj_consume_token(LANGUAGE);
                      LanguageDecl();
                      break;
                    case NAMESPACE:
                      jj_consume_token(NAMESPACE);
                      Id();
                      break;
                    case 197:
                      jj_consume_token(197);
                      Int32();
                      break;
                    default:
                      jj_la1[23] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LanguageDecl() throws ParseException {
 /*@bgen(jjtree) LanguageDecl */
  ASTLanguageDecl jjtn000 = new ASTLanguageDecl(JJTLANGUAGEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SQSTRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(SQSTRING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          jj_consume_token(SQSTRING);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SecurityDecl() throws ParseException {
 /*@bgen(jjtree) SecurityDecl */
  ASTSecurityDecl jjtn000 = new ASTSecurityDecl(JJTSECURITYDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERMISSIONSET:
        jj_consume_token(PERMISSIONSET);
        SecAction();
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case PERMISSION:
        jj_consume_token(PERMISSION);
        SecAction();
        TypeReference();
        jj_consume_token(LEFT_PAREN);
        NameValPairs();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NameValPairs() throws ParseException {
 /*@bgen(jjtree) NameValPairs */
  ASTNameValPairs jjtn000 = new ASTNameValPairs(JJTNAMEVALPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NameValPair();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        NameValPair();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NameValPair() throws ParseException {
 /*@bgen(jjtree) NameValPair */
  ASTNameValPair jjtn000 = new ASTNameValPair(JJTNAMEVALPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SQSTRING);
      jj_consume_token(EQUALS);
      jj_consume_token(SQSTRING);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SecAction() throws ParseException {
 /*@bgen(jjtree) SecAction */
  ASTSecAction jjtn000 = new ASTSecAction(JJTSECACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        jj_consume_token(ASSERT);
        break;
      case DEMAND:
        jj_consume_token(DEMAND);
        break;
      case DENY:
        jj_consume_token(DENY);
        break;
      case INHERITCHECK:
        jj_consume_token(INHERITCHECK);
        break;
      case LINKCHECK:
        jj_consume_token(LINKCHECK);
        break;
      case PERMITONLY:
        jj_consume_token(PERMITONLY);
        break;
      case REQOPT:
        jj_consume_token(REQOPT);
        break;
      case REQREFUSE:
        jj_consume_token(REQREFUSE);
        break;
      case REQUEST:
        jj_consume_token(REQUEST);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VTFixupDecl() throws ParseException {
 /*@bgen(jjtree) VTFixupDecl */
  ASTVTFixupDecl jjtn000 = new ASTVTFixupDecl(JJTVTFIXUPDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_BYTE:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
        Int32();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROMUNMANAGED:
        case INT32_TYPE:
        case INT64_TYPE:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_11;
        }
        VTFixupAttr();
      }
      jj_consume_token(AT);
      DataLabel();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void VTFixupAttr() throws ParseException {
 /*@bgen(jjtree) VTFixupAttr */
  ASTVTFixupAttr jjtn000 = new ASTVTFixupAttr(JJTVTFIXUPATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROMUNMANAGED:
        jj_consume_token(FROMUNMANAGED);
        break;
      case INT32_TYPE:
        jj_consume_token(INT32_TYPE);
        break;
      case INT64_TYPE:
        jj_consume_token(INT64_TYPE);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ManResDecl() throws ParseException {
 /*@bgen(jjtree) ManResDecl */
  ASTManResDecl jjtn000 = new ASTManResDecl(JJTMANRESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSEMBLY:
        jj_consume_token(ASSEMBLY);
        jj_consume_token(EXTERN);
        DottedName();
        break;
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case FILE:
        jj_consume_token(FILE);
        DottedName();
        jj_consume_token(AT);
        Int32();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LocalsSignature() throws ParseException {
 /*@bgen(jjtree) LocalsSignature */
  ASTLocalsSignature jjtn000 = new ASTLocalsSignature(JJTLOCALSSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Local();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        Local();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Local() throws ParseException {
 /*@bgen(jjtree) Local */
  ASTLocal jjtn000 = new ASTLocal(JJTLOCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        Int32();
        jj_consume_token(RIGHT_BRACKET);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEX_VALID_ID:
      case SQSTRING:
      case ID:
        Id();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Instr() throws ParseException {
 /*@bgen(jjtree) Instr */
  ASTInstr jjtn000 = new ASTInstr(JJTINSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
      case OP_ADDDOTOVF:
      case OP_ADDDOTOVFDOTUN:
      case OP_AND:
      case OP_ARGLIST:
      case OP_BREAK:
      case OP_CEQ:
      case OP_CGT:
      case OP_CGTDOTUN:
      case OP_CKFINITE:
      case OP_CLT:
      case OP_CLTDOTUN:
      case OP_CONVDOTI:
      case OP_CONVDOTI1:
      case OP_CONVDOTI2:
      case OP_CONVDOTI4:
      case OP_CONVDOTI8:
      case OP_CONVDOTOVFDOTI:
      case OP_CONVDOTOVFDOTIDOTUN:
      case OP_CONVDOTOVFDOTI1:
      case OP_CONVDOTOVFDOTI1DOTUN:
      case OP_CONVDOTOVFDOTI2:
      case OP_CONVDOTOVFDOTI2DOTUN:
      case OP_CONVDOTOVFDOTI4:
      case OP_CONVDOTOVFDOTI4DOTUN:
      case OP_CONVDOTOVFDOTI8:
      case OP_CONVDOTOVFDOTI8DOTUN:
      case OP_CONVDOTOVFDOTU:
      case OP_CONVDOTOVFDOTUDOTUN:
      case OP_CONVDOTOVFDOTU1:
      case OP_CONVDOTOVFDOTU1DOTUN:
      case OP_CONVDOTOVFDOTU2:
      case OP_CONVDOTOVFDOTU2DOTUN:
      case OP_CONVDOTOVFDOTU4:
      case OP_CONVDOTOVFDOTU4DOTUN:
      case OP_CONVDOTOVFDOTU8:
      case OP_CONVDOTOVFDOTU8DOTUN:
      case OP_CONVDOTRDOTUN:
      case OP_CONVDOTR4:
      case OP_CONVDOTR8:
      case OP_CONVDOTU:
      case OP_CONVDOTU1:
      case OP_CONVDOTU2:
      case OP_CONVDOTU4:
      case OP_CONVDOTU8:
      case OP_CPBLK:
      case OP_DIV:
      case OP_DIVDOTUN:
      case OP_DUP:
      case OP_ENDFAULT:
      case OP_ENDFILTER:
      case OP_ENDFINALLY:
      case OP_INITBLK:
      case OP_LDARGDOT0:
      case OP_LDARGDOT1:
      case OP_LDARGDOT2:
      case OP_LDARGDOT3:
      case OP_LDCDOTI4DOT0:
      case OP_LDCDOTI4DOT1:
      case OP_LDCDOTI4DOT2:
      case OP_LDCDOTI4DOT3:
      case OP_LDCDOTI4DOT4:
      case OP_LDCDOTI4DOT5:
      case OP_LDCDOTI4DOT6:
      case OP_LDCDOTI4DOT7:
      case OP_LDCDOTI4DOT8:
      case OP_LDCDOTI4DOTM1:
      case OP_LDELEMDOTI:
      case OP_LDELEMDOTI1:
      case OP_LDELEMDOTI2:
      case OP_LDELEMDOTI4:
      case OP_LDELEMDOTI8:
      case OP_LDELEMDOTR4:
      case OP_LDELEMDOTR8:
      case OP_LDELEMDOTREF:
      case OP_LDELEMDOTU1:
      case OP_LDELEMDOTU2:
      case OP_LDELEMDOTU4:
      case OP_LDINDDOTI:
      case OP_LDINDDOTI1:
      case OP_LDINDDOTI2:
      case OP_LDINDDOTI4:
      case OP_LDINDDOTI8:
      case OP_LDINDDOTR4:
      case OP_LDINDDOTR8:
      case OP_LDINDDOTREF:
      case OP_LDINDDOTU1:
      case OP_LDINDDOTU2:
      case OP_LDINDDOTU4:
      case OP_LDLEN:
      case OP_LDLOCDOT0:
      case OP_LDLOCDOT1:
      case OP_LDLOCDOT2:
      case OP_LDLOCDOT3:
      case OP_LDNULL:
      case OP_LOCALLOC:
      case OP_MUL:
      case OP_MULDOTOVF:
      case OP_MULDOTOVFDOTUN:
      case OP_NEG:
      case OP_NOP:
      case OP_NOT:
      case OP_OR:
      case OP_POP:
      case OP_READONLY:
      case OP_REFANYTYPE:
      case OP_REM:
      case OP_REMDOTUN:
      case OP_RET:
      case OP_RETHROW:
      case OP_SHL:
      case OP_SHR:
      case OP_SHRDOTUN:
      case OP_STELEMDOTI:
      case OP_STELEMDOTI1:
      case OP_STELEMDOTI2:
      case OP_STELEMDOTI4:
      case OP_STELEMDOTI8:
      case OP_STELEMDOTR4:
      case OP_STELEMDOTR8:
      case OP_STELEMDOTREF:
      case OP_STINDDOTI:
      case OP_STINDDOTI1:
      case OP_STINDDOTI2:
      case OP_STINDDOTI4:
      case OP_STINDDOTI8:
      case OP_STINDDOTR4:
      case OP_STINDDOTR8:
      case OP_STINDDOTREF:
      case OP_STLOCDOT0:
      case OP_STLOCDOT1:
      case OP_STLOCDOT2:
      case OP_STLOCDOT3:
      case OP_SUB:
      case OP_SUBDOTOVF:
      case OP_SUBDOTOVFDOTUN:
      case OP_TAILDOT:
      case OP_THROW:
      case OP_VOLATILEDOT:
      case OP_XOR:
        Instr_None();
        break;
      default:
        jj_la1[38] = jj_gen;
        if (jj_2_10(2)) {
          Instr_Var();
          Int32();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OP_LDARG:
          case OP_LDARGDOTS:
          case OP_LDARGA:
          case OP_LDARGADOTS:
          case OP_LDLOC:
          case OP_LDLOCDOTS:
          case OP_LDLOCA:
          case OP_LDLOCADOTS:
          case OP_STARG:
          case OP_STARGDOTS:
          case OP_STLOC:
          case OP_STLOCDOTS:
            Instr_Var();
            DottedName();
            break;
          case OP_LDCDOTI4:
          case OP_LDCDOTI8:
          case OP_LDCDOTI4DOTS:
          case OP_UNALIGNEDDOT:
            Instr_I();
            Int32();
            break;
          default:
            jj_la1[39] = jj_gen;
            if (jj_2_11(2)) {
              Instr_R();
              Float64();
            } else if (jj_2_12(2)) {
              Instr_R();
              Int32();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case OP_LDCDOTR4:
              case OP_LDCDOTR8:
                Instr_R();
                jj_consume_token(LEFT_PAREN);
                Bytes();
                jj_consume_token(RIGHT_PAREN);
                break;
              default:
                jj_la1[40] = jj_gen;
                if (jj_2_13(2)) {
                  Instr_Br();
                  Int32();
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case OP_BEQ:
                  case OP_BEQDOTS:
                  case OP_BGE:
                  case OP_BGEDOTS:
                  case OP_BGEDOTUN:
                  case OP_BGEDOTUNDOTS:
                  case OP_BGT:
                  case OP_BGTDOTS:
                  case OP_BGTDOTUN:
                  case OP_BGTDOTUNDOTS:
                  case OP_BLE:
                  case OP_BLEDOTS:
                  case OP_BLEDOTUN:
                  case OP_BLEDOTUNDOTS:
                  case OP_BLT:
                  case OP_BLTDOTS:
                  case OP_BLTDOTUN:
                  case OP_BLTDOTUNDOTS:
                  case OP_BNEDOTUN:
                  case OP_BNEDOTUNDOTS:
                  case OP_BR:
                  case OP_BRDOTS:
                  case OP_BRFALSE:
                  case OP_BRFALSEDOTS:
                  case OP_BRTRUE:
                  case OP_BRTRUEDOTS:
                  case OP_LEAVE:
                  case OP_LEAVEDOTS:
                    Instr_Br();
                    DataLabel();
                    break;
                  case OP_CALL:
                  case OP_CALLVIRT:
                  case OP_JMP:
                  case OP_LDFTN:
                  case OP_LDVIRTFTN:
                  case OP_NEWOBJ:
                    Instr_Method();
                    CallConv();
                    Type();
                                        ASTMethodCall jjtn001 = new ASTMethodCall(JJTMETHODCALL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                    try {
                      if (jj_2_8(2)) {
                        TypeSpec();
                        jj_consume_token(DOUBLE_COLON);
                      } else {
                        ;
                      }
                      MethodName();
                    } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
                    } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case LESS_THAN:
                      jj_consume_token(LESS_THAN);
                      GenArgs();
                      jj_consume_token(GREATER_THAN);
                      break;
                    default:
                      jj_la1[36] = jj_gen;
                      ;
                    }
                    jj_consume_token(LEFT_PAREN);
                    Parameters();
                    jj_consume_token(RIGHT_PAREN);
                    break;
                  case OP_LDFLD:
                  case OP_LDFLDA:
                  case OP_LDSFLD:
                  case OP_LDSFLDA:
                  case OP_STFLD:
                  case OP_STSFLD:
                    Instr_Field();
                    Type();
                    TypeSpec();
                    jj_consume_token(DOUBLE_COLON);
                    Id();
                    break;
                  case OP_BOX:
                  case OP_CASTCLASS:
                  case OP_CPOBJ:
                  case OP_INITOBJ:
                  case OP_ISINST:
                  case OP_LDELEM:
                  case OP_LDELEMA:
                  case OP_LDOBJ:
                  case OP_MKREFANY:
                  case OP_NEWARR:
                  case OP_REFANYVAL:
                  case OP_SIZEOF:
                  case OP_STOBJ:
                  case OP_UNBOX:
                  case OP_UNBOXANY:
                  case OP_BOXANY:
                  case OP_CONSTRAINED:
                  case OP_STELEM:
                    Instr_Type();
                    TypeSpec();
                    break;
                  default:
                    jj_la1[41] = jj_gen;
                    if (jj_2_14(2)) {
                      jj_consume_token(198);
                      jj_consume_token(QSTRING);
                    } else {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case 198:
                        jj_consume_token(198);
                        jj_consume_token(BYTEARRAY);
                        jj_consume_token(LEFT_PAREN);
                        Bytes();
                        jj_consume_token(RIGHT_PAREN);
                        break;
                      case 199:
                        jj_consume_token(199);
                        CallConv();
                        Type();
                        jj_consume_token(LEFT_PAREN);
                        Parameters();
                        jj_consume_token(RIGHT_PAREN);
                        break;
                      default:
                        jj_la1[42] = jj_gen;
                        if (jj_2_15(2)) {
                          Instr_Tok();
                          TypeSpec();
                        } else if (jj_2_16(2)) {
                          Instr_Tok();
                          jj_consume_token(METHOD_TYPE);
                          CallConv();
                          Type();
                          if (jj_2_9(2)) {
                            TypeSpec();
                            jj_consume_token(DOUBLE_COLON);
                          } else {
                            ;
                          }
                          MethodName();
                          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                          case LESS_THAN:
                            jj_consume_token(LESS_THAN);
                            GenArgs();
                            jj_consume_token(GREATER_THAN);
                            break;
                          default:
                            jj_la1[37] = jj_gen;
                            ;
                          }
                          jj_consume_token(LEFT_PAREN);
                          Parameters();
                          jj_consume_token(RIGHT_PAREN);
                        } else {
                          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                          case 202:
                            Instr_Tok();
                            jj_consume_token(200);
                            Type();
                            TypeSpec();
                            jj_consume_token(DOUBLE_COLON);
                            Id();
                            break;
                          case 201:
                            jj_consume_token(201);
                            jj_consume_token(LEFT_PAREN);
                            Labels();
                            jj_consume_token(RIGHT_PAREN);
                            break;
                          default:
                            jj_la1[43] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Instr_Tok() throws ParseException {
 /*@bgen(jjtree) Instr_Tok */
  ASTInstr_Tok jjtn000 = new ASTInstr_Tok(JJTINSTR_TOK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(202);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Instr_Type() throws ParseException {
 /*@bgen(jjtree) Instr_Type */
  ASTInstr_Type jjtn000 = new ASTInstr_Type(JJTINSTR_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_BOX:
        jj_consume_token(OP_BOX);
        break;
      case OP_CASTCLASS:
        jj_consume_token(OP_CASTCLASS);
        break;
      case OP_CPOBJ:
        jj_consume_token(OP_CPOBJ);
        break;
      case OP_INITOBJ:
        jj_consume_token(OP_INITOBJ);
        break;
      case OP_ISINST:
        jj_consume_token(OP_ISINST);
        break;
      case OP_LDELEM:
        jj_consume_token(OP_LDELEM);
        break;
      case OP_LDELEMA:
        jj_consume_token(OP_LDELEMA);
        break;
      case OP_LDOBJ:
        jj_consume_token(OP_LDOBJ);
        break;
      case OP_MKREFANY:
        jj_consume_token(OP_MKREFANY);
        break;
      case OP_NEWARR:
        jj_consume_token(OP_NEWARR);
        break;
      case OP_REFANYVAL:
        jj_consume_token(OP_REFANYVAL);
        break;
      case OP_SIZEOF:
        jj_consume_token(OP_SIZEOF);
        break;
      case OP_STOBJ:
        jj_consume_token(OP_STOBJ);
        break;
      case OP_UNBOX:
        jj_consume_token(OP_UNBOX);
        break;
      case OP_UNBOXANY:
        jj_consume_token(OP_UNBOXANY);
        break;
      case OP_BOXANY:
        jj_consume_token(OP_BOXANY);
        break;
      case OP_CONSTRAINED:
        jj_consume_token(OP_CONSTRAINED);
        break;
      case OP_STELEM:
        jj_consume_token(OP_STELEM);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_Field() throws ParseException {
 /*@bgen(jjtree) Instr_Field */
  ASTInstr_Field jjtn000 = new ASTInstr_Field(JJTINSTR_FIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LDFLD:
        jj_consume_token(OP_LDFLD);
        break;
      case OP_LDFLDA:
        jj_consume_token(OP_LDFLDA);
        break;
      case OP_LDSFLD:
        jj_consume_token(OP_LDSFLD);
        break;
      case OP_LDSFLDA:
        jj_consume_token(OP_LDSFLDA);
        break;
      case OP_STFLD:
        jj_consume_token(OP_STFLD);
        break;
      case OP_STSFLD:
        jj_consume_token(OP_STSFLD);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_Method() throws ParseException {
 /*@bgen(jjtree) Instr_Method */
  ASTInstr_Method jjtn000 = new ASTInstr_Method(JJTINSTR_METHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_CALL:
        jj_consume_token(OP_CALL);
        break;
      case OP_CALLVIRT:
        jj_consume_token(OP_CALLVIRT);
        break;
      case OP_JMP:
        jj_consume_token(OP_JMP);
        break;
      case OP_LDFTN:
        jj_consume_token(OP_LDFTN);
        break;
      case OP_LDVIRTFTN:
        jj_consume_token(OP_LDVIRTFTN);
        break;
      case OP_NEWOBJ:
        jj_consume_token(OP_NEWOBJ);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_Br() throws ParseException {
 /*@bgen(jjtree) Instr_Br */
  ASTInstr_Br jjtn000 = new ASTInstr_Br(JJTINSTR_BR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_BEQ:
        jj_consume_token(OP_BEQ);
        break;
      case OP_BEQDOTS:
        jj_consume_token(OP_BEQDOTS);
        break;
      case OP_BGE:
        jj_consume_token(OP_BGE);
        break;
      case OP_BGEDOTS:
        jj_consume_token(OP_BGEDOTS);
        break;
      case OP_BGEDOTUN:
        jj_consume_token(OP_BGEDOTUN);
        break;
      case OP_BGEDOTUNDOTS:
        jj_consume_token(OP_BGEDOTUNDOTS);
        break;
      case OP_BGT:
        jj_consume_token(OP_BGT);
        break;
      case OP_BGTDOTS:
        jj_consume_token(OP_BGTDOTS);
        break;
      case OP_BGTDOTUN:
        jj_consume_token(OP_BGTDOTUN);
        break;
      case OP_BGTDOTUNDOTS:
        jj_consume_token(OP_BGTDOTUNDOTS);
        break;
      case OP_BLE:
        jj_consume_token(OP_BLE);
        break;
      case OP_BLEDOTS:
        jj_consume_token(OP_BLEDOTS);
        break;
      case OP_BLEDOTUN:
        jj_consume_token(OP_BLEDOTUN);
        break;
      case OP_BLEDOTUNDOTS:
        jj_consume_token(OP_BLEDOTUNDOTS);
        break;
      case OP_BLT:
        jj_consume_token(OP_BLT);
        break;
      case OP_BLTDOTS:
        jj_consume_token(OP_BLTDOTS);
        break;
      case OP_BLTDOTUN:
        jj_consume_token(OP_BLTDOTUN);
        break;
      case OP_BLTDOTUNDOTS:
        jj_consume_token(OP_BLTDOTUNDOTS);
        break;
      case OP_BNEDOTUN:
        jj_consume_token(OP_BNEDOTUN);
        break;
      case OP_BNEDOTUNDOTS:
        jj_consume_token(OP_BNEDOTUNDOTS);
        break;
      case OP_BR:
        jj_consume_token(OP_BR);
        break;
      case OP_BRDOTS:
        jj_consume_token(OP_BRDOTS);
        break;
      case OP_BRFALSE:
        jj_consume_token(OP_BRFALSE);
        break;
      case OP_BRFALSEDOTS:
        jj_consume_token(OP_BRFALSEDOTS);
        break;
      case OP_BRTRUE:
        jj_consume_token(OP_BRTRUE);
        break;
      case OP_BRTRUEDOTS:
        jj_consume_token(OP_BRTRUEDOTS);
        break;
      case OP_LEAVE:
        jj_consume_token(OP_LEAVE);
        break;
      case OP_LEAVEDOTS:
        jj_consume_token(OP_LEAVEDOTS);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_R() throws ParseException {
 /*@bgen(jjtree) Instr_R */
  ASTInstr_R jjtn000 = new ASTInstr_R(JJTINSTR_R);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LDCDOTR4:
        jj_consume_token(OP_LDCDOTR4);
        break;
      case OP_LDCDOTR8:
        jj_consume_token(OP_LDCDOTR8);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_I() throws ParseException {
 /*@bgen(jjtree) Instr_I */
  ASTInstr_I jjtn000 = new ASTInstr_I(JJTINSTR_I);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LDCDOTI4:
        jj_consume_token(OP_LDCDOTI4);
        break;
      case OP_LDCDOTI4DOTS:
        jj_consume_token(OP_LDCDOTI4DOTS);
        break;
      case OP_UNALIGNEDDOT:
        jj_consume_token(OP_UNALIGNEDDOT);
        break;
      case OP_LDCDOTI8:
        jj_consume_token(OP_LDCDOTI8);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_Var() throws ParseException {
 /*@bgen(jjtree) Instr_Var */
  ASTInstr_Var jjtn000 = new ASTInstr_Var(JJTINSTR_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LDARG:
        jj_consume_token(OP_LDARG);
        break;
      case OP_LDARGDOTS:
        jj_consume_token(OP_LDARGDOTS);
        break;
      case OP_LDARGA:
        jj_consume_token(OP_LDARGA);
        break;
      case OP_LDARGADOTS:
        jj_consume_token(OP_LDARGADOTS);
        break;
      case OP_LDLOC:
        jj_consume_token(OP_LDLOC);
        break;
      case OP_LDLOCDOTS:
        jj_consume_token(OP_LDLOCDOTS);
        break;
      case OP_LDLOCA:
        jj_consume_token(OP_LDLOCA);
        break;
      case OP_LDLOCADOTS:
        jj_consume_token(OP_LDLOCADOTS);
        break;
      case OP_STARG:
        jj_consume_token(OP_STARG);
        break;
      case OP_STARGDOTS:
        jj_consume_token(OP_STARGDOTS);
        break;
      case OP_STLOC:
        jj_consume_token(OP_STLOC);
        break;
      case OP_STLOCDOTS:
        jj_consume_token(OP_STLOCDOTS);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Instr_None() throws ParseException {
 /*@bgen(jjtree) Instr_None */
  ASTInstr_None jjtn000 = new ASTInstr_None(JJTINSTR_NONE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_ADD:
        jj_consume_token(OP_ADD);
        break;
      case OP_ADDDOTOVF:
        jj_consume_token(OP_ADDDOTOVF);
        break;
      case OP_ADDDOTOVFDOTUN:
        jj_consume_token(OP_ADDDOTOVFDOTUN);
        break;
      case OP_AND:
        jj_consume_token(OP_AND);
        break;
      case OP_ARGLIST:
        jj_consume_token(OP_ARGLIST);
        break;
      case OP_BREAK:
        jj_consume_token(OP_BREAK);
        break;
      case OP_CEQ:
        jj_consume_token(OP_CEQ);
        break;
      case OP_CGT:
        jj_consume_token(OP_CGT);
        break;
      case OP_CGTDOTUN:
        jj_consume_token(OP_CGTDOTUN);
        break;
      case OP_CKFINITE:
        jj_consume_token(OP_CKFINITE);
        break;
      case OP_CLT:
        jj_consume_token(OP_CLT);
        break;
      case OP_CLTDOTUN:
        jj_consume_token(OP_CLTDOTUN);
        break;
      case OP_CONVDOTI:
        jj_consume_token(OP_CONVDOTI);
        break;
      case OP_CONVDOTI1:
        jj_consume_token(OP_CONVDOTI1);
        break;
      case OP_CONVDOTI2:
        jj_consume_token(OP_CONVDOTI2);
        break;
      case OP_CONVDOTI4:
        jj_consume_token(OP_CONVDOTI4);
        break;
      case OP_CONVDOTI8:
        jj_consume_token(OP_CONVDOTI8);
        break;
      case OP_CONVDOTOVFDOTI:
        jj_consume_token(OP_CONVDOTOVFDOTI);
        break;
      case OP_CONVDOTOVFDOTIDOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTIDOTUN);
        break;
      case OP_CONVDOTOVFDOTI1:
        jj_consume_token(OP_CONVDOTOVFDOTI1);
        break;
      case OP_CONVDOTOVFDOTI1DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTI1DOTUN);
        break;
      case OP_CONVDOTOVFDOTI2:
        jj_consume_token(OP_CONVDOTOVFDOTI2);
        break;
      case OP_CONVDOTOVFDOTI2DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTI2DOTUN);
        break;
      case OP_CONVDOTOVFDOTI4:
        jj_consume_token(OP_CONVDOTOVFDOTI4);
        break;
      case OP_CONVDOTOVFDOTI4DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTI4DOTUN);
        break;
      case OP_CONVDOTOVFDOTI8:
        jj_consume_token(OP_CONVDOTOVFDOTI8);
        break;
      case OP_CONVDOTOVFDOTI8DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTI8DOTUN);
        break;
      case OP_CONVDOTOVFDOTU:
        jj_consume_token(OP_CONVDOTOVFDOTU);
        break;
      case OP_CONVDOTOVFDOTUDOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTUDOTUN);
        break;
      case OP_CONVDOTOVFDOTU1:
        jj_consume_token(OP_CONVDOTOVFDOTU1);
        break;
      case OP_CONVDOTOVFDOTU1DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTU1DOTUN);
        break;
      case OP_CONVDOTOVFDOTU2:
        jj_consume_token(OP_CONVDOTOVFDOTU2);
        break;
      case OP_CONVDOTOVFDOTU2DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTU2DOTUN);
        break;
      case OP_CONVDOTOVFDOTU4:
        jj_consume_token(OP_CONVDOTOVFDOTU4);
        break;
      case OP_CONVDOTOVFDOTU4DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTU4DOTUN);
        break;
      case OP_CONVDOTOVFDOTU8:
        jj_consume_token(OP_CONVDOTOVFDOTU8);
        break;
      case OP_CONVDOTOVFDOTU8DOTUN:
        jj_consume_token(OP_CONVDOTOVFDOTU8DOTUN);
        break;
      case OP_CONVDOTRDOTUN:
        jj_consume_token(OP_CONVDOTRDOTUN);
        break;
      case OP_CONVDOTR4:
        jj_consume_token(OP_CONVDOTR4);
        break;
      case OP_CONVDOTR8:
        jj_consume_token(OP_CONVDOTR8);
        break;
      case OP_CONVDOTU:
        jj_consume_token(OP_CONVDOTU);
        break;
      case OP_CONVDOTU1:
        jj_consume_token(OP_CONVDOTU1);
        break;
      case OP_CONVDOTU2:
        jj_consume_token(OP_CONVDOTU2);
        break;
      case OP_CONVDOTU4:
        jj_consume_token(OP_CONVDOTU4);
        break;
      case OP_CONVDOTU8:
        jj_consume_token(OP_CONVDOTU8);
        break;
      case OP_CPBLK:
        jj_consume_token(OP_CPBLK);
        break;
      case OP_DIV:
        jj_consume_token(OP_DIV);
        break;
      case OP_DIVDOTUN:
        jj_consume_token(OP_DIVDOTUN);
        break;
      case OP_DUP:
        jj_consume_token(OP_DUP);
        break;
      case OP_ENDFAULT:
        jj_consume_token(OP_ENDFAULT);
        break;
      case OP_ENDFILTER:
        jj_consume_token(OP_ENDFILTER);
        break;
      case OP_ENDFINALLY:
        jj_consume_token(OP_ENDFINALLY);
        break;
      case OP_INITBLK:
        jj_consume_token(OP_INITBLK);
        break;
      case OP_LDARGDOT0:
        jj_consume_token(OP_LDARGDOT0);
        break;
      case OP_LDARGDOT1:
        jj_consume_token(OP_LDARGDOT1);
        break;
      case OP_LDARGDOT2:
        jj_consume_token(OP_LDARGDOT2);
        break;
      case OP_LDARGDOT3:
        jj_consume_token(OP_LDARGDOT3);
        break;
      case OP_LDCDOTI4DOT0:
        jj_consume_token(OP_LDCDOTI4DOT0);
        break;
      case OP_LDCDOTI4DOT1:
        jj_consume_token(OP_LDCDOTI4DOT1);
        break;
      case OP_LDCDOTI4DOT2:
        jj_consume_token(OP_LDCDOTI4DOT2);
        break;
      case OP_LDCDOTI4DOT3:
        jj_consume_token(OP_LDCDOTI4DOT3);
        break;
      case OP_LDCDOTI4DOT4:
        jj_consume_token(OP_LDCDOTI4DOT4);
        break;
      case OP_LDCDOTI4DOT5:
        jj_consume_token(OP_LDCDOTI4DOT5);
        break;
      case OP_LDCDOTI4DOT6:
        jj_consume_token(OP_LDCDOTI4DOT6);
        break;
      case OP_LDCDOTI4DOT7:
        jj_consume_token(OP_LDCDOTI4DOT7);
        break;
      case OP_LDCDOTI4DOT8:
        jj_consume_token(OP_LDCDOTI4DOT8);
        break;
      case OP_LDCDOTI4DOTM1:
        jj_consume_token(OP_LDCDOTI4DOTM1);
        break;
      case OP_LDELEMDOTI:
        jj_consume_token(OP_LDELEMDOTI);
        break;
      case OP_LDELEMDOTI1:
        jj_consume_token(OP_LDELEMDOTI1);
        break;
      case OP_LDELEMDOTI2:
        jj_consume_token(OP_LDELEMDOTI2);
        break;
      case OP_LDELEMDOTI4:
        jj_consume_token(OP_LDELEMDOTI4);
        break;
      case OP_LDELEMDOTI8:
        jj_consume_token(OP_LDELEMDOTI8);
        break;
      case OP_LDELEMDOTR4:
        jj_consume_token(OP_LDELEMDOTR4);
        break;
      case OP_LDELEMDOTR8:
        jj_consume_token(OP_LDELEMDOTR8);
        break;
      case OP_LDELEMDOTREF:
        jj_consume_token(OP_LDELEMDOTREF);
        break;
      case OP_LDELEMDOTU1:
        jj_consume_token(OP_LDELEMDOTU1);
        break;
      case OP_LDELEMDOTU2:
        jj_consume_token(OP_LDELEMDOTU2);
        break;
      case OP_LDELEMDOTU4:
        jj_consume_token(OP_LDELEMDOTU4);
        break;
      case OP_LDINDDOTI:
        jj_consume_token(OP_LDINDDOTI);
        break;
      case OP_LDINDDOTI1:
        jj_consume_token(OP_LDINDDOTI1);
        break;
      case OP_LDINDDOTI2:
        jj_consume_token(OP_LDINDDOTI2);
        break;
      case OP_LDINDDOTI4:
        jj_consume_token(OP_LDINDDOTI4);
        break;
      case OP_LDINDDOTI8:
        jj_consume_token(OP_LDINDDOTI8);
        break;
      case OP_LDINDDOTR4:
        jj_consume_token(OP_LDINDDOTR4);
        break;
      case OP_LDINDDOTR8:
        jj_consume_token(OP_LDINDDOTR8);
        break;
      case OP_LDINDDOTREF:
        jj_consume_token(OP_LDINDDOTREF);
        break;
      case OP_LDINDDOTU1:
        jj_consume_token(OP_LDINDDOTU1);
        break;
      case OP_LDINDDOTU2:
        jj_consume_token(OP_LDINDDOTU2);
        break;
      case OP_LDINDDOTU4:
        jj_consume_token(OP_LDINDDOTU4);
        break;
      case OP_LDLEN:
        jj_consume_token(OP_LDLEN);
        break;
      case OP_LDLOCDOT0:
        jj_consume_token(OP_LDLOCDOT0);
        break;
      case OP_LDLOCDOT1:
        jj_consume_token(OP_LDLOCDOT1);
        break;
      case OP_LDLOCDOT2:
        jj_consume_token(OP_LDLOCDOT2);
        break;
      case OP_LDLOCDOT3:
        jj_consume_token(OP_LDLOCDOT3);
        break;
      case OP_LDNULL:
        jj_consume_token(OP_LDNULL);
        break;
      case OP_LOCALLOC:
        jj_consume_token(OP_LOCALLOC);
        break;
      case OP_MUL:
        jj_consume_token(OP_MUL);
        break;
      case OP_MULDOTOVF:
        jj_consume_token(OP_MULDOTOVF);
        break;
      case OP_MULDOTOVFDOTUN:
        jj_consume_token(OP_MULDOTOVFDOTUN);
        break;
      case OP_NEG:
        jj_consume_token(OP_NEG);
        break;
      case OP_NOP:
        jj_consume_token(OP_NOP);
        break;
      case OP_NOT:
        jj_consume_token(OP_NOT);
        break;
      case OP_OR:
        jj_consume_token(OP_OR);
        break;
      case OP_POP:
        jj_consume_token(OP_POP);
        break;
      case OP_READONLY:
        jj_consume_token(OP_READONLY);
        break;
      case OP_REFANYTYPE:
        jj_consume_token(OP_REFANYTYPE);
        break;
      case OP_REM:
        jj_consume_token(OP_REM);
        break;
      case OP_REMDOTUN:
        jj_consume_token(OP_REMDOTUN);
        break;
      case OP_RET:
        jj_consume_token(OP_RET);
        break;
      case OP_RETHROW:
        jj_consume_token(OP_RETHROW);
        break;
      case OP_SHL:
        jj_consume_token(OP_SHL);
        break;
      case OP_SHR:
        jj_consume_token(OP_SHR);
        break;
      case OP_SHRDOTUN:
        jj_consume_token(OP_SHRDOTUN);
        break;
      case OP_STELEMDOTI:
        jj_consume_token(OP_STELEMDOTI);
        break;
      case OP_STELEMDOTI1:
        jj_consume_token(OP_STELEMDOTI1);
        break;
      case OP_STELEMDOTI2:
        jj_consume_token(OP_STELEMDOTI2);
        break;
      case OP_STELEMDOTI4:
        jj_consume_token(OP_STELEMDOTI4);
        break;
      case OP_STELEMDOTI8:
        jj_consume_token(OP_STELEMDOTI8);
        break;
      case OP_STELEMDOTR4:
        jj_consume_token(OP_STELEMDOTR4);
        break;
      case OP_STELEMDOTR8:
        jj_consume_token(OP_STELEMDOTR8);
        break;
      case OP_STELEMDOTREF:
        jj_consume_token(OP_STELEMDOTREF);
        break;
      case OP_STINDDOTI:
        jj_consume_token(OP_STINDDOTI);
        break;
      case OP_STINDDOTI1:
        jj_consume_token(OP_STINDDOTI1);
        break;
      case OP_STINDDOTI2:
        jj_consume_token(OP_STINDDOTI2);
        break;
      case OP_STINDDOTI4:
        jj_consume_token(OP_STINDDOTI4);
        break;
      case OP_STINDDOTI8:
        jj_consume_token(OP_STINDDOTI8);
        break;
      case OP_STINDDOTR4:
        jj_consume_token(OP_STINDDOTR4);
        break;
      case OP_STINDDOTR8:
        jj_consume_token(OP_STINDDOTR8);
        break;
      case OP_STINDDOTREF:
        jj_consume_token(OP_STINDDOTREF);
        break;
      case OP_STLOCDOT0:
        jj_consume_token(OP_STLOCDOT0);
        break;
      case OP_STLOCDOT1:
        jj_consume_token(OP_STLOCDOT1);
        break;
      case OP_STLOCDOT2:
        jj_consume_token(OP_STLOCDOT2);
        break;
      case OP_STLOCDOT3:
        jj_consume_token(OP_STLOCDOT3);
        break;
      case OP_SUB:
        jj_consume_token(OP_SUB);
        break;
      case OP_SUBDOTOVF:
        jj_consume_token(OP_SUBDOTOVF);
        break;
      case OP_SUBDOTOVFDOTUN:
        jj_consume_token(OP_SUBDOTOVFDOTUN);
        break;
      case OP_TAILDOT:
        jj_consume_token(OP_TAILDOT);
        break;
      case OP_THROW:
        jj_consume_token(OP_THROW);
        break;
      case OP_VOLATILEDOT:
        jj_consume_token(OP_VOLATILEDOT);
        break;
      case OP_XOR:
        jj_consume_token(OP_XOR);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ScopeBlock() throws ParseException {
 /*@bgen(jjtree) ScopeBlock */
  ASTScopeBlock jjtn000 = new ASTScopeBlock(JJTSCOPEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFT_BRACE);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINE:
        case CUSTOM:
        case DATA:
        case ENTRYPOINT:
        case OVERRIDE:
        case PARAM:
        case EMITBYTE:
        case LOCALS:
        case MAXSTACK:
        case TRY:
        case PERMISSIONSET:
        case PERMISSION:
        case LEFT_BRACE:
        case 198:
        case 199:
        case 201:
        case 202:
        case OP_BOX:
        case OP_CASTCLASS:
        case OP_CPOBJ:
        case OP_INITOBJ:
        case OP_ISINST:
        case OP_LDELEM:
        case OP_LDELEMA:
        case OP_LDOBJ:
        case OP_MKREFANY:
        case OP_NEWARR:
        case OP_REFANYVAL:
        case OP_SIZEOF:
        case OP_STOBJ:
        case OP_UNBOX:
        case OP_UNBOXANY:
        case OP_BOXANY:
        case OP_CONSTRAINED:
        case OP_STELEM:
        case OP_LDFLD:
        case OP_LDFLDA:
        case OP_LDSFLD:
        case OP_LDSFLDA:
        case OP_STFLD:
        case OP_STSFLD:
        case OP_CALL:
        case OP_CALLVIRT:
        case OP_JMP:
        case OP_LDFTN:
        case OP_LDVIRTFTN:
        case OP_NEWOBJ:
        case OP_BEQ:
        case OP_BEQDOTS:
        case OP_BGE:
        case OP_BGEDOTS:
        case OP_BGEDOTUN:
        case OP_BGEDOTUNDOTS:
        case OP_BGT:
        case OP_BGTDOTS:
        case OP_BGTDOTUN:
        case OP_BGTDOTUNDOTS:
        case OP_BLE:
        case OP_BLEDOTS:
        case OP_BLEDOTUN:
        case OP_BLEDOTUNDOTS:
        case OP_BLT:
        case OP_BLTDOTS:
        case OP_BLTDOTUN:
        case OP_BLTDOTUNDOTS:
        case OP_BNEDOTUN:
        case OP_BNEDOTUNDOTS:
        case OP_BR:
        case OP_BRDOTS:
        case OP_BRFALSE:
        case OP_BRFALSEDOTS:
        case OP_BRTRUE:
        case OP_BRTRUEDOTS:
        case OP_LEAVE:
        case OP_LEAVEDOTS:
        case OP_LDCDOTR4:
        case OP_LDCDOTR8:
        case OP_LDCDOTI4:
        case OP_LDCDOTI8:
        case OP_LDCDOTI4DOTS:
        case OP_UNALIGNEDDOT:
        case OP_LDARG:
        case OP_LDARGDOTS:
        case OP_LDARGA:
        case OP_LDARGADOTS:
        case OP_LDLOC:
        case OP_LDLOCDOTS:
        case OP_LDLOCA:
        case OP_LDLOCADOTS:
        case OP_STARG:
        case OP_STARGDOTS:
        case OP_STLOC:
        case OP_STLOCDOTS:
        case OP_ADD:
        case OP_ADDDOTOVF:
        case OP_ADDDOTOVFDOTUN:
        case OP_AND:
        case OP_ARGLIST:
        case OP_BREAK:
        case OP_CEQ:
        case OP_CGT:
        case OP_CGTDOTUN:
        case OP_CKFINITE:
        case OP_CLT:
        case OP_CLTDOTUN:
        case OP_CONVDOTI:
        case OP_CONVDOTI1:
        case OP_CONVDOTI2:
        case OP_CONVDOTI4:
        case OP_CONVDOTI8:
        case OP_CONVDOTOVFDOTI:
        case OP_CONVDOTOVFDOTIDOTUN:
        case OP_CONVDOTOVFDOTI1:
        case OP_CONVDOTOVFDOTI1DOTUN:
        case OP_CONVDOTOVFDOTI2:
        case OP_CONVDOTOVFDOTI2DOTUN:
        case OP_CONVDOTOVFDOTI4:
        case OP_CONVDOTOVFDOTI4DOTUN:
        case OP_CONVDOTOVFDOTI8:
        case OP_CONVDOTOVFDOTI8DOTUN:
        case OP_CONVDOTOVFDOTU:
        case OP_CONVDOTOVFDOTUDOTUN:
        case OP_CONVDOTOVFDOTU1:
        case OP_CONVDOTOVFDOTU1DOTUN:
        case OP_CONVDOTOVFDOTU2:
        case OP_CONVDOTOVFDOTU2DOTUN:
        case OP_CONVDOTOVFDOTU4:
        case OP_CONVDOTOVFDOTU4DOTUN:
        case OP_CONVDOTOVFDOTU8:
        case OP_CONVDOTOVFDOTU8DOTUN:
        case OP_CONVDOTRDOTUN:
        case OP_CONVDOTR4:
        case OP_CONVDOTR8:
        case OP_CONVDOTU:
        case OP_CONVDOTU1:
        case OP_CONVDOTU2:
        case OP_CONVDOTU4:
        case OP_CONVDOTU8:
        case OP_CPBLK:
        case OP_DIV:
        case OP_DIVDOTUN:
        case OP_DUP:
        case OP_ENDFAULT:
        case OP_ENDFILTER:
        case OP_ENDFINALLY:
        case OP_INITBLK:
        case OP_LDARGDOT0:
        case OP_LDARGDOT1:
        case OP_LDARGDOT2:
        case OP_LDARGDOT3:
        case OP_LDCDOTI4DOT0:
        case OP_LDCDOTI4DOT1:
        case OP_LDCDOTI4DOT2:
        case OP_LDCDOTI4DOT3:
        case OP_LDCDOTI4DOT4:
        case OP_LDCDOTI4DOT5:
        case OP_LDCDOTI4DOT6:
        case OP_LDCDOTI4DOT7:
        case OP_LDCDOTI4DOT8:
        case OP_LDCDOTI4DOTM1:
        case OP_LDELEMDOTI:
        case OP_LDELEMDOTI1:
        case OP_LDELEMDOTI2:
        case OP_LDELEMDOTI4:
        case OP_LDELEMDOTI8:
        case OP_LDELEMDOTR4:
        case OP_LDELEMDOTR8:
        case OP_LDELEMDOTREF:
        case OP_LDELEMDOTU1:
        case OP_LDELEMDOTU2:
        case OP_LDELEMDOTU4:
        case OP_LDINDDOTI:
        case OP_LDINDDOTI1:
        case OP_LDINDDOTI2:
        case OP_LDINDDOTI4:
        case OP_LDINDDOTI8:
        case OP_LDINDDOTR4:
        case OP_LDINDDOTR8:
        case OP_LDINDDOTREF:
        case OP_LDINDDOTU1:
        case OP_LDINDDOTU2:
        case OP_LDINDDOTU4:
        case OP_LDLEN:
        case OP_LDLOCDOT0:
        case OP_LDLOCDOT1:
        case OP_LDLOCDOT2:
        case OP_LDLOCDOT3:
        case OP_LDNULL:
        case OP_LOCALLOC:
        case OP_MUL:
        case OP_MULDOTOVF:
        case OP_MULDOTOVFDOTUN:
        case OP_NEG:
        case OP_NOP:
        case OP_NOT:
        case OP_OR:
        case OP_POP:
        case OP_READONLY:
        case OP_REFANYTYPE:
        case OP_REM:
        case OP_REMDOTUN:
        case OP_RET:
        case OP_RETHROW:
        case OP_SHL:
        case OP_SHR:
        case OP_SHRDOTUN:
        case OP_STELEMDOTI:
        case OP_STELEMDOTI1:
        case OP_STELEMDOTI2:
        case OP_STELEMDOTI4:
        case OP_STELEMDOTI8:
        case OP_STELEMDOTR4:
        case OP_STELEMDOTR8:
        case OP_STELEMDOTREF:
        case OP_STINDDOTI:
        case OP_STINDDOTI1:
        case OP_STINDDOTI2:
        case OP_STINDDOTI4:
        case OP_STINDDOTI8:
        case OP_STINDDOTR4:
        case OP_STINDDOTR8:
        case OP_STINDDOTREF:
        case OP_STLOCDOT0:
        case OP_STLOCDOT1:
        case OP_STLOCDOT2:
        case OP_STLOCDOT3:
        case OP_SUB:
        case OP_SUBDOTOVF:
        case OP_SUBDOTOVFDOTUN:
        case OP_TAILDOT:
        case OP_THROW:
        case OP_VOLATILEDOT:
        case OP_XOR:
        case HEX_VALID_ID:
        case SQSTRING:
        case ID:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_13;
        }
        MethodBodyItem();
      }
      jj_consume_token(RIGHT_BRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SEHBlock() throws ParseException {
 /*@bgen(jjtree) SEHBlock */
  ASTSEHBlock jjtn000 = new ASTSEHBlock(JJTSEHBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TryBlock();
      SEHClause();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
        case FAULT:
        case FINALLY:
        case FILTER:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_14;
        }
        SEHClause();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TryBlock() throws ParseException {
 /*@bgen(jjtree) TryBlock */
  ASTTryBlock jjtn000 = new ASTTryBlock(JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2)) {
        jj_consume_token(TRY);
        DataLabel();
        jj_consume_token(TO);
        DataLabel();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRY:
          jj_consume_token(TRY);
          ScopeBlock();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SEHClause() throws ParseException {
 /*@bgen(jjtree) SEHClause */
  ASTSEHClause jjtn000 = new ASTSEHClause(JJTSEHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        jj_consume_token(CATCH);
        TypeReference();
        HandlerBlock();
        break;
      case FAULT:
        jj_consume_token(FAULT);
        HandlerBlock();
        break;
      case FILTER:
        jj_consume_token(FILTER);
        DataLabel();
        HandlerBlock();
        break;
      case FINALLY:
        jj_consume_token(FINALLY);
        HandlerBlock();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void HandlerBlock() throws ParseException {
 /*@bgen(jjtree) HandlerBlock */
  ASTHandlerBlock jjtn000 = new ASTHandlerBlock(JJTHANDLERBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HANDLER:
        jj_consume_token(HANDLER);
        DataLabel();
        jj_consume_token(TO);
        DataLabel();
        break;
      case LEFT_BRACE:
        ScopeBlock();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FieldInit() throws ParseException {
 /*@bgen(jjtree) FieldInit */
  ASTFieldInit jjtn000 = new ASTFieldInit(JJTFIELDINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_TYPE:
        jj_consume_token(BOOL_TYPE);
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case FALSE:
          jj_consume_token(FALSE);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      case BYTEARRAY:
        jj_consume_token(BYTEARRAY);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case CHAR_TYPE:
        jj_consume_token(CHAR_TYPE);
        jj_consume_token(LEFT_PAREN);
        Int32();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[62] = jj_gen;
        if (jj_2_18(3)) {
          jj_consume_token(FLOAT32);
          jj_consume_token(LEFT_PAREN);
          Float32();
          jj_consume_token(RIGHT_PAREN);
        } else if (jj_2_19(3)) {
          jj_consume_token(FLOAT64);
          jj_consume_token(LEFT_PAREN);
          Float64();
          jj_consume_token(RIGHT_PAREN);
        } else if (jj_2_20(3)) {
          jj_consume_token(FLOAT32);
          jj_consume_token(LEFT_PAREN);
          Int32();
          jj_consume_token(RIGHT_PAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOAT64:
            jj_consume_token(FLOAT64);
            jj_consume_token(LEFT_PAREN);
            Int32();
            jj_consume_token(RIGHT_PAREN);
            break;
          default:
            jj_la1[63] = jj_gen;
            if (jj_2_21(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case UNSIGNED:
                jj_consume_token(UNSIGNED);
                break;
              default:
                jj_la1[58] = jj_gen;
                ;
              }
              jj_consume_token(INT8_TYPE);
              jj_consume_token(LEFT_PAREN);
              Int32();
              jj_consume_token(RIGHT_PAREN);
            } else if (jj_2_22(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case UNSIGNED:
                jj_consume_token(UNSIGNED);
                break;
              default:
                jj_la1[59] = jj_gen;
                ;
              }
              jj_consume_token(INT16_TYPE);
              jj_consume_token(LEFT_PAREN);
              Int32();
              jj_consume_token(RIGHT_PAREN);
            } else if (jj_2_23(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case UNSIGNED:
                jj_consume_token(UNSIGNED);
                break;
              default:
                jj_la1[60] = jj_gen;
                ;
              }
              jj_consume_token(INT32_TYPE);
              jj_consume_token(LEFT_PAREN);
              Int32();
              jj_consume_token(RIGHT_PAREN);
            } else if (jj_2_24(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case UNSIGNED:
                jj_consume_token(UNSIGNED);
                break;
              default:
                jj_la1[61] = jj_gen;
                ;
              }
              jj_consume_token(INT64_TYPE);
              jj_consume_token(LEFT_PAREN);
              Int32();
              jj_consume_token(RIGHT_PAREN);
            } else if (jj_2_25(2)) {
              jj_consume_token(UINT8_TYPE);
              jj_consume_token(LEFT_PAREN);
              Int32();
              jj_consume_token(RIGHT_PAREN);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case UINT16_TYPE:
                jj_consume_token(UINT16_TYPE);
                jj_consume_token(LEFT_PAREN);
                Int32();
                jj_consume_token(RIGHT_PAREN);
                break;
              case UINT32_TYPE:
                jj_consume_token(UINT32_TYPE);
                jj_consume_token(LEFT_PAREN);
                Int32();
                jj_consume_token(RIGHT_PAREN);
                break;
              case UINT64_TYPE:
                jj_consume_token(UINT64_TYPE);
                jj_consume_token(LEFT_PAREN);
                Int32();
                jj_consume_token(RIGHT_PAREN);
                break;
              case QSTRING:
                jj_consume_token(QSTRING);
                break;
              case NULLREF:
                jj_consume_token(NULLREF);
                break;
              default:
                jj_la1[64] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodBodyItem() throws ParseException {
 /*@bgen(jjtree) MethodBodyItem */
  ASTMethodBodyItem jjtn000 = new ASTMethodBodyItem(JJTMETHODBODYITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case DATA:
        jj_consume_token(DATA);
        DataDecl();
        break;
      case EMITBYTE:
        jj_consume_token(EMITBYTE);
        Int32();
        break;
      case ENTRYPOINT:
        jj_consume_token(ENTRYPOINT);
        break;
      case LOCALS:
        jj_consume_token(LOCALS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INIT:
          jj_consume_token(INIT);
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        jj_consume_token(LEFT_PAREN);
        LocalsSignature();
        jj_consume_token(RIGHT_PAREN);
        break;
      case MAXSTACK:
        jj_consume_token(MAXSTACK);
        Int32();
        break;
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_26(2)) {
          jj_consume_token(OVERRIDE);
          jj_consume_token(METHOD_TYPE);
          CallConv();
          Type();
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
          MethodName();
          GenArity();
          jj_consume_token(LEFT_PAREN);
          Parameters();
          jj_consume_token(RIGHT_PAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OVERRIDE:
            jj_consume_token(OVERRIDE);
            TypeSpec();
            jj_consume_token(DOUBLE_COLON);
            MethodName();
            break;
          default:
            jj_la1[68] = jj_gen;
            if (jj_2_27(2)) {
              jj_consume_token(PARAM);
              jj_consume_token(LEFT_BRACKET);
              Int32();
              jj_consume_token(RIGHT_BRACKET);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EQUALS:
                jj_consume_token(EQUALS);
                FieldInit();
                break;
              default:
                jj_la1[66] = jj_gen;
                ;
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case PARAM:
                jj_consume_token(PARAM);
                jj_consume_token(TYPE);
                jj_consume_token(LEFT_BRACKET);
                Int32();
                jj_consume_token(RIGHT_BRACKET);
                break;
              case LINE:
                ExternSourceDecl();
                break;
              case 198:
              case 199:
              case 201:
              case 202:
              case OP_BOX:
              case OP_CASTCLASS:
              case OP_CPOBJ:
              case OP_INITOBJ:
              case OP_ISINST:
              case OP_LDELEM:
              case OP_LDELEMA:
              case OP_LDOBJ:
              case OP_MKREFANY:
              case OP_NEWARR:
              case OP_REFANYVAL:
              case OP_SIZEOF:
              case OP_STOBJ:
              case OP_UNBOX:
              case OP_UNBOXANY:
              case OP_BOXANY:
              case OP_CONSTRAINED:
              case OP_STELEM:
              case OP_LDFLD:
              case OP_LDFLDA:
              case OP_LDSFLD:
              case OP_LDSFLDA:
              case OP_STFLD:
              case OP_STSFLD:
              case OP_CALL:
              case OP_CALLVIRT:
              case OP_JMP:
              case OP_LDFTN:
              case OP_LDVIRTFTN:
              case OP_NEWOBJ:
              case OP_BEQ:
              case OP_BEQDOTS:
              case OP_BGE:
              case OP_BGEDOTS:
              case OP_BGEDOTUN:
              case OP_BGEDOTUNDOTS:
              case OP_BGT:
              case OP_BGTDOTS:
              case OP_BGTDOTUN:
              case OP_BGTDOTUNDOTS:
              case OP_BLE:
              case OP_BLEDOTS:
              case OP_BLEDOTUN:
              case OP_BLEDOTUNDOTS:
              case OP_BLT:
              case OP_BLTDOTS:
              case OP_BLTDOTUN:
              case OP_BLTDOTUNDOTS:
              case OP_BNEDOTUN:
              case OP_BNEDOTUNDOTS:
              case OP_BR:
              case OP_BRDOTS:
              case OP_BRFALSE:
              case OP_BRFALSEDOTS:
              case OP_BRTRUE:
              case OP_BRTRUEDOTS:
              case OP_LEAVE:
              case OP_LEAVEDOTS:
              case OP_LDCDOTR4:
              case OP_LDCDOTR8:
              case OP_LDCDOTI4:
              case OP_LDCDOTI8:
              case OP_LDCDOTI4DOTS:
              case OP_UNALIGNEDDOT:
              case OP_LDARG:
              case OP_LDARGDOTS:
              case OP_LDARGA:
              case OP_LDARGADOTS:
              case OP_LDLOC:
              case OP_LDLOCDOTS:
              case OP_LDLOCA:
              case OP_LDLOCADOTS:
              case OP_STARG:
              case OP_STARGDOTS:
              case OP_STLOC:
              case OP_STLOCDOTS:
              case OP_ADD:
              case OP_ADDDOTOVF:
              case OP_ADDDOTOVFDOTUN:
              case OP_AND:
              case OP_ARGLIST:
              case OP_BREAK:
              case OP_CEQ:
              case OP_CGT:
              case OP_CGTDOTUN:
              case OP_CKFINITE:
              case OP_CLT:
              case OP_CLTDOTUN:
              case OP_CONVDOTI:
              case OP_CONVDOTI1:
              case OP_CONVDOTI2:
              case OP_CONVDOTI4:
              case OP_CONVDOTI8:
              case OP_CONVDOTOVFDOTI:
              case OP_CONVDOTOVFDOTIDOTUN:
              case OP_CONVDOTOVFDOTI1:
              case OP_CONVDOTOVFDOTI1DOTUN:
              case OP_CONVDOTOVFDOTI2:
              case OP_CONVDOTOVFDOTI2DOTUN:
              case OP_CONVDOTOVFDOTI4:
              case OP_CONVDOTOVFDOTI4DOTUN:
              case OP_CONVDOTOVFDOTI8:
              case OP_CONVDOTOVFDOTI8DOTUN:
              case OP_CONVDOTOVFDOTU:
              case OP_CONVDOTOVFDOTUDOTUN:
              case OP_CONVDOTOVFDOTU1:
              case OP_CONVDOTOVFDOTU1DOTUN:
              case OP_CONVDOTOVFDOTU2:
              case OP_CONVDOTOVFDOTU2DOTUN:
              case OP_CONVDOTOVFDOTU4:
              case OP_CONVDOTOVFDOTU4DOTUN:
              case OP_CONVDOTOVFDOTU8:
              case OP_CONVDOTOVFDOTU8DOTUN:
              case OP_CONVDOTRDOTUN:
              case OP_CONVDOTR4:
              case OP_CONVDOTR8:
              case OP_CONVDOTU:
              case OP_CONVDOTU1:
              case OP_CONVDOTU2:
              case OP_CONVDOTU4:
              case OP_CONVDOTU8:
              case OP_CPBLK:
              case OP_DIV:
              case OP_DIVDOTUN:
              case OP_DUP:
              case OP_ENDFAULT:
              case OP_ENDFILTER:
              case OP_ENDFINALLY:
              case OP_INITBLK:
              case OP_LDARGDOT0:
              case OP_LDARGDOT1:
              case OP_LDARGDOT2:
              case OP_LDARGDOT3:
              case OP_LDCDOTI4DOT0:
              case OP_LDCDOTI4DOT1:
              case OP_LDCDOTI4DOT2:
              case OP_LDCDOTI4DOT3:
              case OP_LDCDOTI4DOT4:
              case OP_LDCDOTI4DOT5:
              case OP_LDCDOTI4DOT6:
              case OP_LDCDOTI4DOT7:
              case OP_LDCDOTI4DOT8:
              case OP_LDCDOTI4DOTM1:
              case OP_LDELEMDOTI:
              case OP_LDELEMDOTI1:
              case OP_LDELEMDOTI2:
              case OP_LDELEMDOTI4:
              case OP_LDELEMDOTI8:
              case OP_LDELEMDOTR4:
              case OP_LDELEMDOTR8:
              case OP_LDELEMDOTREF:
              case OP_LDELEMDOTU1:
              case OP_LDELEMDOTU2:
              case OP_LDELEMDOTU4:
              case OP_LDINDDOTI:
              case OP_LDINDDOTI1:
              case OP_LDINDDOTI2:
              case OP_LDINDDOTI4:
              case OP_LDINDDOTI8:
              case OP_LDINDDOTR4:
              case OP_LDINDDOTR8:
              case OP_LDINDDOTREF:
              case OP_LDINDDOTU1:
              case OP_LDINDDOTU2:
              case OP_LDINDDOTU4:
              case OP_LDLEN:
              case OP_LDLOCDOT0:
              case OP_LDLOCDOT1:
              case OP_LDLOCDOT2:
              case OP_LDLOCDOT3:
              case OP_LDNULL:
              case OP_LOCALLOC:
              case OP_MUL:
              case OP_MULDOTOVF:
              case OP_MULDOTOVFDOTUN:
              case OP_NEG:
              case OP_NOP:
              case OP_NOT:
              case OP_OR:
              case OP_POP:
              case OP_READONLY:
              case OP_REFANYTYPE:
              case OP_REM:
              case OP_REMDOTUN:
              case OP_RET:
              case OP_RETHROW:
              case OP_SHL:
              case OP_SHR:
              case OP_SHRDOTUN:
              case OP_STELEMDOTI:
              case OP_STELEMDOTI1:
              case OP_STELEMDOTI2:
              case OP_STELEMDOTI4:
              case OP_STELEMDOTI8:
              case OP_STELEMDOTR4:
              case OP_STELEMDOTR8:
              case OP_STELEMDOTREF:
              case OP_STINDDOTI:
              case OP_STINDDOTI1:
              case OP_STINDDOTI2:
              case OP_STINDDOTI4:
              case OP_STINDDOTI8:
              case OP_STINDDOTR4:
              case OP_STINDDOTR8:
              case OP_STINDDOTREF:
              case OP_STLOCDOT0:
              case OP_STLOCDOT1:
              case OP_STLOCDOT2:
              case OP_STLOCDOT3:
              case OP_SUB:
              case OP_SUBDOTOVF:
              case OP_SUBDOTOVFDOTUN:
              case OP_TAILDOT:
              case OP_THROW:
              case OP_VOLATILEDOT:
              case OP_XOR:
                Instr();
                break;
              case HEX_VALID_ID:
              case SQSTRING:
              case ID:
                Id();
                jj_consume_token(COLON);
                break;
              case LEFT_BRACE:
                ScopeBlock();
                break;
              case PERMISSIONSET:
              case PERMISSION:
                SecurityDecl();
                break;
              case TRY:
                SEHBlock();
                break;
              default:
                jj_la1[69] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodHeader() throws ParseException {
 /*@bgen(jjtree) MethodHeader */
  ASTMethodHeader jjtn000 = new ASTMethodHeader(JJTMETHODHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case ABSTRACT:
        case ASSEMBLY_TYPE:
        case FAMANDASSEM:
        case FAMILY:
        case FAMORASSEM:
        case RTSPECIALNAME:
        case SPECIALNAME:
        case COMPILERCONTROLLED:
        case FINAL:
        case NEWSLOT:
        case PINVOKEIMPL:
        case HIDEBYSIG:
        case STATIC:
        case VIRTUAL:
        case STRICT:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_15;
        }
        MethAttr();
      }
      CallConv();
      Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MARSHAL:
        jj_consume_token(MARSHAL);
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT32:
        case FLOAT64:
        case AS:
        case BOOL_TYPE:
        case INT8_TYPE:
        case INT16_TYPE:
        case INT32_TYPE:
        case INT64_TYPE:
        case UNSIGNED:
        case INT_TYPE:
        case METHOD_TYPE:
        case LPSTR:
        case LPWSTR:
        case BYVALSTR:
        case CUSTOM_TYPE:
        case FIXED:
        case LPSTRUCT:
        case LPTSTR:
        case STRUCT:
        case LEFT_BRACKET:
          NativeType();
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      MethodName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        GenPars();
        jj_consume_token(GREATER_THAN);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(LEFT_PAREN);
      Parameters();
      jj_consume_token(RIGHT_PAREN);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNMANAGED:
        case CIL:
        case FORWARDREF:
        case INTERNALCALL:
        case MANAGED:
        case NOINLINING:
        case RUNTIME:
        case SYNCHRONIZED:
        case NATIVE:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_16;
        }
        ImplAttr();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PinvAttr() throws ParseException {
 /*@bgen(jjtree) PinvAttr */
  ASTPinvAttr jjtn000 = new ASTPinvAttr(JJTPINVATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANSI:
        jj_consume_token(ANSI);
        break;
      case AUTOCHAR:
        jj_consume_token(AUTOCHAR);
        break;
      case CDECL:
        jj_consume_token(CDECL);
        break;
      case FASTCALL:
        jj_consume_token(FASTCALL);
        break;
      case STDCALL:
        jj_consume_token(STDCALL);
        break;
      case THISCALL:
        jj_consume_token(THISCALL);
        break;
      case UNICODE:
        jj_consume_token(UNICODE);
        break;
      case PLATFORMAPI:
        jj_consume_token(PLATFORMAPI);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethAttr() throws ParseException {
 /*@bgen(jjtree) MethAttr */
  ASTMethAttr jjtn000 = new ASTMethAttr(JJTMETHATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case ASSEMBLY_TYPE:
        jj_consume_token(ASSEMBLY_TYPE);
        break;
      case COMPILERCONTROLLED:
        jj_consume_token(COMPILERCONTROLLED);
        break;
      case FAMANDASSEM:
        jj_consume_token(FAMANDASSEM);
        break;
      case FAMILY:
        jj_consume_token(FAMILY);
        break;
      case FAMORASSEM:
        jj_consume_token(FAMORASSEM);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case HIDEBYSIG:
        jj_consume_token(HIDEBYSIG);
        break;
      case NEWSLOT:
        jj_consume_token(NEWSLOT);
        break;
      case PINVOKEIMPL:
        jj_consume_token(PINVOKEIMPL);
        jj_consume_token(LEFT_PAREN);
        jj_consume_token(QSTRING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          jj_consume_token(QSTRING);
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ANSI:
          case AUTOCHAR:
          case UNICODE:
          case CDECL:
          case FASTCALL:
          case STDCALL:
          case THISCALL:
          case PLATFORMAPI:
            ;
            break;
          default:
            jj_la1[77] = jj_gen;
            break label_17;
          }
          PinvAttr();
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case RTSPECIALNAME:
        jj_consume_token(RTSPECIALNAME);
        break;
      case SPECIALNAME:
        jj_consume_token(SPECIALNAME);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
        break;
      case STRICT:
        jj_consume_token(STRICT);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ImplAttr() throws ParseException {
 /*@bgen(jjtree) ImplAttr */
  ASTImplAttr jjtn000 = new ASTImplAttr(JJTIMPLATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CIL:
        jj_consume_token(CIL);
        break;
      case FORWARDREF:
        jj_consume_token(FORWARDREF);
        break;
      case INTERNALCALL:
        jj_consume_token(INTERNALCALL);
        break;
      case MANAGED:
        jj_consume_token(MANAGED);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case NOINLINING:
        jj_consume_token(NOINLINING);
        break;
      case RUNTIME:
        jj_consume_token(RUNTIME);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case UNMANAGED:
        jj_consume_token(UNMANAGED);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FieldDecl() throws ParseException {
 /*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        Int32();
        jj_consume_token(RIGHT_BRACKET);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case ASSEMBLY_TYPE:
        case FAMANDASSEM:
        case FAMILY:
        case FAMORASSEM:
        case RTSPECIALNAME:
        case SPECIALNAME:
        case MARSHAL:
        case COMPILERCONTROLLED:
        case STATIC:
        case INITONLY:
        case LITERAL:
        case NOTSERIALIZED:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_18;
        }
        FieldAttr();
      }
      Type();
      Id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
      case EQUALS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          jj_consume_token(EQUALS);
          FieldInit();
          break;
        case AT:
          jj_consume_token(AT);
          DataLabel();
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FieldAttr() throws ParseException {
 /*@bgen(jjtree) FieldAttr */
  ASTFieldAttr jjtn000 = new ASTFieldAttr(JJTFIELDATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSEMBLY_TYPE:
        jj_consume_token(ASSEMBLY_TYPE);
        break;
      case FAMANDASSEM:
        jj_consume_token(FAMANDASSEM);
        break;
      case FAMILY:
        jj_consume_token(FAMILY);
        break;
      case FAMORASSEM:
        jj_consume_token(FAMORASSEM);
        break;
      case INITONLY:
        jj_consume_token(INITONLY);
        break;
      case LITERAL:
        jj_consume_token(LITERAL);
        break;
      case MARSHAL:
        jj_consume_token(MARSHAL);
        jj_consume_token(LEFT_PAREN);
        NativeType();
        jj_consume_token(RIGHT_PAREN);
        break;
      case NOTSERIALIZED:
        jj_consume_token(NOTSERIALIZED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case COMPILERCONTROLLED:
        jj_consume_token(COMPILERCONTROLLED);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case RTSPECIALNAME:
        jj_consume_token(RTSPECIALNAME);
        break;
      case SPECIALNAME:
        jj_consume_token(SPECIALNAME);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DataDecl() throws ParseException {
 /*@bgen(jjtree) DataDecl */
  ASTDataDecl jjtn000 = new ASTDataDecl(JJTDATADECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CIL:
        jj_consume_token(CIL);
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEX_VALID_ID:
      case SQSTRING:
      case ID:
        DataLabel();
        jj_consume_token(EQUALS);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      DdBody();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DdBody() throws ParseException {
 /*@bgen(jjtree) DdBody */
  ASTDdBody jjtn000 = new ASTDdBody(JJTDDBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT32:
      case FLOAT64:
      case CHAR_TYPE:
      case INT8_TYPE:
      case INT16_TYPE:
      case INT32_TYPE:
      case INT64_TYPE:
      case BYTEARRAY:
      case AMP:
        DdItem();
        break;
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        DdItemList();
        jj_consume_token(RIGHT_BRACE);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DdItemList() throws ParseException {
 /*@bgen(jjtree) DdItemList */
  ASTDdItemList jjtn000 = new ASTDdItemList(JJTDDITEMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DdItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        DdItemList();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DdItem() throws ParseException {
 /*@bgen(jjtree) DdItem */
  ASTDdItem jjtn000 = new ASTDdItem(JJTDDITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
        jj_consume_token(AMP);
        jj_consume_token(LEFT_PAREN);
        Id();
        jj_consume_token(RIGHT_PAREN);
        break;
      case BYTEARRAY:
        jj_consume_token(BYTEARRAY);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case CHAR_TYPE:
        jj_consume_token(CHAR_TYPE);
        jj_consume_token(ASTERISK);
        jj_consume_token(LEFT_PAREN);
        jj_consume_token(QSTRING);
        jj_consume_token(RIGHT_PAREN);
        break;
      case FLOAT32:
        jj_consume_token(FLOAT32);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Float64();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        break;
      case FLOAT64:
        jj_consume_token(FLOAT64);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Float64();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
      case INT8_TYPE:
        jj_consume_token(INT8_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Int32();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[94] = jj_gen;
          ;
        }
        break;
      case INT16_TYPE:
        jj_consume_token(INT16_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Int32();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[96] = jj_gen;
          ;
        }
        break;
      case INT32_TYPE:
        jj_consume_token(INT32_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Int32();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[97] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[98] = jj_gen;
          ;
        }
        break;
      case INT64_TYPE:
        jj_consume_token(INT64_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          jj_consume_token(LEFT_PAREN);
          Int32();
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[99] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          Int32();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[100] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CustomDecl() throws ParseException {
 /*@bgen(jjtree) CustomDecl */
  ASTCustomDecl jjtn000 = new ASTCustomDecl(JJTCUSTOMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Ctor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Ctor() throws ParseException {
 /*@bgen(jjtree) Ctor */
  ASTCtor jjtn000 = new ASTCtor(JJTCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        TypeReference();
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      CallConv();
      Type();
      if (jj_2_28(2)) {
        TypeSpec();
        jj_consume_token(DOUBLE_COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTOR:
        jj_consume_token(CTOR);
        break;
      case CCTOR:
        jj_consume_token(CCTOR);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LEFT_PAREN);
      Parameters();
      jj_consume_token(RIGHT_PAREN);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void ExportAttr() throws ParseException {
 /*@bgen(jjtree) ExportAttr */
  ASTExportAttr jjtn000 = new ASTExportAttr(JJTEXPORTATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case ABSTRACT:
        case ANSI:
        case AUTO:
        case AUTOCHAR:
        case BEFOREFIELDINIT:
        case EXPLICIT:
        case INTERFACE:
        case NESTED:
        case RTSPECIALNAME:
        case SEALED:
        case SEQUENTIAL:
        case SERIALIZABLE:
        case SPECIALNAME:
        case UNICODE:
        case IMPORT:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_19;
        }
        ClassAttr();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExternClassDecl() throws ParseException {
 /*@bgen(jjtree) ExternClassDecl */
  ASTExternClassDecl jjtn000 = new ASTExternClassDecl(JJTEXTERNCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILE:
        jj_consume_token(FILE);
        DottedName();
        break;
      default:
        jj_la1[106] = jj_gen;
        if (jj_2_29(2)) {
          jj_consume_token(CLASS);
          jj_consume_token(EXTERN);
          DottedName();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
            jj_consume_token(CLASS);
            Int32();
            break;
          case CUSTOM:
            jj_consume_token(CUSTOM);
            CustomDecl();
            break;
          default:
            jj_la1[107] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassHeader() throws ParseException {
 /*@bgen(jjtree) ClassHeader */
    ASTClassHeader jjtn000 = new ASTClassHeader(JJTCLASSHEADER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token name;
    try {
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case ABSTRACT:
        case ANSI:
        case AUTO:
        case AUTOCHAR:
        case BEFOREFIELDINIT:
        case EXPLICIT:
        case INTERFACE:
        case NESTED:
        case RTSPECIALNAME:
        case SEALED:
        case SEQUENTIAL:
        case SERIALIZABLE:
        case SPECIALNAME:
        case UNICODE:
        case IMPORT:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_20;
        }
        ClassAttr();
      }
                     ASTClassName jjtn001 = new ASTClassName(JJTCLASSNAME);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        DottedName();
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        GenPars();
        jj_consume_token(GREATER_THAN);
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        TypeSpec();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        TypeSpec();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[111] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          TypeSpec();
        }
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenPars() throws ParseException {
 /*@bgen(jjtree) GenPars */
  ASTGenPars jjtn000 = new ASTGenPars(JJTGENPARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      GenPar();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[113] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        GenPar();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenPar() throws ParseException {
 /*@bgen(jjtree) GenPar */
  ASTGenPar jjtn000 = new ASTGenPar(JJTGENPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CTOR:
        case CLASS_TYPE:
        case VALUETYPE:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_23;
        }
        GenParAttribs();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT32:
        case FLOAT64:
        case BOOL_TYPE:
        case CHAR_TYPE:
        case CLASS_TYPE:
        case UINT8_TYPE:
        case UINT16_TYPE:
        case UINT32_TYPE:
        case UINT64_TYPE:
        case INT8_TYPE:
        case INT16_TYPE:
        case INT32_TYPE:
        case INT64_TYPE:
        case NATIVE:
        case UNSIGNED:
        case OBJECT_TYPE:
        case STRING_TYPE:
        case TYPEDREF:
        case VALUETYPE:
        case VOID_TYPE:
        case METHOD_TYPE:
        case NOT:
        case DOUBLENOT:
        case LEFT_BRACKET:
        case HEX_VALID_ID:
        case SQSTRING:
        case DOTTED_NAME:
        case ID:
          GenConstraints();
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
      Id();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenParAttribs() throws ParseException {
 /*@bgen(jjtree) GenParAttribs */
  ASTGenParAttribs jjtn000 = new ASTGenParAttribs(JJTGENPARATTRIBS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case CLASS_TYPE:
        jj_consume_token(CLASS_TYPE);
        break;
      case VALUETYPE:
        jj_consume_token(VALUETYPE);
        break;
      case CTOR:
        jj_consume_token(CTOR);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenConstraints() throws ParseException {
 /*@bgen(jjtree) GenConstraints */
  ASTGenConstraints jjtn000 = new ASTGenConstraints(JJTGENCONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeSpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        GenConstraints();
        break;
      default:
        jj_la1[118] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassAttr() throws ParseException {
 /*@bgen(jjtree) ClassAttr */
  ASTClassAttr jjtn000 = new ASTClassAttr(JJTCLASSATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case ANSI:
        jj_consume_token(ANSI);
        break;
      case AUTO:
        jj_consume_token(AUTO);
        break;
      case AUTOCHAR:
        jj_consume_token(AUTOCHAR);
        break;
      case BEFOREFIELDINIT:
        jj_consume_token(BEFOREFIELDINIT);
        break;
      case EXPLICIT:
        jj_consume_token(EXPLICIT);
        break;
      case INTERFACE:
        jj_consume_token(INTERFACE);
        break;
      default:
        jj_la1[119] = jj_gen;
        if (jj_2_30(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(ASSEMBLY_TYPE);
        } else if (jj_2_31(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(FAMANDASSEM);
        } else if (jj_2_32(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(FAMILY);
        } else if (jj_2_33(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(FAMORASSEM);
        } else if (jj_2_34(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(PRIVATE);
        } else if (jj_2_35(2)) {
          jj_consume_token(NESTED);
          jj_consume_token(PUBLIC);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case RTSPECIALNAME:
            jj_consume_token(RTSPECIALNAME);
            break;
          case SEALED:
            jj_consume_token(SEALED);
            break;
          case SEQUENTIAL:
            jj_consume_token(SEQUENTIAL);
            break;
          case SERIALIZABLE:
            jj_consume_token(SERIALIZABLE);
            break;
          case SPECIALNAME:
            jj_consume_token(SPECIALNAME);
            break;
          case UNICODE:
            jj_consume_token(UNICODE);
            break;
          case IMPORT:
            jj_consume_token(IMPORT);
            break;
          default:
            jj_la1[120] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ClassMember() throws ParseException {
 /*@bgen(jjtree) ClassMember */
  ASTClassMember jjtn000 = new ASTClassMember(JJTCLASSMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      ASTClass jjtn001 = new ASTClass(JJTCLASS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(CLASS);
          ClassHeader();
          jj_consume_token(LEFT_BRACE);
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LINE:
            case CLASS:
            case CUSTOM:
            case DATA:
            case FIELD:
            case METHOD:
            case EVENT:
            case OVERRIDE:
            case PACK:
            case PARAM:
            case PROPERTY:
            case SIZE:
            case PERMISSIONSET:
            case PERMISSION:
              ;
              break;
            default:
              jj_la1[121] = jj_gen;
              break label_24;
            }
            ClassMember();
          }
          jj_consume_token(RIGHT_BRACE);
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case DATA:
        jj_consume_token(DATA);
        DataDecl();
        break;
      case EVENT:
        jj_consume_token(EVENT);
        EventHeader();
        jj_consume_token(LEFT_BRACE);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE:
          case CUSTOM:
          case OTHER:
          case ADDON:
          case FIRE:
          case REMOVEON:
            ;
            break;
          default:
            jj_la1[122] = jj_gen;
            break label_25;
          }
          EventMember();
        }
        jj_consume_token(RIGHT_BRACE);
        break;
      case FIELD:
        jj_consume_token(FIELD);
        FieldDecl();
        break;
      case METHOD:
        jj_consume_token(METHOD);
        MethodHeader();
        jj_consume_token(LEFT_BRACE);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINE:
          case CUSTOM:
          case DATA:
          case ENTRYPOINT:
          case OVERRIDE:
          case PARAM:
          case EMITBYTE:
          case LOCALS:
          case MAXSTACK:
          case TRY:
          case PERMISSIONSET:
          case PERMISSION:
          case LEFT_BRACE:
          case 198:
          case 199:
          case 201:
          case 202:
          case OP_BOX:
          case OP_CASTCLASS:
          case OP_CPOBJ:
          case OP_INITOBJ:
          case OP_ISINST:
          case OP_LDELEM:
          case OP_LDELEMA:
          case OP_LDOBJ:
          case OP_MKREFANY:
          case OP_NEWARR:
          case OP_REFANYVAL:
          case OP_SIZEOF:
          case OP_STOBJ:
          case OP_UNBOX:
          case OP_UNBOXANY:
          case OP_BOXANY:
          case OP_CONSTRAINED:
          case OP_STELEM:
          case OP_LDFLD:
          case OP_LDFLDA:
          case OP_LDSFLD:
          case OP_LDSFLDA:
          case OP_STFLD:
          case OP_STSFLD:
          case OP_CALL:
          case OP_CALLVIRT:
          case OP_JMP:
          case OP_LDFTN:
          case OP_LDVIRTFTN:
          case OP_NEWOBJ:
          case OP_BEQ:
          case OP_BEQDOTS:
          case OP_BGE:
          case OP_BGEDOTS:
          case OP_BGEDOTUN:
          case OP_BGEDOTUNDOTS:
          case OP_BGT:
          case OP_BGTDOTS:
          case OP_BGTDOTUN:
          case OP_BGTDOTUNDOTS:
          case OP_BLE:
          case OP_BLEDOTS:
          case OP_BLEDOTUN:
          case OP_BLEDOTUNDOTS:
          case OP_BLT:
          case OP_BLTDOTS:
          case OP_BLTDOTUN:
          case OP_BLTDOTUNDOTS:
          case OP_BNEDOTUN:
          case OP_BNEDOTUNDOTS:
          case OP_BR:
          case OP_BRDOTS:
          case OP_BRFALSE:
          case OP_BRFALSEDOTS:
          case OP_BRTRUE:
          case OP_BRTRUEDOTS:
          case OP_LEAVE:
          case OP_LEAVEDOTS:
          case OP_LDCDOTR4:
          case OP_LDCDOTR8:
          case OP_LDCDOTI4:
          case OP_LDCDOTI8:
          case OP_LDCDOTI4DOTS:
          case OP_UNALIGNEDDOT:
          case OP_LDARG:
          case OP_LDARGDOTS:
          case OP_LDARGA:
          case OP_LDARGADOTS:
          case OP_LDLOC:
          case OP_LDLOCDOTS:
          case OP_LDLOCA:
          case OP_LDLOCADOTS:
          case OP_STARG:
          case OP_STARGDOTS:
          case OP_STLOC:
          case OP_STLOCDOTS:
          case OP_ADD:
          case OP_ADDDOTOVF:
          case OP_ADDDOTOVFDOTUN:
          case OP_AND:
          case OP_ARGLIST:
          case OP_BREAK:
          case OP_CEQ:
          case OP_CGT:
          case OP_CGTDOTUN:
          case OP_CKFINITE:
          case OP_CLT:
          case OP_CLTDOTUN:
          case OP_CONVDOTI:
          case OP_CONVDOTI1:
          case OP_CONVDOTI2:
          case OP_CONVDOTI4:
          case OP_CONVDOTI8:
          case OP_CONVDOTOVFDOTI:
          case OP_CONVDOTOVFDOTIDOTUN:
          case OP_CONVDOTOVFDOTI1:
          case OP_CONVDOTOVFDOTI1DOTUN:
          case OP_CONVDOTOVFDOTI2:
          case OP_CONVDOTOVFDOTI2DOTUN:
          case OP_CONVDOTOVFDOTI4:
          case OP_CONVDOTOVFDOTI4DOTUN:
          case OP_CONVDOTOVFDOTI8:
          case OP_CONVDOTOVFDOTI8DOTUN:
          case OP_CONVDOTOVFDOTU:
          case OP_CONVDOTOVFDOTUDOTUN:
          case OP_CONVDOTOVFDOTU1:
          case OP_CONVDOTOVFDOTU1DOTUN:
          case OP_CONVDOTOVFDOTU2:
          case OP_CONVDOTOVFDOTU2DOTUN:
          case OP_CONVDOTOVFDOTU4:
          case OP_CONVDOTOVFDOTU4DOTUN:
          case OP_CONVDOTOVFDOTU8:
          case OP_CONVDOTOVFDOTU8DOTUN:
          case OP_CONVDOTRDOTUN:
          case OP_CONVDOTR4:
          case OP_CONVDOTR8:
          case OP_CONVDOTU:
          case OP_CONVDOTU1:
          case OP_CONVDOTU2:
          case OP_CONVDOTU4:
          case OP_CONVDOTU8:
          case OP_CPBLK:
          case OP_DIV:
          case OP_DIVDOTUN:
          case OP_DUP:
          case OP_ENDFAULT:
          case OP_ENDFILTER:
          case OP_ENDFINALLY:
          case OP_INITBLK:
          case OP_LDARGDOT0:
          case OP_LDARGDOT1:
          case OP_LDARGDOT2:
          case OP_LDARGDOT3:
          case OP_LDCDOTI4DOT0:
          case OP_LDCDOTI4DOT1:
          case OP_LDCDOTI4DOT2:
          case OP_LDCDOTI4DOT3:
          case OP_LDCDOTI4DOT4:
          case OP_LDCDOTI4DOT5:
          case OP_LDCDOTI4DOT6:
          case OP_LDCDOTI4DOT7:
          case OP_LDCDOTI4DOT8:
          case OP_LDCDOTI4DOTM1:
          case OP_LDELEMDOTI:
          case OP_LDELEMDOTI1:
          case OP_LDELEMDOTI2:
          case OP_LDELEMDOTI4:
          case OP_LDELEMDOTI8:
          case OP_LDELEMDOTR4:
          case OP_LDELEMDOTR8:
          case OP_LDELEMDOTREF:
          case OP_LDELEMDOTU1:
          case OP_LDELEMDOTU2:
          case OP_LDELEMDOTU4:
          case OP_LDINDDOTI:
          case OP_LDINDDOTI1:
          case OP_LDINDDOTI2:
          case OP_LDINDDOTI4:
          case OP_LDINDDOTI8:
          case OP_LDINDDOTR4:
          case OP_LDINDDOTR8:
          case OP_LDINDDOTREF:
          case OP_LDINDDOTU1:
          case OP_LDINDDOTU2:
          case OP_LDINDDOTU4:
          case OP_LDLEN:
          case OP_LDLOCDOT0:
          case OP_LDLOCDOT1:
          case OP_LDLOCDOT2:
          case OP_LDLOCDOT3:
          case OP_LDNULL:
          case OP_LOCALLOC:
          case OP_MUL:
          case OP_MULDOTOVF:
          case OP_MULDOTOVFDOTUN:
          case OP_NEG:
          case OP_NOP:
          case OP_NOT:
          case OP_OR:
          case OP_POP:
          case OP_READONLY:
          case OP_REFANYTYPE:
          case OP_REM:
          case OP_REMDOTUN:
          case OP_RET:
          case OP_RETHROW:
          case OP_SHL:
          case OP_SHR:
          case OP_SHRDOTUN:
          case OP_STELEMDOTI:
          case OP_STELEMDOTI1:
          case OP_STELEMDOTI2:
          case OP_STELEMDOTI4:
          case OP_STELEMDOTI8:
          case OP_STELEMDOTR4:
          case OP_STELEMDOTR8:
          case OP_STELEMDOTREF:
          case OP_STINDDOTI:
          case OP_STINDDOTI1:
          case OP_STINDDOTI2:
          case OP_STINDDOTI4:
          case OP_STINDDOTI8:
          case OP_STINDDOTR4:
          case OP_STINDDOTR8:
          case OP_STINDDOTREF:
          case OP_STLOCDOT0:
          case OP_STLOCDOT1:
          case OP_STLOCDOT2:
          case OP_STLOCDOT3:
          case OP_SUB:
          case OP_SUBDOTOVF:
          case OP_SUBDOTOVFDOTUN:
          case OP_TAILDOT:
          case OP_THROW:
          case OP_VOLATILEDOT:
          case OP_XOR:
          case HEX_VALID_ID:
          case SQSTRING:
          case ID:
            ;
            break;
          default:
            jj_la1[123] = jj_gen;
            break label_26;
          }
          MethodBodyItem();
        }
        jj_consume_token(RIGHT_BRACE);
        break;
      default:
        jj_la1[125] = jj_gen;
        if (jj_2_36(2)) {
          jj_consume_token(OVERRIDE);
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
          MethodName();
          jj_consume_token(WITH);
          CallConv();
          Type();
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
          MethodName();
          jj_consume_token(LEFT_PAREN);
          Parameters();
          jj_consume_token(RIGHT_PAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OVERRIDE:
            jj_consume_token(OVERRIDE);
            jj_consume_token(METHOD_TYPE);
            CallConv();
            Type();
            TypeSpec();
            jj_consume_token(DOUBLE_COLON);
            MethodName();
            GenArity();
            jj_consume_token(LEFT_PAREN);
            Parameters();
            jj_consume_token(RIGHT_PAREN);
            jj_consume_token(WITH);
            jj_consume_token(METHOD_TYPE);
            CallConv();
            Type();
            TypeSpec();
            jj_consume_token(DOUBLE_COLON);
            MethodName();
            GenArity();
            jj_consume_token(LEFT_PAREN);
            Parameters();
            jj_consume_token(RIGHT_PAREN);
            break;
          case PACK:
            jj_consume_token(PACK);
            Int32();
            break;
          case PARAM:
            jj_consume_token(PARAM);
            jj_consume_token(TYPE);
            jj_consume_token(LEFT_BRACKET);
            Int32();
            jj_consume_token(RIGHT_BRACKET);
            break;
          case PROPERTY:
            jj_consume_token(PROPERTY);
            PropHeader();
            jj_consume_token(LEFT_BRACE);
            label_27:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LINE:
              case CUSTOM:
              case GET:
              case SET:
              case OTHER:
                ;
                break;
              default:
                jj_la1[124] = jj_gen;
                break label_27;
              }
              PropMember();
            }
            jj_consume_token(RIGHT_BRACE);
            break;
          case SIZE:
            jj_consume_token(SIZE);
            Int32();
            break;
          case LINE:
            ExternSourceDecl();
            break;
          case PERMISSIONSET:
          case PERMISSION:
            SecurityDecl();
            break;
          default:
            jj_la1[126] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenArity() throws ParseException {
 /*@bgen(jjtree) GenArity */
  ASTGenArity jjtn000 = new ASTGenArity(JJTGENARITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        jj_consume_token(LEFT_BRACKET);
        Int32();
        jj_consume_token(RIGHT_BRACKET);
        jj_consume_token(GREATER_THAN);
        break;
      default:
        jj_la1[127] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Id() -> DottedName() for interfaces from System
  final public void PropHeader() throws ParseException {
 /*@bgen(jjtree) PropHeader */
  ASTPropHeader jjtn000 = new ASTPropHeader(JJTPROPHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIALNAME:
        jj_consume_token(SPECIALNAME);
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RTSPECIALNAME:
        jj_consume_token(RTSPECIALNAME);
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      CallConv();
      Type();
      DottedName();
      jj_consume_token(LEFT_PAREN);
      Parameters();
      jj_consume_token(RIGHT_PAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropMember() throws ParseException {
 /*@bgen(jjtree) PropMember */
  ASTPropMember jjtn000 = new ASTPropMember(JJTPROPMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case GET:
        jj_consume_token(GET);
        CallConv();
        Type();
        if (jj_2_37(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case OTHER:
        jj_consume_token(OTHER);
        CallConv();
        Type();
        if (jj_2_38(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case SET:
        jj_consume_token(SET);
        CallConv();
        Type();
        if (jj_2_39(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case LINE:
        ExternSourceDecl();
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodName() throws ParseException {
 /*@bgen(jjtree) MethodName */
    ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CCTOR:
        t = jj_consume_token(CCTOR);
        break;
      case CTOR:
        t = jj_consume_token(CTOR);
        break;
      case HEX_VALID_ID:
      case SQSTRING:
      case DOTTED_NAME:
      case ID:
        DottedName();
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if(t != null) jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EventHeader() throws ParseException {
 /*@bgen(jjtree) EventHeader */
  ASTEventHeader jjtn000 = new ASTEventHeader(JJTEVENTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIALNAME:
        jj_consume_token(SPECIALNAME);
        break;
      default:
        jj_la1[132] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RTSPECIALNAME:
        jj_consume_token(RTSPECIALNAME);
        break;
      default:
        jj_la1[133] = jj_gen;
        ;
      }
      if (jj_2_40(2)) {
        TypeSpec();
      } else {
        ;
      }
      Id();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EventMember() throws ParseException {
 /*@bgen(jjtree) EventMember */
  ASTEventMember jjtn000 = new ASTEventMember(JJTEVENTMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDON:
        jj_consume_token(ADDON);
        CallConv();
        Type();
        if (jj_2_41(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case FIRE:
        jj_consume_token(FIRE);
        CallConv();
        Type();
        if (jj_2_42(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case OTHER:
        jj_consume_token(OTHER);
        CallConv();
        Type();
        if (jj_2_43(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case REMOVEON:
        jj_consume_token(REMOVEON);
        CallConv();
        Type();
        if (jj_2_44(2)) {
          TypeSpec();
          jj_consume_token(DOUBLE_COLON);
        } else {
          ;
        }
        MethodName();
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case LINE:
        ExternSourceDecl();
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AsmRefDecl() throws ParseException {
 /*@bgen(jjtree) AsmRefDecl */
  ASTAsmRefDecl jjtn000 = new ASTAsmRefDecl(JJTASMREFDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSEMBLY:
        jj_consume_token(ASSEMBLY);
        jj_consume_token(EXTERN);
        DottedName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          DottedName();
          break;
        default:
          jj_la1[135] = jj_gen;
          ;
        }
        jj_consume_token(LEFT_BRACE);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSEMBLY:
          case CUSTOM:
          case HASH:
          case CULTURE:
          case PUBLICKEY:
          case VER:
          case PUBLICKEYTOKEN:
            ;
            break;
          default:
            jj_la1[136] = jj_gen;
            break label_28;
          }
          AsmRefDecl();
        }
        jj_consume_token(RIGHT_BRACE);
        break;
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case CULTURE:
        jj_consume_token(CULTURE);
        jj_consume_token(QSTRING);
        break;
      case PUBLICKEYTOKEN:
        jj_consume_token(PUBLICKEYTOKEN);
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case PUBLICKEY:
        jj_consume_token(PUBLICKEY);
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case VER:
        jj_consume_token(VER);
        Int32();
        jj_consume_token(COLON);
        Int32();
        jj_consume_token(COLON);
        Int32();
        jj_consume_token(COLON);
        Int32();
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AsmDecl() throws ParseException {
 /*@bgen(jjtree) AsmDecl */
  ASTAsmDecl jjtn000 = new ASTAsmDecl(JJTASMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUSTOM:
        jj_consume_token(CUSTOM);
        CustomDecl();
        break;
      case HASH:
        jj_consume_token(HASH);
        jj_consume_token(ALGORITHM);
        Int32();
        break;
      case CULTURE:
        jj_consume_token(CULTURE);
        jj_consume_token(QSTRING);
        break;
      case PUBLICKEY:
        jj_consume_token(PUBLICKEY);
        jj_consume_token(EQUALS);
        jj_consume_token(LEFT_PAREN);
        Bytes();
        jj_consume_token(RIGHT_PAREN);
        break;
      case VER:
        jj_consume_token(VER);
        Int32();
        jj_consume_token(COLON);
        Int32();
        jj_consume_token(COLON);
        Int32();
        jj_consume_token(COLON);
        Int32();
        break;
      case PERMISSIONSET:
      case PERMISSION:
        SecurityDecl();
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METHOD_TYPE:
        jj_consume_token(METHOD_TYPE);
        CallConv();
        TypeBase();
        jj_consume_token(ASTERISK);
        jj_consume_token(LEFT_PAREN);
        Parameters();
        jj_consume_token(RIGHT_PAREN);
        break;
      case FLOAT32:
      case FLOAT64:
      case BOOL_TYPE:
      case CHAR_TYPE:
      case CLASS_TYPE:
      case UINT8_TYPE:
      case UINT16_TYPE:
      case UINT32_TYPE:
      case UINT64_TYPE:
      case INT8_TYPE:
      case INT16_TYPE:
      case INT32_TYPE:
      case INT64_TYPE:
      case NATIVE:
      case UNSIGNED:
      case OBJECT_TYPE:
      case STRING_TYPE:
      case TYPEDREF:
      case VALUETYPE:
      case VOID_TYPE:
      case NOT:
      case DOUBLENOT:
        TypeBase();
        label_29:
        while (true) {
          if (jj_2_45(4)) {
            ;
          } else {
            break label_29;
          }
          TypeBase2();
        }
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//might need to make the bottom half one or more
  final public void TypeBase() throws ParseException {
 /*@bgen(jjtree) TypeBase */
  ASTTypeBase jjtn000 = new ASTTypeBase(JJTTYPEBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_46(2)) {
        jj_consume_token(NOT);
        Int32();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          Id();
          break;
        default:
          jj_la1[140] = jj_gen;
          if (jj_2_47(2)) {
            jj_consume_token(DOUBLENOT);
            Int32();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOUBLENOT:
              jj_consume_token(DOUBLENOT);
              Id();
              break;
            case BOOL_TYPE:
              jj_consume_token(BOOL_TYPE);
              break;
            case CHAR_TYPE:
              jj_consume_token(CHAR_TYPE);
              break;
            case CLASS_TYPE:
      ASTInspectableType jjtn001 = new ASTInspectableType(JJTINSPECTABLETYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
              try {
                jj_consume_token(CLASS_TYPE);
                TypeReference();
              } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
              } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
              }
              break;
            case FLOAT32:
              jj_consume_token(FLOAT32);
              break;
            case FLOAT64:
              jj_consume_token(FLOAT64);
              break;
            case INT8_TYPE:
              jj_consume_token(INT8_TYPE);
              break;
            case INT16_TYPE:
              jj_consume_token(INT16_TYPE);
              break;
            case INT32_TYPE:
              jj_consume_token(INT32_TYPE);
              break;
            case INT64_TYPE:
              jj_consume_token(INT64_TYPE);
              break;
            case UINT8_TYPE:
              jj_consume_token(UINT8_TYPE);
              break;
            case UINT16_TYPE:
              jj_consume_token(UINT16_TYPE);
              break;
            case UINT32_TYPE:
              jj_consume_token(UINT32_TYPE);
              break;
            case UINT64_TYPE:
              jj_consume_token(UINT64_TYPE);
              break;
            default:
              jj_la1[141] = jj_gen;
              if (jj_2_48(2)) {
                jj_consume_token(NATIVE);
                jj_consume_token(INT_TYPE);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NATIVE:
                  jj_consume_token(NATIVE);
                  jj_consume_token(UNSIGNED);
                  jj_consume_token(INT_TYPE);
                  break;
                case OBJECT_TYPE:
                  jj_consume_token(OBJECT_TYPE);
                  break;
                case STRING_TYPE:
                  jj_consume_token(STRING_TYPE);
                  break;
                case TYPEDREF:
                  jj_consume_token(TYPEDREF);
                  break;
                case VALUETYPE:
      ASTInspectableType jjtn002 = new ASTInspectableType(JJTINSPECTABLETYPE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
                  try {
                    jj_consume_token(VALUETYPE);
                    TypeReference();
                  } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
                  } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
                  }
                  break;
                default:
                  jj_la1[142] = jj_gen;
                  if (jj_2_49(2)) {
                    jj_consume_token(UNSIGNED);
                    jj_consume_token(INT8_TYPE);
                  } else if (jj_2_50(2)) {
                    jj_consume_token(UNSIGNED);
                    jj_consume_token(INT16_TYPE);
                  } else if (jj_2_51(2)) {
                    jj_consume_token(UNSIGNED);
                    jj_consume_token(INT32_TYPE);
                  } else if (jj_2_52(2)) {
                    jj_consume_token(UNSIGNED);
                    jj_consume_token(INT64_TYPE);
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case VOID_TYPE:
                      jj_consume_token(VOID_TYPE);
                      break;
                    default:
                      jj_la1[143] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeBase2() throws ParseException {
 /*@bgen(jjtree) TypeBase2 */
  ASTTypeBase2 jjtn000 = new ASTTypeBase2(JJTTYPEBASE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
        jj_consume_token(AMP);
        break;
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        GenArgs();
        jj_consume_token(GREATER_THAN);
        break;
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELIPSES:
        case DECIMAL_BYTE:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
          Bound();
          label_30:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[144] = jj_gen;
              break label_30;
            }
            jj_consume_token(COMMA);
            Bound();
          }
          break;
        default:
          jj_la1[145] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_BRACKET);
        break;
      case MODOPT:
          ASTInspectableType jjtn001 = new ASTInspectableType(JJTINSPECTABLETYPE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(MODOPT);
          jj_consume_token(LEFT_PAREN);
          TypeReference();
          jj_consume_token(RIGHT_PAREN);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      case MODREQ:
          ASTInspectableType jjtn002 = new ASTInspectableType(JJTINSPECTABLETYPE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MODREQ);
          jj_consume_token(LEFT_PAREN);
          TypeReference();
          jj_consume_token(RIGHT_PAREN);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
        break;
      case PINNED:
        jj_consume_token(PINNED);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeSpec() throws ParseException {
 /*@bgen(jjtree) TypeSpec */
  ASTTypeSpec jjtn000 = new ASTTypeSpec(JJTTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_53(3)) {
      ASTInspectableType jjtn001 = new ASTInspectableType(JJTINSPECTABLETYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          TypeReference();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOAT32:
        case FLOAT64:
        case BOOL_TYPE:
        case CHAR_TYPE:
        case CLASS_TYPE:
        case UINT8_TYPE:
        case UINT16_TYPE:
        case UINT32_TYPE:
        case UINT64_TYPE:
        case INT8_TYPE:
        case INT16_TYPE:
        case INT32_TYPE:
        case INT64_TYPE:
        case NATIVE:
        case UNSIGNED:
        case OBJECT_TYPE:
        case STRING_TYPE:
        case TYPEDREF:
        case VALUETYPE:
        case VOID_TYPE:
        case METHOD_TYPE:
        case NOT:
        case DOUBLENOT:
          Type();
          break;
        default:
          jj_la1[147] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Bound() throws ParseException {
 /*@bgen(jjtree) Bound */
  ASTBound jjtn000 = new ASTBound(JJTBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_54(3)) {
        Int32();
        jj_consume_token(ELIPSES);
        Int32();
      } else if (jj_2_55(3)) {
        Int32();
        jj_consume_token(ELIPSES);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELIPSES:
          jj_consume_token(ELIPSES);
          break;
        case DECIMAL_BYTE:
        case DECIMAL_LITERAL:
        case HEX_LITERAL:
          Int32();
          break;
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GenArgs() throws ParseException {
 /*@bgen(jjtree) GenArgs */
  ASTGenArgs jjtn000 = new ASTGenArgs(JJTGENARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      label_31:
      while (true) {
        if (jj_2_56(2)) {
          ;
        } else {
          break label_31;
        }
        jj_consume_token(COMMA);
        Type();
      }
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[149] = jj_gen;
          break label_32;
        }
        jj_consume_token(COMMA);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Parameters() throws ParseException {
 /*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT32:
      case FLOAT64:
      case ELIPSES:
      case BOOL_TYPE:
      case CHAR_TYPE:
      case CLASS_TYPE:
      case UINT8_TYPE:
      case UINT16_TYPE:
      case UINT32_TYPE:
      case UINT64_TYPE:
      case INT8_TYPE:
      case INT16_TYPE:
      case INT32_TYPE:
      case INT64_TYPE:
      case NATIVE:
      case UNSIGNED:
      case OBJECT_TYPE:
      case STRING_TYPE:
      case TYPEDREF:
      case VALUETYPE:
      case VOID_TYPE:
      case METHOD_TYPE:
      case NOT:
      case DOUBLENOT:
      case LEFT_BRACKET:
        Param();
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[150] = jj_gen;
            break label_33;
          }
          jj_consume_token(COMMA);
          Param();
        }
        break;
      default:
        jj_la1[151] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Param() throws ParseException {
 /*@bgen(jjtree) Param */
  ASTParam jjtn000 = new ASTParam(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIPSES:
        jj_consume_token(ELIPSES);
        break;
      case FLOAT32:
      case FLOAT64:
      case BOOL_TYPE:
      case CHAR_TYPE:
      case CLASS_TYPE:
      case UINT8_TYPE:
      case UINT16_TYPE:
      case UINT32_TYPE:
      case UINT64_TYPE:
      case INT8_TYPE:
      case INT16_TYPE:
      case INT32_TYPE:
      case INT64_TYPE:
      case NATIVE:
      case UNSIGNED:
      case OBJECT_TYPE:
      case STRING_TYPE:
      case TYPEDREF:
      case VALUETYPE:
      case VOID_TYPE:
      case METHOD_TYPE:
      case NOT:
      case DOUBLENOT:
      case LEFT_BRACKET:
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_BRACKET:
            ;
            break;
          default:
            jj_la1[152] = jj_gen;
            break label_34;
          }
          ParamAttr();
        }
        Type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MARSHAL:
          jj_consume_token(MARSHAL);
          jj_consume_token(LEFT_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FLOAT32:
          case FLOAT64:
          case AS:
          case BOOL_TYPE:
          case INT8_TYPE:
          case INT16_TYPE:
          case INT32_TYPE:
          case INT64_TYPE:
          case UNSIGNED:
          case INT_TYPE:
          case METHOD_TYPE:
          case LPSTR:
          case LPWSTR:
          case BYVALSTR:
          case CUSTOM_TYPE:
          case FIXED:
          case LPSTRUCT:
          case LPTSTR:
          case STRUCT:
          case LEFT_BRACKET:
            NativeType();
            break;
          default:
            jj_la1[153] = jj_gen;
            ;
          }
          jj_consume_token(RIGHT_PAREN);
          break;
        default:
          jj_la1[154] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEX_VALID_ID:
        case SQSTRING:
        case ID:
          Id();
          break;
        default:
          jj_la1[155] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ParamAttr() throws ParseException {
 /*@bgen(jjtree) ParamAttr */
  ASTParamAttr jjtn000 = new ASTParamAttr(JJTPARAMATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_57(2)) {
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(IN);
        jj_consume_token(RIGHT_BRACKET);
      } else if (jj_2_58(2)) {
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(OUT);
        jj_consume_token(RIGHT_BRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          jj_consume_token(OPT);
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[157] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CallConv() throws ParseException {
 /*@bgen(jjtree) CallConv */
  ASTCallConv jjtn000 = new ASTCallConv(JJTCALLCONV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCE:
        jj_consume_token(INSTANCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPLICIT:
          jj_consume_token(EXPLICIT);
          break;
        default:
          jj_la1[158] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[159] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_TOKEN:
      case UNMANAGED:
      case VARARG:
        CallKind();
        break;
      default:
        jj_la1[160] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CallKind() throws ParseException {
 /*@bgen(jjtree) CallKind */
  ASTCallKind jjtn000 = new ASTCallKind(JJTCALLKIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULT_TOKEN:
        jj_consume_token(DEFAULT_TOKEN);
        break;
      default:
        jj_la1[161] = jj_gen;
        if (jj_2_59(2)) {
          jj_consume_token(UNMANAGED);
          jj_consume_token(CDECL);
        } else if (jj_2_60(2)) {
          jj_consume_token(UNMANAGED);
          jj_consume_token(FASTCALL);
        } else if (jj_2_61(2)) {
          jj_consume_token(UNMANAGED);
          jj_consume_token(STDCALL);
        } else if (jj_2_62(2)) {
          jj_consume_token(UNMANAGED);
          jj_consume_token(THISCALL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VARARG:
            jj_consume_token(VARARG);
            break;
          default:
            jj_la1[162] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeReference() throws ParseException {
 /*@bgen(jjtree) TypeReference */
  ASTTypeReference jjtn000 = new ASTTypeReference(JJTTYPEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ResolutionScope();
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      DottedName();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASH:
          ;
          break;
        default:
          jj_la1[164] = jj_gen;
          break label_35;
        }
        jj_consume_token(SLASH);
        DottedName();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ResolutionScope() throws ParseException {
 /*@bgen(jjtree) ResolutionScope */
  ASTResolutionScope jjtn000 = new ASTResolutionScope(JJTRESOLUTIONSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_63(2)) {
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(MODULE);
        Filename();
        jj_consume_token(RIGHT_BRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          AssemblyRefName();
          jj_consume_token(RIGHT_BRACKET);
          break;
        default:
          jj_la1[165] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AssemblyRefName() throws ParseException {
 /*@bgen(jjtree) AssemblyRefName */
  ASTAssemblyRefName jjtn000 = new ASTAssemblyRefName(JJTASSEMBLYREFNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DottedName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//more potential one or manys
  final public void NativeType() throws ParseException {
 /*@bgen(jjtree) NativeType */
  ASTNativeType jjtn000 = new ASTNativeType(JJTNATIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
        break;
      case BOOL_TYPE:
        jj_consume_token(BOOL_TYPE);
        break;
      case FLOAT32:
        jj_consume_token(FLOAT32);
        break;
      case FLOAT64:
        jj_consume_token(FLOAT64);
        break;
      default:
        jj_la1[174] = jj_gen;
        if (jj_2_68(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            jj_consume_token(UNSIGNED);
            break;
          default:
            jj_la1[166] = jj_gen;
            ;
          }
          jj_consume_token(INT_TYPE);
        } else if (jj_2_69(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            jj_consume_token(UNSIGNED);
            break;
          default:
            jj_la1[167] = jj_gen;
            ;
          }
          jj_consume_token(INT8_TYPE);
        } else if (jj_2_70(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            jj_consume_token(UNSIGNED);
            break;
          default:
            jj_la1[168] = jj_gen;
            ;
          }
          jj_consume_token(INT16_TYPE);
        } else if (jj_2_71(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            jj_consume_token(UNSIGNED);
            break;
          default:
            jj_la1[169] = jj_gen;
            ;
          }
          jj_consume_token(INT32_TYPE);
        } else if (jj_2_72(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            jj_consume_token(UNSIGNED);
            break;
          default:
            jj_la1[170] = jj_gen;
            ;
          }
          jj_consume_token(INT64_TYPE);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPSTR:
            jj_consume_token(LPSTR);
            break;
          case LPWSTR:
            jj_consume_token(LPWSTR);
            break;
          case METHOD_TYPE:
            jj_consume_token(METHOD_TYPE);
            break;
          case AS:
            jj_consume_token(AS);
            jj_consume_token(ANY);
            break;
          case BYVALSTR:
            jj_consume_token(BYVALSTR);
            break;
          case CUSTOM_TYPE:
            jj_consume_token(CUSTOM_TYPE);
            jj_consume_token(LEFT_PAREN);
            jj_consume_token(QSTRING);
            jj_consume_token(COMMA);
            jj_consume_token(QSTRING);
            jj_consume_token(RIGHT_PAREN);
            break;
          default:
            jj_la1[175] = jj_gen;
            if (jj_2_73(2)) {
              jj_consume_token(FIXED);
              jj_consume_token(ARRAY);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DECIMAL_BYTE:
              case DECIMAL_LITERAL:
              case HEX_LITERAL:
                Int32();
                break;
              default:
                jj_la1[171] = jj_gen;
                ;
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case FIXED:
                jj_consume_token(FIXED);
                jj_consume_token(SYSSTRING);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DECIMAL_BYTE:
                case DECIMAL_LITERAL:
                case HEX_LITERAL:
                  Int32();
                  break;
                default:
                  jj_la1[172] = jj_gen;
                  ;
                }
                break;
              case LPSTRUCT:
                jj_consume_token(LPSTRUCT);
                break;
              case LPTSTR:
                jj_consume_token(LPTSTR);
                break;
              case STRUCT:
                jj_consume_token(STRUCT);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case LEFT_BRACKET:
                  if (jj_2_64(3)) {
                    jj_consume_token(LEFT_BRACKET);
                    jj_consume_token(RIGHT_BRACKET);
                  } else if (jj_2_65(3)) {
                    jj_consume_token(LEFT_BRACKET);
                    Int32();
                    jj_consume_token(RIGHT_BRACKET);
                  } else if (jj_2_66(3)) {
                    jj_consume_token(LEFT_BRACKET);
                    jj_consume_token(PLUS);
                    Int32();
                    jj_consume_token(RIGHT_BRACKET);
                  } else if (jj_2_67(3)) {
                    jj_consume_token(LEFT_BRACKET);
                    Int32();
                    jj_consume_token(PLUS);
                    Int32();
                    jj_consume_token(RIGHT_BRACKET);
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[173] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[176] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ValueTypeReference() throws ParseException {
 /*@bgen(jjtree) ValueTypeReference */
  ASTValueTypeReference jjtn000 = new ASTValueTypeReference(JJTVALUETYPEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOXED:
      ASTInspectableType jjtn001 = new ASTInspectableType(JJTINSPECTABLETYPE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(BOXED);
          TypeReference();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        break;
      case VALUETYPE:
        jj_consume_token(VALUETYPE);
        TypeReference();
        break;
      default:
        jj_la1[177] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
  ASTField jjtn000 = new ASTField(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIELD);
      FieldDecl();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Int32() throws ParseException {
 /*@bgen(jjtree) Int32 */
  ASTInt32 jjtn000 = new ASTInt32(JJTINT32);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_BYTE:
        jj_consume_token(DECIMAL_BYTE);
        break;
      case DECIMAL_LITERAL:
        jj_consume_token(DECIMAL_LITERAL);
        break;
      case HEX_LITERAL:
        jj_consume_token(HEX_LITERAL);
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void HexByte() throws ParseException {
 /*@bgen(jjtree) HexByte */
  ASTHexByte jjtn000 = new ASTHexByte(JJTHEXBYTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_BYTE:
        jj_consume_token(DECIMAL_BYTE);
        break;
      case HEX_BYTE:
        jj_consume_token(HEX_BYTE);
        break;
      case HEX_VALID_ID:
        jj_consume_token(HEX_VALID_ID);
        break;
      default:
        jj_la1[179] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RealNumber() throws ParseException {
 /*@bgen(jjtree) RealNumber */
  ASTRealNumber jjtn000 = new ASTRealNumber(JJTREALNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_74(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECIMAL_LITERAL:
          jj_consume_token(DECIMAL_LITERAL);
          break;
        case DECIMAL_BYTE:
          jj_consume_token(DECIMAL_BYTE);
          break;
        default:
          jj_la1[180] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECIMAL_BYTE:
        case DECIMAL_LITERAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMAL_LITERAL:
            jj_consume_token(DECIMAL_LITERAL);
            break;
          case DECIMAL_BYTE:
            jj_consume_token(DECIMAL_BYTE);
            break;
          default:
            jj_la1[181] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[182] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPONENT:
          jj_consume_token(EXPONENT);
          break;
        default:
          jj_la1[183] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMAL_LITERAL:
            jj_consume_token(DECIMAL_LITERAL);
            break;
          case DECIMAL_BYTE:
            jj_consume_token(DECIMAL_BYTE);
            break;
          default:
            jj_la1[184] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPONENT:
            jj_consume_token(EXPONENT);
            break;
          default:
            jj_la1[185] = jj_gen;
            ;
          }
          break;
        case DECIMAL_BYTE:
        case DECIMAL_LITERAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMAL_LITERAL:
            jj_consume_token(DECIMAL_LITERAL);
            break;
          case DECIMAL_BYTE:
            jj_consume_token(DECIMAL_BYTE);
            break;
          default:
            jj_la1[186] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(EXPONENT);
          break;
        case REAL_PIECE:
          jj_consume_token(REAL_PIECE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXPONENT:
            jj_consume_token(EXPONENT);
            break;
          default:
            jj_la1[187] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[188] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(OVERRIDE)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(FAMORASSEM)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(FAMILY)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(FAMANDASSEM)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(NESTED)) return true;
    if (jj_scan_token(ASSEMBLY_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(202)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(METHOD_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_45()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(198)) return true;
    if (jj_scan_token(QSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(REAL_PIECE)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_44()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(422)) {
    jj_scanpos = xsp;
    if (jj_scan_token(420)) return true;
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_42()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(422)) {
    jj_scanpos = xsp;
    if (jj_scan_token(420)) return true;
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(420)) {
    jj_scanpos = xsp;
    if (jj_scan_token(422)) {
    jj_scanpos = xsp;
    if (jj_scan_token(423)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_scan_token(FIXED)) return true;
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT64_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT32_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT16_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT8_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(SQSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(UNMANAGED)) return true;
    if (jj_scan_token(THISCALL)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(MODULE)) return true;
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(UNMANAGED)) return true;
    if (jj_scan_token(STDCALL)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(FILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_scan_token(UNMANAGED)) return true;
    if (jj_scan_token(FASTCALL)) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_scan_token(UNMANAGED)) return true;
    if (jj_scan_token(CDECL)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(INSTANCE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(ASSEMBLY)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(FLOAT32)) return true;
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(OUT)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(FLOAT32)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LINE)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(178)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(ELIPSES)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(ELIPSES)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(267)) {
    jj_scanpos = xsp;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_scan_token(269)) {
    jj_scanpos = xsp;
    if (jj_scan_token(270)) {
    jj_scanpos = xsp;
    if (jj_scan_token(271)) {
    jj_scanpos = xsp;
    if (jj_scan_token(272)) {
    jj_scanpos = xsp;
    if (jj_scan_token(273)) {
    jj_scanpos = xsp;
    if (jj_scan_token(274)) {
    jj_scanpos = xsp;
    if (jj_scan_token(275)) {
    jj_scanpos = xsp;
    if (jj_scan_token(276)) {
    jj_scanpos = xsp;
    if (jj_scan_token(277)) {
    jj_scanpos = xsp;
    if (jj_scan_token(278)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(MODREQ)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(PARAM)) return true;
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(MODOPT)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(OVERRIDE)) return true;
    if (jj_scan_token(METHOD_TYPE)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(430)) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT64_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT32_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT16_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(UINT8_TYPE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT8_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT64_TYPE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(VALUETYPE)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(431)) {
    jj_scanpos = xsp;
    if (jj_scan_token(427)) {
    jj_scanpos = xsp;
    if (jj_scan_token(419)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT32_TYPE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT16_TYPE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(INT8_TYPE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_scan_token(INT_TYPE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(261)) {
    jj_scanpos = xsp;
    if (jj_scan_token(262)) return true;
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(FLOAT32)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(FLOAT64)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(FLOAT32)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(CLASS_TYPE)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(DOUBLENOT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(DOUBLENOT)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(METHOD_TYPE)) return true;
    if (jj_3R_84()) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) {
    jj_scanpos = xsp;
    if (jj_scan_token(235)) {
    jj_scanpos = xsp;
    if (jj_scan_token(236)) {
    jj_scanpos = xsp;
    if (jj_scan_token(237)) {
    jj_scanpos = xsp;
    if (jj_scan_token(238)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(240)) {
    jj_scanpos = xsp;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_scan_token(242)) {
    jj_scanpos = xsp;
    if (jj_scan_token(243)) {
    jj_scanpos = xsp;
    if (jj_scan_token(244)) {
    jj_scanpos = xsp;
    if (jj_scan_token(245)) {
    jj_scanpos = xsp;
    if (jj_scan_token(246)) {
    jj_scanpos = xsp;
    if (jj_scan_token(247)) {
    jj_scanpos = xsp;
    if (jj_scan_token(248)) {
    jj_scanpos = xsp;
    if (jj_scan_token(249)) {
    jj_scanpos = xsp;
    if (jj_scan_token(250)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_scan_token(252)) {
    jj_scanpos = xsp;
    if (jj_scan_token(253)) {
    jj_scanpos = xsp;
    if (jj_scan_token(254)) {
    jj_scanpos = xsp;
    if (jj_scan_token(255)) {
    jj_scanpos = xsp;
    if (jj_scan_token(256)) {
    jj_scanpos = xsp;
    if (jj_scan_token(257)) {
    jj_scanpos = xsp;
    if (jj_scan_token(258)) {
    jj_scanpos = xsp;
    if (jj_scan_token(259)) {
    jj_scanpos = xsp;
    if (jj_scan_token(260)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(DOUBLE_COLON)) return true;
    return false;
  }

  public MSILParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[189];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static private int[] jj_la1_11;
  static private int[] jj_la1_12;
  static private int[] jj_la1_13;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
      jj_la1_10();
      jj_la1_11();
      jj_la1_12();
      jj_la1_13();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xdf3fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x440000,0x0,0x448000,0x11d4000,0x250000,0x0,0x800000,0x8c4000,0x0,0x0,0x0,0x248000,0x8000,0x1f0000,0x1000000,0xde204000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x248000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8c4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8c0000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x50000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11d4000,0x44000,0x8c4000,0x44000,0x11d0000,0x4000,0x0,0x0,0x0,0x44000,0x0,0x0,0x0,0x44000,0x0,0x448000,0x448000,0x440000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x600001,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x60000e,0x80000000,0x1e,0x6007e0,0x0,0x4000000,0x0,0x703940,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x600001,0x0,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x703940,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x3800,0x40,0x700100,0x18000000,0x81800000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x18000000,0x0,0x0,0x18000000,0x40000000,0x40000000,0x18000000,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x18000000,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x18000000,0x6007e0,0xf0000,0x703940,0x1c000,0x20,0x6007c0,0x0,0x0,0x0,0x1c000,0x0,0x0,0x0,0xf0000,0x80000000,0x1e,0x1e,0x60000e,0x1800000,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x1800000,0x0,0x81800000,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x47c02,0x0,0x0,0x0,0x10000000,0xe0080014,0x0,0xe0080014,0x47c02,0x10000000,0x0,0x47c00,0x0,0x0,0x47c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x1fc37e,0x0,0x0,0x1fc37e,0x0,0x800000,0x0,0x1,0x0,0x200000,0x0,0x0,0x200000,0x0,0x17e,0x1fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x4000,0x0,0x600000,0x40000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x40,0x80,0x18000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x0,0xe0000000,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x7f80,0x0,0x4,0x0,0x3f8000,0x800001,0x0,0x800001,0x7f80,0x3f8000,0x0,0x7001084,0x0,0x0,0x7001084,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff8,0x0,0x600000,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x4,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x3000,0x0,0x70000,0x0,0x0,0x0,0x0,0x0,0x0,0x3781000,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x782000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x782000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x8dfff000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8dfff000,0x0,0x7ff000,0x8c800000,0x0,0x0,0x0,0x70000000,0x8dfff000,0x0,0x0,0x0,0x8dfff000,0x0,0x3781000,0x0,0x0,0x8dfff000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x40000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x40000,0x8000000,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x10000,0x0,0x1000000,0x0,0x0,0x400000,0x0,0x80039dc,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x80408000,0x40000,0x100000,0x8000000,0x100000,0x8000000,0x100000,0x8000000,0x100000,0x8000000,0x100000,0x8000000,0x100000,0x8000000,0x80008000,0x1000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x40000,0x0,0x40000,0x1,0xe000007,0x100000,0x1,0x40000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000007,0x2000000,0x4000000,0x1,0x2,0x40000,0x0,0xa8000000,0x6000007,0x0,0x40000,0x40000,0xe000007,0x8000000,0x80039dc,0x0,0x0,0xe000007,0x8000000,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0xdc,0x3900,0x4001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffec0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffff800,0xc0,0x600,0x1ffff800,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffec0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffec0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0xfffffec0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x7,0x1f8,0xfffffe00,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff800000,0x7fff80,0x60,0x1f,0x0,0x0,0x0,0x0,0x0,0x1f,0x60,0x780,0x7ff800,0xff800000,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_10() {
      jj_la1_10 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_11() {
      jj_la1_11 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_12() {
      jj_la1_12 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_13() {
      jj_la1_13 = new int[] {0x0,0x8808,0xc808,0x0,0x38,0x150,0x150,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x880f,0xc808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0,0x0,0x0,0x0,0x0,0x0,0x8808,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x880f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x880f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x880f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0,0x0,0x0,0xd0,0x0,0x0,0x0,0x0,0x0,0x0,0x8808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd0,0xd0,0x0,0x0,0x0,0x0,0x0,0xd0,0x38,0x50,0x50,0x50,0x200,0x50,0x200,0x50,0x200,0x150,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[74];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MSILParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MSILParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MSILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MSILParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MSILParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MSILParser(MSILParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MSILParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 189; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[432];
    for (int i = 0; i < 432; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 189; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
          if ((jj_la1_11[i] & (1<<j)) != 0) {
            la1tokens[352+j] = true;
          }
          if ((jj_la1_12[i] & (1<<j)) != 0) {
            la1tokens[384+j] = true;
          }
          if ((jj_la1_13[i] & (1<<j)) != 0) {
            la1tokens[416+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 432; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 74; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
