The processor package consists of three primary classes: RequestProcessor,
Processor and ResponseProcessor.

The RequestProcessor class serves as the abstraction layer between the
Request objects coming from the listener to the server implementation.  The
public APIs newConnection, process, lostConnection are the main entry
points which queue up PendingRequest objects which are processed via a
separate thread pool.  As RequestRunners in that thread pool pick up the
PendingRequest objects, they invoke the dispatch method which determines
which logic to call based on the type of the Request.
A newConnection invocation must be the first activity for a given connection
ID and it establishes the internal state of the RequestProcessor for that
connection ID.   Specific methods for each of the Request types are invoked
and the Request object parameters are translated into server specific data
(indexes to IDs, non-type safe parameters into the actual objects, etc).
Then the RequestProcessor calls into the Processor class to do the real work.

The Processor is where the majority of the implementation logic resides. Its
methods tend to do some basic validation of inputs and server state and then
perform some specific actions, such as compile or submit, by calling into the
CoreServices.   Any results from the actions or info which is sent back to the
client is handed off to the ResponseProcessor.  The Processor also maintains
a set of connection IDs for each room along with the set of connection IDs
watching each room.   This allows for the server to quickly send a set of
responses to a specific room by just sending the same response to the Collections
associated with that room.   It also contains the callback handlers which
are invoked when the EventService generates responses for activities (chat,
contest events, compiles, challenges, etc).
Some of the activities in the Processor are very resource intensive and may
end up blocking and so they are handed off to a separate thread pool which
executes these stages independent of the regular processing threads.  Currently
only the End Contest and Assign Rooms admin commands fall into this category.

The ResponseProcessor is the abstraction layer turning the objects and data
at the server into Responses for the applet to receive.  It is intended to be
the only class which creates and packages up Response objects.  There are
several APIs for sending the same Response set to a Collection of connection
IDs for performance reasons.  There are also several convenience APIs for
creating common Responses (error messages, popup message, etc).  The
RequestProcessor, CoreServices and Processor all make calls into this class to
send Responses to the clients.

There are several other classes in the processor package which provide support
to the three primary classes.

AdminCommands implements all the dispatching logic for the commands which can
be executed via the "/admin" applet chat command.

UserState stores all the specific state for a given user in the processor.  This
is the state that is not meant to be shared with any other users in the system
and can therefore be stored locally and accessed quickly (shared or persisted
state would go into the common.User/Coder objects instead).

RequestRunner is the Runnable implementation for the RequestProcessor's thread
pool and simply dispatches PendingRequests back into the RequestProcessor.

The RequestSet and PendingRequest objects are wrappers to maintain the state
around Requests which have come into the RequestProcessor and are getting
executed via the RequestRunner.

There are also several parameters for the processor package which are
controlled via the Processor.properties file.
The thread count for the Processor thread pool is given by the processor.threads
property.   The location of the astyle executable is given by the
processor.astyle.path.  The number of stage threads for processor is given by
processor.stage.threads. The number of seconds between sending out heartbeat
timers to all clients is given by processor.heartbeat.delay.