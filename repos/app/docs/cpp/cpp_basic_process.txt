CPPCodeCompiler wraps a single static public method, compile().  This
takes a Submission object containing C++ source, attempts to compile
it, and returns true when an executable is produced and false
otherwise.  It also saves the executable in the database via
Submission.setClassFiles() and saves any error or warning messages by
calling Submission.setCompileError().

The compile is done in two stages.  First a wrapper is generated which
parses inputs, calls the solution method, and writes the result.  This
is compiled to an object file which can be reused for any instance of
that problem.  Warnings from compiling the wrapper are considered
fatal.  Second, the compiler is called with the submission source and
the saved object file for the wrapper as arguments, meaning it must
compile the submission and then link the results together to form an
executable.

The wrapper is mostly contructed by the C preprocessor.  The Java code
emits a single source file which can be used for either compile with
slightly different symbols defined.

CPPTest is written with an idiom which may seem odd in Java.  It has a
single public constructor, many public fields, and no public methods
which modify anything.  After construction its state does not change.
Construction can take as much as 10 or 15 seconds; that is when the
test is done.  The fields and format methods are verbosely named and
commented in the source.

Communication with a submission to be tested is done through both a
sandbox process written in C (which monitors the system calls made by
the other process, controls its execution time and memory use, etc) and
the generated wrapper.  The sandbox reroutes its own stdin to fd 10 for
the child.  File descriptors 1, 2, and 3 from the child, which should
have stdout, stderr, and the result of the method call, are saved to
files.  Exit status, statistics, and the name of a directory containing
the other result files are printed by the sandbox on its own stdout.
If something goes horribly wrong the sandbox may also print messages to
stderr.

The format used to pass structures in and out of the wrapped child is
very simple.  Each atom is written on a line by itself.  (Newlines and
nulls are not permitted in strings.)  Numbers are in decimal, booleans
expressed as 0 or 1, characters and strings raw.  Arrays are preceded
by a line with a count, and then the array elements are listed, again
each on a line by itself.