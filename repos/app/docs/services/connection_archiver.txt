ConnectionArchiver (com.topcoder.server.services.ConnectionArchiver).

1) It starts after a call from CoreServices.start().
2) It stops after a call from CoreServices.stop().
3) When the processor receives a login request, it sends the information
(String ip, String serverType, int servID, int connID, int coderID, String userName)
to the connection archiver through CoreServices.

ip is the remote IP (in the form X.X.X.X), serverType is currently always "S", servID is
currently always 0, connID is a unique (for the given listener) connection id assigned
by the listener

4) The connection archiver creates an instance of AddConnectionRequest filled with the data
(String ip, String serverType, int servID, int connID, int coderID, String userName)
and puts it on the add queue.

5) On the logout, the processor send the information
(String serverType, int servId, int connId)
to the connection archiver through CoreServices.

6) The connection archiver creates an instance of RemoveConnectionRequest filled with the data
(String serverType, int servId, int connId)
and puts it one the remove queue.

7) Every 4 (current value) seconds, the archiver goes through first the add list, then the remove list
and calls the appropriate methods in DBServices:
 public void addConnection (String ip, String serverType, int servID, int connID, int coderID, String userName) throws RemoteException;
 public void removeConnection (String serverType, int servId, int connId) throws RemoteException;

8) When the archiver receives a stop() message, it processes the lists.
