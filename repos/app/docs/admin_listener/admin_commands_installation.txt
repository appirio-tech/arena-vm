Promote the newest app module and shared module code into prod.  (If the shared module contains other changes that you don't want to promote yet, the relevant updates from the shared module which you must have for the purposes of this project are to the files ResultSetContainer.java, ResultSetTableModel.java, and RowTester.java, all in com/topcoder/shared/resultSet.)  The changes to ResultSetContainer.java are additions and should not affect existing code which uses this class.  Make sure that the sharedForApp.jar is the new version (available in the app module under app/lib/jars if necessary) and that there are no old versions of this jarfile sitting around in the classpath.

Table Creation

Below are the new tables and their info.

monitor_function_type_lu
(PK) monitor_function_type_id DECIMAL (3,0)
monitor_function_type_desc VARCHAR (100)

monitor_function
(PK) monitor_function_id DECIMAL (10,0)
name VARCHAR (100)
monitor_function_desc VARCHAR (255)
monitor_function_type_id DECIMAL (3,0) - FK to monitor_function_type_lu.monitor_function_type_id

monitor_user_round_xref
(PK) user_id DECIMAL (10,0) - FK to user.user_id
(PK) round_id DECIMAL (10,0) - FK to round.round_id

Note that (incorrectly) no PK was defined in the ccpi development DB for this table.

group_monitor_function_xref
(PK) group_id DECIMAL (10,0) - FK to group.group_id
(PK) monitor_function_id DECIMAL (10,0) - FK to monitor_function.monitor_function_id

Note that (incorrectly) no PK was defined in the ccpi development DB for this table.

Table Population

The statements in the following SQL file:
app/src/main/com/topcoder/server/AdminListener/refreshSecurityTables.sql

when executed will clear all existing data in the above new tables, and will also populate the tables monitor_function_type_lu and monitor_function.  

To this file should be added the necessary statements to populate the group_monitor_function_xref table.  I left these out because I did not want to make assumptions as to what rights should be given to non-TC staff admins.  (George, if you would prefer to have me update the file, all I need is a list of what rights non-TC staff admins should have and what group(s) these rights should be assigned to - Dave).

The monitor_user_round_xref table can be populated on an as-needed basis from the admin monitor.

A ROOM_SEQ row should be added to the sequence_object table (id = 14), and the current_value should be set to the max room_id + 1.  


New Shell Scripts and Resources

There is one new shell script:
app/scripts/adminListener.sh

which starts/stops/kills the admin listener server.  Its arguments are as follows:
argument 1 - start | stop | kill, depending on what you want to do.
argument 2 - the port on which to start the admin listener.
 argument 3 - (optional) the ip and port at which the contest server is listening for admin connections, in the format ip:port.  If unspecified, no contest server connection will be made.  This probably is not what you want.
argument 4 - (optional) the port used by the logging server.  If unspecified, no logging server will be instantiated.

Example call:

adminListener.sh start 5010 127.16.20.30:5007 5015

In production, all arguments will probably be the same every time you start/stop, so it probably would be worthwhile to make a start/stop script that calls adminListener.sh with the appropriate argument values.

Make sure that the IP of the machine running the admin listener is on the allowed IP list for the contest server.

The following changes have been made to various .properties files:
monitor.properties
(new) login_x and login_y - these control the location onscreen where the admin monitor login window appears.
(new) contest.management.timeout - how long the monitor will wait before timing out on a contest management request, in seconds


Logging

The following scripts have been updated to incorporate the necessary info for remote logging:
app/scripts/adminListener.sh 
app/scripts/listener.sh 
app/scripts/services/compilerExec.sh
app/scripts/services/testerExec.sh

The weblogic startup script must be updated manually to define the following system property on whatever line invokes the JVM:
-Dcom.topcoder.logging.id=WebLogic

log4j.properties has been updated in the main branch to define a socket appender for every process.  This version must be in place (app/resources) on all machines that will generate logging data. The following lines are of interest:

log4j.appender.socket.remoteHost=172.16.20.30
log4j.appender.socket.port=5013
log4j.appender.socket.reconnectionDelay=20

The first two should be set to the IP and logging port of the admin listener.  The last is the number of seconds between retries in case the logging server is unavailable at the specified address.  Omitting this line or setting it to 0 will disable automatic reconnect.  If desired, multiple socket appenders may be defined but must be specified in the value for log4j.rootCategory.


