1) Currently, the applet and the server could send objects of the following 
"types that could be handled by com.topcoder.netCommon.CSHandler"
(CS - Custom Serialization, for up-to-date information see CSHandler
code):

a) "primitive" types, such as null, String, Boolean, Integer, etc.
b) "collection" types, ArrayList and HashMap.
c) types that implement com.topcoder.netCommon.CustomSerializable, such as
com.topcoder.netCommon.Request, Response, etc.
d) any other class that implements CustomSerializable (this uses reflection and should be used only for testing)

ArrayList and HashMap should contains only objects of "types that could be handled by CSHandler"
(yes, this is recursion).

I added test cases - RequestTest, ResponseTest and CSUtilsTest. If you change the format or add suport for additional
class in CSHandler, make sure to change the test cases accordingly and run them.

If you want to use ObjectInput/OutputStreams and want maximum performance, you should use java.io.Externalizable
instead of java.io.Serializable (in fact the former is a subinterface of the latter). Though using
CustomSerializable and CSHandler is much faster than ObjectStreams and Externalizable.

You can consult javadoc comments in CS classes in the com.topcoder.netCommon package.
It's a good idea to see how various classes that implement the CustomSerializable interface before writing your own.

2) Notes for those who implement CustomSerializable. 

a) Make sure that your class has an accessible (from CSHandler or its subclass that will deal with this class) 
no-arg constructor (when reading the object, first it will be created with a no-arg constructor and then 
customReadObject() will be called).

b) Don't just implement CustomSerializable. Add support for the class in CSHandler or its subclasses.

If the class just implements CustomSerializable and it doesn't have any logic processing it (a byte constant,
processing logic in readObject(), writeObject() in CSHandler or readObjectOverride(), writeObjectOverride()
in CSHandler subclasses) in CSHander or its subclasses, then what is sent is the following:
<1 byte - CSHandler.CUSTOM_SERIALIZABLE> <fully-qualified class name> <what is written by customWriteObject>. 
If you don't want to send a fully-qualified
class name and use reflection at the receiving side every time you send a message, you can add support in 
CSHandler or its subclasses. In this case you'll be sending only one byte instead a byte plus a class name
and you won't use reflection.

See also: CSHandler, CSHandler.readObject(), CSHandler.writeObject(), search for subclasses of CSHandler.

3) Why do we use CustomSerializable and CSHandler (and not Serializable and ObjectInput/OutputStreams)?

The main reason is that it puts less pressure on the server (there are less bytes to read/write and process,
you can easily avoid using reflection, and there's less processing and object creation). 
On the other hand, every time you add a new class, you have to do some tedious work: implement CustomSerializable,
add support for the class in CSHandler and its subclasses. But once you're done, it's very fast and the messages
are small (compared to ObjectInput/OutputStream).
